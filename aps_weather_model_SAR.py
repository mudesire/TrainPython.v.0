# Autogenerated with SMOP 
from smop.core import *
# matlab/aps_weather_model_SAR.m

    
@function
def aps_weather_model_SAR(model_type=None,*args,**kwargs):
    varargin = aps_weather_model_SAR.varargin
    nargin = aps_weather_model_SAR.nargin

    # [] = aps_weather_model_SAR()
# Script to load weather model data and compute SAR delays
# The DEM file can be .grd file or other. If the latter, the DEM should have an asociated
# ".rsc" file, with the same filename as the DEM. The ".rsc" files should
# contain a WIDTH, LENGTH, X_FIRST, Y_FIRST, X_STEP, Y_STEP and optional a 
# FORMAT string. The weather model data is assumed to be structured in date_before(d,:) folders.
    
    
    # INPUTS:
# demfile               Full path to the DEM file. The DEM needs to me in meters.
# xlims                 Limits in the x-direction, either in degrees
# ylims                 Limits in the y-direction, either in degrees
# demnull               The value for no DEM data, default is -32768.
# smpres                The output resolution, either in degrees
#                       Units needs to be consistend with xlims and ylims.
    
    # OUTPUTS:
# It will give the computed ZENITH hydrostatic and wet delay map in cm for the selected region.
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    
    # Modified from Richard Walters - Oxford / Leeds University 2012-2013
# Modifcations:
# DB 	10/2013		Convert script to a function, integrate in aps_toolbox, 
#                   add syntax. Retrieve parameters automatic.
# DB    10/2013     Output the combined delay map.
# DB    10/2013     Increased processing efficiency
# DB    10/2013     add compatibility with Doris construct_dem.sh script
# DB    10/2013     Bug fix incase the the netcdf is split over two days
# DB    11/2013     Change the computation f saturated pressure to be
#                   identical witt how it was computed in ERA-I model.
# DB    11/2013     Update filenaming to Hydrostatic as its not dry delay.
#                   Compute the hydrostatic delay directly from int(P/T)
# DB    01/2014     Fix bug for the ERA-I longitude boundary, being set to small. 
# DB    01/2014     Allow for tiled ERA-I data
# HB-DB 02/2014     Fix to include ECMWF with scaling and offset
# DB    02/2014     Include a parameter for ECMWF data website
# DB    03/2014     Include an extra check for the DEM grd file and the
#                   selected crop
# DB 	03/2014     Save individual time stamp SAR date_before(d,:) processing
# DB    07/2014     Redefine meris_lat(lon)_range to region_lat(lon)_range
# DB    08/2014     Check if netcdf exist (ERA-I is not an operation service)
# DB    11/2014     Include option to output the 3D delays for each date_before(d,:)
# HW    02/2015     check dem file format automatically
# DB 	06/2015     Bug fix for plotting the support information 
# DB    06/2015     Fix typo in error message
# DB    11/2015     Branch of the DEM in to seperate function same for all codes
# DB    11/2015     Add multicore option from matlab
# DB 	02/2016     Close netcdf files
# DB    04/2016     Branch into weather model script and include merra too
# SSS   04/2016     Clear variables such memory need is reduced
# DB    07/2016     redefine hydrostatic delay to be based on surface pressure.
    
    fig_test=1
# matlab/aps_weather_model_SAR.m:71
    
    save_3D_delays=0
# matlab/aps_weather_model_SAR.m:72
    
    if nargin < 1:
        error('Give at least the model_type: era or merra')
    
    # change to lower caps for saving and filename generation consistency
    model_type=lower(model_type)
# matlab/aps_weather_model_SAR.m:78
    ## Constants
# Parameters from Jolivet et al 2011, GRL
    Rd=287.05
# matlab/aps_weather_model_SAR.m:82
    
    Rv=461.495
# matlab/aps_weather_model_SAR.m:83
    
    k1=0.776
# matlab/aps_weather_model_SAR.m:84
    
    k2=0.716
# matlab/aps_weather_model_SAR.m:85
    
    k3=3750.0
# matlab/aps_weather_model_SAR.m:86
    
    coeff.Rd = copy(Rd)
# matlab/aps_weather_model_SAR.m:87
    coeff.Rv = copy(Rv)
# matlab/aps_weather_model_SAR.m:88
    ## Defaults
    zref=15000
# matlab/aps_weather_model_SAR.m:91
    
    zincr=15
# matlab/aps_weather_model_SAR.m:92
    
    vertres=5
# matlab/aps_weather_model_SAR.m:93
    
    ## output file names
# output file for the DEM and look angles
    smpdem='dem_smp.xyz'
# matlab/aps_weather_model_SAR.m:97
    # getting the variables from the parms_aps file
    stamps_processed=getparm_aps('stamps_processed',1)
# matlab/aps_weather_model_SAR.m:100
    ### defaults for the weather models. If not applicable it will be changed below for the specific model.
    timelist_model=matlabarray(cat(['0000'],['0600'],['1200'],['1800'],['0000']))
# matlab/aps_weather_model_SAR.m:103
    
    era_data_type=matlabarray([])
# matlab/aps_weather_model_SAR.m:104
    
    ### Updating specific weather model information
    if strcmpi(model_type,'era'):
        weather_model_datapath=getparm_aps('era_datapath',1)
# matlab/aps_weather_model_SAR.m:109
        era_data_type=getparm_aps('era_data_type')
# matlab/aps_weather_model_SAR.m:110
    else:
        if strcmpi(model_type,'merra') or strcmpi(model_type,'merra2'):
            weather_model_datapath=getparm_aps('merra_datapath',1)
# matlab/aps_weather_model_SAR.m:112
        else:
            error(cat('weather model type not supported, either: wrf, era, merra for now'))
    
    lambda_=dot(getparm_aps('lambda',1),100)
# matlab/aps_weather_model_SAR.m:117
    
    demfile=getparm_aps('demfile',1)
# matlab/aps_weather_model_SAR.m:118
    demnull=getparm_aps('dem_null',1)
# matlab/aps_weather_model_SAR.m:119
    UTC_sat=getparm_aps('UTC_sat',1)
# matlab/aps_weather_model_SAR.m:120
    ifgday_matfile=getparm_aps('ifgday_matfile',1)
# matlab/aps_weather_model_SAR.m:121
    ifgs_dates=load(ifgday_matfile)
# matlab/aps_weather_model_SAR.m:122
    # loading the data
    if strcmp(stamps_processed,'y'):
        dates=ifgs_dates.day
# matlab/aps_weather_model_SAR.m:128
        load('psver')
        fprintf('Stamps processed structure \\n')
    else:
        psver=2
# matlab/aps_weather_model_SAR.m:132
        ifgs_dates=ifgs_dates.ifgday
# matlab/aps_weather_model_SAR.m:133
        dates=reshape(ifgs_dates,[],1)
# matlab/aps_weather_model_SAR.m:134
        dates=unique(dates)
# matlab/aps_weather_model_SAR.m:135
        dates=datenum(num2str(dates),'yyyymmdd')
# matlab/aps_weather_model_SAR.m:136
    
    # getting the dates
    n_dates=length(dates)
# matlab/aps_weather_model_SAR.m:140
    ## Compute and resample DEM
    dem,xmin,xmax,ymin,ymax,smpres,nncols,nnrows=get_DEM
# matlab/aps_weather_model_SAR.m:143
    # the region which is cropped from the ERA data and used to make the interpolation.
# Should be  larger than the region to which the delay is computed
    lonmin=floor(xmin) - 1
# matlab/aps_weather_model_SAR.m:147
    lonmax=ceil(xmax) + 1
# matlab/aps_weather_model_SAR.m:148
    latmin=floor(ymin) - 1
# matlab/aps_weather_model_SAR.m:149
    latmax=ceil(ymax) + 1
# matlab/aps_weather_model_SAR.m:150
    # setting the maximum height of the DEM to limit the range at which ERA-I
# needs to be interpolated to
    maxdem=dot(ceil(max(max(dem)) / 100),100) + 50
# matlab/aps_weather_model_SAR.m:154
    
    fprintf(cat('Interpolate to a maximum dem height of ',num2str(maxdem),' m\\n'))
    ## Compute based on Satellite pass which weather model outputs that will be used
    time_before,time_after,date_before,date_after,f_before,f_after=aps_weather_model_times(timelist_model,dates,UTC_sat,nargout=6)
# matlab/aps_weather_model_SAR.m:160
    ## generating a file
    modelfile_before,modelfile_after=aps_weather_model_filenames(model_type,time_before,time_after,date_before,date_after,weather_model_datapath,nargout=2)
# matlab/aps_weather_model_SAR.m:163
    ## performing the calucluation for each date
    for d in arange(1,n_dates).reshape(-1):
        # the save filenames
        outfile=matlabarray(cat(weather_model_datapath,filesep,date_before[d,:],filesep,date_before[d,:],'_ZWD.xyz'))
# matlab/aps_weather_model_SAR.m:170
        hydroutfile=matlabarray(cat(weather_model_datapath,filesep,date_before[d,:],filesep,date_before[d,:],'_ZHD.xyz'))
# matlab/aps_weather_model_SAR.m:171
        no_data=0
# matlab/aps_weather_model_SAR.m:173
        for kk in arange(1,2).reshape(-1):
            if kk == 1:
                file=modelfile_before[d,:]
# matlab/aps_weather_model_SAR.m:176
            if kk == 2:
                file=modelfile_after[d,:]
# matlab/aps_weather_model_SAR.m:179
            # check
            if exist(file,'file') != 2:
                no_data=no_data + 1
# matlab/aps_weather_model_SAR.m:185
            else:
                ## loading the weather model data
                if strcmpi(model_type,'era'):
                    Temp,e,Geopot,P,longrid,latgrid,xx,yy,lon0360_flag=aps_load_era(file,era_data_type,nargout=9)
# matlab/aps_weather_model_SAR.m:191
                else:
                    if strcmpi(model_type,'merra') or strcmpi(model_type,'merra2'):
                        Temp,e,Geopot,P,longrid,latgrid,xx,yy,lon0360_flag=aps_load_merra(file,model_type,coeff,nargout=9)
# matlab/aps_weather_model_SAR.m:193
                ## verify and cope with NAN's
                Temp,e,Geopot,P,longrid,latgrid=aps_weather_model_nan_check(Temp,e,Geopot,P,longrid,latgrid,nargout=6)
# matlab/aps_weather_model_SAR.m:198
                latlist=reshape(latgrid[:,:,1],[],1)
# matlab/aps_weather_model_SAR.m:202
                lonlist=reshape(longrid[:,:,1],[],1)
# matlab/aps_weather_model_SAR.m:203
                xlist=reshape(xx,[],1)
# matlab/aps_weather_model_SAR.m:204
                ylist=reshape(yy,[],1)
# matlab/aps_weather_model_SAR.m:205
                # Getting the weather model resolution
                lat_res=dot(abs(diff(unique(latgrid))),1.5)
# matlab/aps_weather_model_SAR.m:209
                lat_res=lat_res[1]
# matlab/aps_weather_model_SAR.m:210
                lon_res=dot(abs(diff(unique(longrid))),1.5)
# matlab/aps_weather_model_SAR.m:211
                lon_res=lon_res[1]
# matlab/aps_weather_model_SAR.m:212
                # is defined in the same way. Weatehr models can be [0 360]
            # degrees. User can be [-180 180] unlikely [0 360]
                if strcmpi(lon0360_flag,'y'):
                    fprintf('This needs to be defined better and some checks are needed \\n')
                    # not all pixels should be shifted.
                    keyboard
                    if xmin < 0:
                        xmin=xmin + 360
# matlab/aps_weather_model_SAR.m:223
                    if xmax < 0:
                        xmax=xmax + 360
# matlab/aps_weather_model_SAR.m:226
                # generation a plot
                if fig_test == logical_and(1,d) == logical_and(1,kk) == 1:
                    fontsize=15
# matlab/aps_weather_model_SAR.m:233
                    hfig=figure('name',cat(model_type,' weather model nodes and InSAR region'),'position',cat(200,243,610,603))
# matlab/aps_weather_model_SAR.m:234
                    plot(mean(cat(xmin,xmax)),mean(cat(ymax,ymin)),'wo','markeredgecolor','k','markerfacecolor','w','markersize',15)
                    hold('on')
                    plot(mean(cat(xmin,xmax)),mean(cat(ymax,ymin)),'r.')
                    hold('on')
                    plot(mean(cat(xmin,xmax)),mean(cat(ymax,ymin)),'r-','linewidth',2)
                    imagesc(cat(xmin,xmax),cat(ymax,ymin),dem)
                    cc=copy(colorbar)
# matlab/aps_weather_model_SAR.m:243
                    view(0,90)
                    axis('xy')
                    ylabel(cc,'Topography [m]','fontsize',fontsize)
                    hold('on')
                    plot(lonlist,latlist,'wo','markeredgecolor','k','markerfacecolor','w','markersize',15)
                    hold('on')
                    plot(cat(xmin,xmin,xmax,xmax,xmin),cat(ymin,ymax,ymax,ymin,ymin),'r-','linewidth',2)
                    title(cat(model_type,' weather model nodes'),'fontsize',fontsize)
                    set(gca,'fontsize',fontsize)
                    axis('equal')
                    axis('tight')
                    legend('location','northoutside',cat(model_type,' weather model nodes'),cat('Used ',model_type,' weather model nodes'),'InSAR box')
                # making the weather model grid slightly larger than the InSAR
            # bounding box. Will use the weather model resolution for this
            # to make sure an extra grid node is included.
                ix=find(ymin - lat_res <= logical_and(latlist,latlist) <= logical_and(ymax + lat_res,xmin - lon_res) <= logical_and(lonlist,lonlist) <= xmax + lon_res)
# matlab/aps_weather_model_SAR.m:264
                xlist=xlist[ix]
# matlab/aps_weather_model_SAR.m:265
                ylist=ylist[ix]
# matlab/aps_weather_model_SAR.m:266
                latlist=latlist[ix]
# matlab/aps_weather_model_SAR.m:267
                lonlist=lonlist[ix]
# matlab/aps_weather_model_SAR.m:268
                numy=length(unique(latlist))
# matlab/aps_weather_model_SAR.m:269
                numx=length(unique(lonlist))
# matlab/aps_weather_model_SAR.m:270
                ulatlist=unique(latlist)
# matlab/aps_weather_model_SAR.m:271
                ulonlist=unique(lonlist)
# matlab/aps_weather_model_SAR.m:272
                uxlist=unique(xlist)
# matlab/aps_weather_model_SAR.m:273
                uylist=unique(ylist)
# matlab/aps_weather_model_SAR.m:274
                if fig_test == logical_and(1,d) == logical_and(1,kk) == 1:
                    figure(hfig)
                    hold('on')
                    plot(lonlist,latlist,'r.')
                    xlim(cat(xmin - dot(4,lon_res),xmax + dot(4,lon_res)))
                    ylim(cat(ymin - dot(4,lat_res),ymax + dot(4,lat_res)))
                    str=''
# matlab/aps_weather_model_SAR.m:282
                    while logical_not(strcmpi(str,'y')) and logical_not(strcmpi(str,'n')):

                        fprintf(cat('Do the red nodes extend (just) outside the red InSAR rectangle? \\n'))
                        str=input_('Continue? [y: for yes, n: no] \\n','s')
# matlab/aps_weather_model_SAR.m:285

                    if strcmpi(str,'n'):
                        error('Check your lon lat crop, otherwize extend area of downlaoded weather model data.')
                clear('lon_res','lat_res','ylist','xlist')
                # saving the information for support plotting
                eval(cat(model_type,'.',model_type,'_lonlat =[lonlist latlist];'))
                eval(cat(model_type,'.region =[[xmin xmin xmax xmax xmin]\' [ymin ymax ymax ymin ymin]\'];'))
                deminfo.xmin = copy(xmin)
# matlab/aps_weather_model_SAR.m:297
                deminfo.xmax = copy(xmax)
# matlab/aps_weather_model_SAR.m:298
                deminfo.ymax = copy(ymax)
# matlab/aps_weather_model_SAR.m:299
                deminfo.ymin = copy(ymin)
# matlab/aps_weather_model_SAR.m:300
                deminfo.dem = copy(dem)
# matlab/aps_weather_model_SAR.m:301
                eval(cat(model_type,'.deminfo =deminfo;'))
                clear('deminfo')
                # checking if the file already exist. Yes append otherwiuze create it
                if exist('tca_support.mat','file') == 2:
                    eval(cat('save(\'tca_support.mat\',\'-append\',\'',model_type,'\');'))
                else:
                    eval(cat('save(\'tca_support.mat\',\'',model_type,'\');'))
                if fig_test == logical_and(1,d) == logical_and(1,kk) == 1:
                    if exist(cat('aps_',model_type),'dir') != 7:
                        mkdir(cat('aps_',model_type))
                    print_(hfig,'-dpng',cat('aps_',model_type,filesep,model_type,'_datapoints.png'))
                    print_(hfig,'-depsc',cat('aps_',model_type,filesep,model_type,'_datapoints.eps'))
                eval(cat('clear ',model_type))
                g0=9.80665
# matlab/aps_weather_model_SAR.m:321
                H=Geopot / g0
# matlab/aps_weather_model_SAR.m:323
                g=multiply(9.80616,(1 - multiply(0.002637,cosd(dot(2.0,latgrid))) + multiply(5.9e-06,(cosd(dot(2.0,latgrid))) ** 2)))
# matlab/aps_weather_model_SAR.m:326
                Rmax=6378137
# matlab/aps_weather_model_SAR.m:328
                Rmin=6356752
# matlab/aps_weather_model_SAR.m:329
                Re=sqrt(1.0 / (((cosd(latgrid) ** 2) / Rmax ** 2) + ((sind(latgrid) ** 2) / Rmin ** 2)))
# matlab/aps_weather_model_SAR.m:330
                Z=(multiply(H,Re)) / (multiply(g / g0,Re) - H)
# matlab/aps_weather_model_SAR.m:333
                midx=round(mean(uxlist))
# matlab/aps_weather_model_SAR.m:336
                midy=round(mean(uylist))
# matlab/aps_weather_model_SAR.m:337
                glocal=g[midy,midx,1]
# matlab/aps_weather_model_SAR.m:338
                Rlocal=Re[midy,midx,1]
# matlab/aps_weather_model_SAR.m:339
                cdslices=maxdem / vertres + 1
# matlab/aps_weather_model_SAR.m:341
                cdstack=zeros(numy,numx,cdslices)
# matlab/aps_weather_model_SAR.m:342
                cdstack_dry=zeros(numy,numx,cdslices)
# matlab/aps_weather_model_SAR.m:343
                cdstack_wet=zeros(numy,numx,cdslices)
# matlab/aps_weather_model_SAR.m:344
                XI=(arange(0,zref,zincr)).T
# matlab/aps_weather_model_SAR.m:346
                gh=multiply(glocal,(Rlocal / (Rlocal + XI)) ** 2)
# matlab/aps_weather_model_SAR.m:347
                # Interpolate Temp P and e from 0:20:15000 m
            # then integrate using trapz to estimate delay as function of height
                for i in arange(1,numx).reshape(-1):
                    for j in arange(1,numy).reshape(-1):
                        xn=uxlist[i]
# matlab/aps_weather_model_SAR.m:353
                        yn=uylist[j]
# matlab/aps_weather_model_SAR.m:354
                        X=double(squeeze(Z[yn,xn,:]))
# matlab/aps_weather_model_SAR.m:357
                        Ye=double(squeeze(e[yn,xn,:]))
# matlab/aps_weather_model_SAR.m:358
                        YeI=dot(interp1(X,Ye,XI,'spline'),100)
# matlab/aps_weather_model_SAR.m:359
                        YP=double(squeeze(P[yn,xn,:]))
# matlab/aps_weather_model_SAR.m:361
                        YPI=dot(interp1(X,YP,XI,'spline'),100)
# matlab/aps_weather_model_SAR.m:362
                        YT=double(squeeze(Temp[yn,xn,:]))
# matlab/aps_weather_model_SAR.m:364
                        YTI=interp1(X,YT,XI,'spline')
# matlab/aps_weather_model_SAR.m:365
                        tmp1=(multiply((k2 - (dot(Rd,k1) / Rv)),YeI) / YTI + multiply(k3,YeI) / (YTI ** 2))
# matlab/aps_weather_model_SAR.m:367
                        Lw=dot(multiply((10 ** - 6),- 1),flipud(cumtrapz(flipud(XI),flipud(tmp1))))
# matlab/aps_weather_model_SAR.m:368
                        # tmp2 = k1.*YPI./YTI;
                    #Ld = (10^-6).*-1*flipud(cumtrapz(flipud(XI),flipud(tmp2)));             # This is using P/T expression (Hanssen, 2001)
                        gm=copy(glocal)
# matlab/aps_weather_model_SAR.m:372
                        Ld=multiply((10 ** - 6),(multiply((dot(k1,Rd) / gm),(YPI - YPI[zref / zincr + 1]))))
# matlab/aps_weather_model_SAR.m:373
                        # Interpolate important part (i.e. total delay at elevations
                    # less than maxdem) at high res i.e. vertres, and put in cdstack.
                        cdI=(arange(0,maxdem,vertres)).T
# matlab/aps_weather_model_SAR.m:378
                        LdI=interp1(XI,Ld,cdI,'spline')
# matlab/aps_weather_model_SAR.m:379
                        LwI=interp1(XI,Lw,cdI,'spline')
# matlab/aps_weather_model_SAR.m:380
                        cdstack_dry[j,i,:]=LdI
# matlab/aps_weather_model_SAR.m:383
                        cdstack_wet[j,i,:]=LwI
# matlab/aps_weather_model_SAR.m:384
                        if save_3D_delays == 1:
                            cdI3D=(arange(0,max(XI),100)).T
# matlab/aps_weather_model_SAR.m:387
                            LdI3D=interp1(XI,Ld,cdI3D,'spline')
# matlab/aps_weather_model_SAR.m:388
                            LwI3D=interp1(XI,Lw,cdI3D,'spline')
# matlab/aps_weather_model_SAR.m:389
                            cdstack_dry3D[j,i,:]=LdI3D
# matlab/aps_weather_model_SAR.m:392
                            cdstack_wet3D[j,i,:]=LwI3D
# matlab/aps_weather_model_SAR.m:393
                            clear('LdI3D','LwI3D')
                clear('uxlist','uylist','ulonlist','ulatlist')
                # Interpolate each cdstack layer onto a grid given by the DEM extents
            # in UTM m.
                xsmpres=(xmax - xmin) / nncols
# matlab/aps_weather_model_SAR.m:403
                ysmpres=(ymax - ymin) / nnrows
# matlab/aps_weather_model_SAR.m:404
                xi,yi=meshgrid(arange(xmin + dot(0.5,xsmpres),xmax - dot(0.5,xsmpres),xsmpres),arange(ymin + dot(0.5,ysmpres),ymax - dot(0.5,ysmpres),ysmpres),nargout=2)
# matlab/aps_weather_model_SAR.m:405
                ix_temp=diff(lonlist)
# matlab/aps_weather_model_SAR.m:407
                ix_temp=find(ix_temp != 0)
# matlab/aps_weather_model_SAR.m:408
                ix_temp=ix_temp[1]
# matlab/aps_weather_model_SAR.m:409
                lonlist_matrix=reshape(lonlist,ix_temp,[])
# matlab/aps_weather_model_SAR.m:410
                latlist_matrix=reshape(latlist,ix_temp,[])
# matlab/aps_weather_model_SAR.m:411
                clear('lonlist','latlist')
                # saving the outputs
                if save_3D_delays == 1:
                    if kk == 1:
                        clear('hgt','lon','lat','dry1','dry2','wet1','dem_temp','hgt_topo')
                        hgt=copy(cdI3D)
# matlab/aps_weather_model_SAR.m:418
                        lon=matlabarray(cat(lonlist_matrix))
# matlab/aps_weather_model_SAR.m:419
                        lat=copy(latlist_matrix)
# matlab/aps_weather_model_SAR.m:420
                        dry1=copy(cdstack_dry3D)
# matlab/aps_weather_model_SAR.m:421
                        wet1=copy(cdstack_wet3D)
# matlab/aps_weather_model_SAR.m:422
                        dem_temp=copy(dem)
# matlab/aps_weather_model_SAR.m:428
                        dem_temp[isnan(dem_temp)]=0
# matlab/aps_weather_model_SAR.m:429
                        hgt_topo=griddata(xi,yi,dem_temp,lon,lat,'linear')
# matlab/aps_weather_model_SAR.m:430
                        clear('dem_temp')
                    else:
                        if kk == 2:
                            clear('dry2','wet2')
                            dry2=copy(cdstack_dry3D)
# matlab/aps_weather_model_SAR.m:436
                            wet2=copy(cdstack_wet3D)
# matlab/aps_weather_model_SAR.m:437
                clear('cdstack_interp_dry')
                cdstack_interp_dry=zeros(nnrows,nncols,cdslices)
# matlab/aps_weather_model_SAR.m:442
                for n in arange(1,cdslices).reshape(-1):
                    newslice=interp2(lonlist_matrix,latlist_matrix,cdstack_dry[:,:,n],xi,yi,'linear')
# matlab/aps_weather_model_SAR.m:444
                    cdstack_interp_dry[:,:,n]=flipud(newslice)
# matlab/aps_weather_model_SAR.m:445
                clear('cdstack_interp_wet')
                cdstack_interp_wet=zeros(nnrows,nncols,cdslices)
# matlab/aps_weather_model_SAR.m:449
                for n in arange(1,cdslices).reshape(-1):
                    newslice=interp2(lonlist_matrix,latlist_matrix,cdstack_wet[:,:,n],xi,yi,'linear')
# matlab/aps_weather_model_SAR.m:451
                    cdstack_interp_wet[:,:,n]=flipud(newslice)
# matlab/aps_weather_model_SAR.m:452
                clear('lonlist_matrix','latlist_matrix')
                # keeping the coordinates in the same grid as the data
                xi=flipud(xi)
# matlab/aps_weather_model_SAR.m:456
                yi=flipud(yi)
# matlab/aps_weather_model_SAR.m:457
                clear('wetcorrection','hydrcorrection','rounddem')
                wetcorrection=ones(nnrows,nncols)
# matlab/aps_weather_model_SAR.m:462
                hydrcorrection=ones(nnrows,nncols)
# matlab/aps_weather_model_SAR.m:463
                rounddem=round(dem / vertres)
# matlab/aps_weather_model_SAR.m:464
                rounddem[dem < 0]=0
# matlab/aps_weather_model_SAR.m:465
                rounddem[isnan(dem)]=0
# matlab/aps_weather_model_SAR.m:468
                for i in arange(1,nnrows).reshape(-1):
                    for j in arange(1,nncols).reshape(-1):
                        wetcorrection[i,j]=cdstack_interp_wet[i,j,rounddem[i,j] + 1]
# matlab/aps_weather_model_SAR.m:472
                for i in arange(1,nnrows).reshape(-1):
                    for j in arange(1,nncols).reshape(-1):
                        hydrcorrection[i,j]=cdstack_interp_dry[i,j,rounddem[i,j] + 1]
# matlab/aps_weather_model_SAR.m:478
                if kk == 1:
                    wetcorrection1=copy(wetcorrection)
# matlab/aps_weather_model_SAR.m:483
                    drycorrection1=copy(hydrcorrection)
# matlab/aps_weather_model_SAR.m:484
                if kk == 2:
                    wetcorrection2=copy(wetcorrection)
# matlab/aps_weather_model_SAR.m:487
                    drycorrection2=copy(hydrcorrection)
# matlab/aps_weather_model_SAR.m:488
                clear('wetcorrection','hydrcorrection')
        if sum(no_data) == 0:
            # note that this is a one way Zenith delay and not a slant delay. 
        # Units are in cm
            # saving individual estimates based on the time-stamp
            outfile_wet_before=matlabarray(cat(weather_model_datapath,filesep,date_before[d,:],filesep,date_before[d,:],'_ZWD_before.xyz'))
# matlab/aps_weather_model_SAR.m:504
            outfile_wet_after=matlabarray(cat(weather_model_datapath,filesep,date_before[d,:],filesep,date_before[d,:],'_ZWD_after.xyz'))
# matlab/aps_weather_model_SAR.m:505
            outfile_dry_before=matlabarray(cat(weather_model_datapath,filesep,date_before[d,:],filesep,date_before[d,:],'_ZHD_before.xyz'))
# matlab/aps_weather_model_SAR.m:506
            outfile_dry_after=matlabarray(cat(weather_model_datapath,filesep,date_before[d,:],filesep,date_before[d,:],'_ZHD_after.xyz'))
# matlab/aps_weather_model_SAR.m:507
            fidwet_before=fopen(outfile_wet_before,'w')
# matlab/aps_weather_model_SAR.m:510
            data_write=cat(reshape(xi,[],1),reshape(yi,[],1),reshape(wetcorrection1,[],1)).T
# matlab/aps_weather_model_SAR.m:511
            tally=fwrite(fidwet_before,data_write,'double')
# matlab/aps_weather_model_SAR.m:512
            fclose(fidwet_before)
            clear('data_write','tally')
            fidwet_after=fopen(outfile_wet_after,'w')
# matlab/aps_weather_model_SAR.m:515
            data_write=cat(reshape(xi,[],1),reshape(yi,[],1),reshape(wetcorrection2,[],1)).T
# matlab/aps_weather_model_SAR.m:516
            tally=fwrite(fidwet_after,data_write,'double')
# matlab/aps_weather_model_SAR.m:517
            fclose(fidwet_after)
            clear('data_write','tally')
            fiddry_before=fopen(outfile_dry_before,'w')
# matlab/aps_weather_model_SAR.m:520
            data_write=cat(reshape(xi,[],1),reshape(yi,[],1),reshape(drycorrection1,[],1)).T
# matlab/aps_weather_model_SAR.m:521
            tally=fwrite(fiddry_before,data_write,'double')
# matlab/aps_weather_model_SAR.m:522
            fclose(fiddry_before)
            clear('data_write','tally')
            fiddry_after=fopen(outfile_dry_after,'w')
# matlab/aps_weather_model_SAR.m:525
            data_write=cat(reshape(xi,[],1),reshape(yi,[],1),reshape(drycorrection2,[],1)).T
# matlab/aps_weather_model_SAR.m:526
            tally=fwrite(fiddry_after,data_write,'double')
# matlab/aps_weather_model_SAR.m:527
            fclose(fiddry_after)
            clear('data_write','tally')
            # saving the outputs
            if save_3D_delays == 1:
                wet=dot(wet1,f_before[d]) + dot(wet2,f_after)
# matlab/aps_weather_model_SAR.m:533
                dry=dot(dry1,f_before[d]) + dot(dry2,f_after)
# matlab/aps_weather_model_SAR.m:534
                save(cat(weather_model_datapath,filesep,date_before[d,:],filesep,date_before[d,:],'_3D.mat'),'dry','wet','hgt','lon','lat','hgt_topo')
                clear('wet','dry','hgt','dry1','dry2','wet1','wet2')
            # Output wet correction
            wetcorrection=dot(wetcorrection1,f_before[d]) + dot(wetcorrection2,f_after[d])
# matlab/aps_weather_model_SAR.m:542
            clear('wetcorrection1','wetcorrection2')
            wetcorrection=dot(wetcorrection,100)
# matlab/aps_weather_model_SAR.m:544
            fid=fopen(outfile,'w')
# matlab/aps_weather_model_SAR.m:545
            data_write=cat(reshape(xi,[],1),reshape(yi,[],1),reshape(wetcorrection,[],1)).T
# matlab/aps_weather_model_SAR.m:546
            tally=fwrite(fid,data_write,'double')
# matlab/aps_weather_model_SAR.m:547
            fclose(fid)
            clear('data_write','tally','wetcorrection')
            # Output hydrostatic correction
            hydrcorrection=dot(drycorrection1,f_before[d]) + dot(drycorrection2,f_after[d])
# matlab/aps_weather_model_SAR.m:552
            clear('drycorrection1','drycorrection2')
            hydrcorrection=dot(hydrcorrection,100)
# matlab/aps_weather_model_SAR.m:554
            fid=fopen(hydroutfile,'w')
# matlab/aps_weather_model_SAR.m:555
            data_write=cat(reshape(xi,[],1),reshape(yi,[],1),reshape(hydrcorrection,[],1)).T
# matlab/aps_weather_model_SAR.m:556
            tally=fwrite(fid,data_write,'double')
# matlab/aps_weather_model_SAR.m:557
            fclose(fid)
            clear('data_write','tally','hydrcorrection')
            fprintf(cat(num2str(d),' completed out of ',num2str(n_dates),'\\n'))
        else:
            fprintf(cat(num2str(d),' completed out of ',num2str(n_dates),' (NO DATA)\\n'))
    