# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/aps_powerlaw_watershed.m

    
@function
def aps_powerlaw_watershed(*args,**kwargs):
    varargin = aps_powerlaw_watershed.varargin
    nargin = aps_powerlaw_watershed.nargin

    # [] = aps_powerlaw_watershed()
# Script to compute a watershed of the DEM. This can be used to define
# patches in such a way the patches edges are placed at the ridges.
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
    
    #     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
    
    #     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
    
    #     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    
    # Bekaert David - Leeds University 2014
    
    # modifications
# 07/2014       DB  Save information in the tca support variable
    
    fontsize=15
# Trainmatlab.v.0/aps_powerlaw_watershed.m:30
    resolution=800
# Trainmatlab.v.0/aps_powerlaw_watershed.m:31
    
    # getting the variables from the parms_aps file
    stamps_processed=getparm_aps('stamps_processed')
# Trainmatlab.v.0/aps_powerlaw_watershed.m:35
    # getting the variables from the parms_aps file
    stamps_processed=getparm_aps('stamps_processed')
# Trainmatlab.v.0/aps_powerlaw_watershed.m:38
    ll_matfile=getparm_aps('ll_matfile')
# Trainmatlab.v.0/aps_powerlaw_watershed.m:39
    lonlatfile=load(ll_matfile)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:40
    xlims=matlabarray(cat(min(lonlatfile.lonlat(arange(),1)),max(lonlatfile.lonlat(arange(),1))))
# Trainmatlab.v.0/aps_powerlaw_watershed.m:41
    ylims=matlabarray(cat(min(lonlatfile.lonlat(arange(),2)),max(lonlatfile.lonlat(arange(),2))))
# Trainmatlab.v.0/aps_powerlaw_watershed.m:42
    ix_convexhull=convhull(lonlatfile.lonlat(arange(),1),lonlatfile.lonlat(arange(),2))
# Trainmatlab.v.0/aps_powerlaw_watershed.m:43
    ## Compute and resample DEM
    dem,xmin,xmax,ymin,ymax,smpres,nncols,nnrows=get_DEM
# Trainmatlab.v.0/aps_powerlaw_watershed.m:47
    # smoothing the DEM
    dem_smooth=medfilt2(dem,cat(6,6))
# Trainmatlab.v.0/aps_powerlaw_watershed.m:50
    dem_smooth[dem_smooth == 0]=max(max(dem_smooth))
# Trainmatlab.v.0/aps_powerlaw_watershed.m:51
    h1=copy(figure)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:54
    imagesc(cat(xmin,xmax),cat(ymax,ymin),dem_smooth)
    cc=copy(colorbar)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:56
    view(0,90)
    axis('equal')
    axis('tight')
    colormap(flipud(gray))
    axis('xy')
    xlabel(cc,'[m]','fontsize',fontsize)
    ylabel(cc,'Topography','fontsize',fontsize)
    set(gca,'fontsize',fontsize)
    deminfo.xmin = copy(xmin)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:66
    deminfo.xmax = copy(xmax)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:67
    deminfo.ymax = copy(ymax)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:68
    deminfo.ymin = copy(ymin)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:69
    deminfo.dem_smooth = copy(dem_smooth)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:70
    hold('on')
    plot(lonlatfile.lonlat(ix_convexhull,1),lonlatfile.lonlat(ix_convexhull,2),'g-','linewidth',2)
    counter=1
# Trainmatlab.v.0/aps_powerlaw_watershed.m:77
    continue_flag=1
# Trainmatlab.v.0/aps_powerlaw_watershed.m:78
    while continue_flag:

        if counter == 1:
            fprintf('\\n\\nStart selecting your points, press enter once complete \\n')
            fprintf('You will be asked for a soft or a hard ridge.\\nWindows constrain eachother across soft ridges, while they don\'t over hard ridges \\n')
        mountain_ridge[counter]=ginput
# Trainmatlab.v.0/aps_powerlaw_watershed.m:86
        str=''
# Trainmatlab.v.0/aps_powerlaw_watershed.m:90
        while logical_not(strcmpi(str,'y')) and logical_not(strcmpi(str,'n')):

            str=input_('Is this a hard ridge? (y) yes, or (n) no \\n','s')
# Trainmatlab.v.0/aps_powerlaw_watershed.m:92

        if strcmpi(str,'y'):
            hard_ridge_flag[counter]=1
# Trainmatlab.v.0/aps_powerlaw_watershed.m:95
        else:
            hard_ridge_flag[counter]=0
# Trainmatlab.v.0/aps_powerlaw_watershed.m:97
        if hard_ridge_flag[counter] == 0:
            plot(mountain_ridge[counter](arange(),1),mountain_ridge[counter](arange(),2),'r--','linewidth',2)
        else:
            # plotting the line on the figure
            plot(mountain_ridge[counter](arange(),1),mountain_ridge[counter](arange(),2),'r-','linewidth',2)
        str=''
# Trainmatlab.v.0/aps_powerlaw_watershed.m:108
        while logical_not(strcmpi(str,'n')) and logical_not(strcmpi(str,'q')):

            str=input_('n: for next line clasification, q: to stop  \\n','s')
# Trainmatlab.v.0/aps_powerlaw_watershed.m:110

        if strcmpi(str,'q'):
            continue_flag=0
# Trainmatlab.v.0/aps_powerlaw_watershed.m:113
            InSAR_convexhull=lonlatfile.lonlat(ix_convexhull,arange())
# Trainmatlab.v.0/aps_powerlaw_watershed.m:114
            powerlaw_ridges.mountain_ridge = copy(mountain_ridge)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:115
            powerlaw_ridges.InSAR_convexhull = copy(InSAR_convexhull)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:116
            powerlaw_ridges.deminfo = copy(deminfo)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:117
            powerlaw_ridges.hard_ridge_flag = copy(hard_ridge_flag)
# Trainmatlab.v.0/aps_powerlaw_watershed.m:118
            if exist('tca_support.mat','file') == 2:
                save('tca_support.mat','-append','powerlaw_ridges','InSAR_convexhull')
            else:
                save('tca_support.mat','powerlaw_ridges','InSAR_convexhull')
            print_(h1,'-dpng',cat('aps_p',filesep,'mountain_ridges.png'))
            print_(h1,'-depsc',cat('aps_p',filesep,'mountain_ridges.eps'))
        else:
            counter=counter + 1
# Trainmatlab.v.0/aps_powerlaw_watershed.m:129

    