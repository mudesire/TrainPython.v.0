# Autogenerated with SMOP 
from smop.core import *
# matlab/sounding_powerlaw_sens.m

    
@function
def sounding_powerlaw_sens(hydro=None,wet=None,*args,**kwargs):
    varargin = sounding_powerlaw_sens.varargin
    nargin = sounding_powerlaw_sens.nargin

    # function that computes the power law coefficents and performs a
# sensitivity analysis.
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # By David Bekaert -- University of Leeds 2013
# modifications
# 05/2013   DB:     Compute the power law coefficients for dedicated days.
# 08/2013   DB:     Fix the case when a netdelay cannot be computed.
# 02/2014   DB:     Add non-stamps file support of ifgs-based estimation.
# 03/2014   DB:     Fix the computation of the sensitivity analysis in
#                   absence of soundign for specific SAR dates. 
# 08/2014   DB:     Expand for PS network and SB network for SAR date estimation
# 03/2016   DB:     remove warning on ifgday for non-stamps processing
    
    if nargin < 1:
        hydro=1
# matlab/sounding_powerlaw_sens.m:33
        wet=1
# matlab/sounding_powerlaw_sens.m:34
    
    # getting the data from the parms_aps file
    n_months=getparm_aps('sounding_months')
# matlab/sounding_powerlaw_sens.m:38
    sounding_start_date=getparm_aps('sounding_start_date')
# matlab/sounding_powerlaw_sens.m:39
    sounding_end_date=getparm_aps('sounding_end_date')
# matlab/sounding_powerlaw_sens.m:40
    sounding_dir=getparm_aps('sounding_dir')
# matlab/sounding_powerlaw_sens.m:41
    time_stamp=getparm_aps('sounding_time_stamp')
# matlab/sounding_powerlaw_sens.m:42
    sounding_ifg_dates=getparm_aps('sounding_ifg_dates')
# matlab/sounding_powerlaw_sens.m:43
    time_stamp_str=matlabarray([])
# matlab/sounding_powerlaw_sens.m:44
    for k in arange(1,size(time_stamp,1)).reshape(-1):
        if k > 1:
            time_stamp_str=matlabarray(cat(time_stamp_str,'_',time_stamp[k,:]))
# matlab/sounding_powerlaw_sens.m:47
        else:
            time_stamp_str=matlabarray(cat(time_stamp[k,:]))
# matlab/sounding_powerlaw_sens.m:49
    
    
    # checking if the directory exists
    if exist(cat(sounding_dir,filesep),'dir') != 7:
        error('myApp:argChk',cat('The specified filepath of the sounding data does not exist,...  \\nAbort,... \\n'))
    
    # current directry
    curdir=copy(pwd)
# matlab/sounding_powerlaw_sens.m:58
    # getting the interferogram data information
# loading the data
    stamps_processed=getparm_aps('stamps_processed')
# matlab/sounding_powerlaw_sens.m:62
    if strcmp(stamps_processed,'y'):
        fprintf('Stamps processed structure \\n')
        ll_matfile=getparm_aps('ll_matfile')
# matlab/sounding_powerlaw_sens.m:65
        ps=load(ll_matfile)
# matlab/sounding_powerlaw_sens.m:66
        dates=ps.day
# matlab/sounding_powerlaw_sens.m:67
        lonlat=ps.lonlat
# matlab/sounding_powerlaw_sens.m:68
        # constructing the matrix with master and slave dates
        if strcmp(getparm('small_baseline_flag'),'y'):
            # for SB
            ifgs_ix=ps.ifgday_ix
# matlab/sounding_powerlaw_sens.m:75
        else:
            n_ifg=ps.n_ifg
# matlab/sounding_powerlaw_sens.m:78
            date_slave_ix=cat(arange(1,n_ifg)).T
# matlab/sounding_powerlaw_sens.m:80
            date_master_ix=repmat(ps.master_ix,size(date_slave_ix,1),1)
# matlab/sounding_powerlaw_sens.m:82
            ifgs_ix=matlabarray(cat(date_master_ix,date_slave_ix))
# matlab/sounding_powerlaw_sens.m:84
    else:
        # getting the dates in jullian format
        ifgday_matfile=getparm_aps('ifgday_matfile')
# matlab/sounding_powerlaw_sens.m:88
        ifgs_dates=load(ifgday_matfile)
# matlab/sounding_powerlaw_sens.m:89
        ifgs_dates=ifgs_dates.ifgday
# matlab/sounding_powerlaw_sens.m:90
        dates=reshape(ifgs_dates,[],1)
# matlab/sounding_powerlaw_sens.m:91
        dates=unique(dates)
# matlab/sounding_powerlaw_sens.m:92
        dates=datenum(num2str(dates),'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:93
        dates=sort(dates)
# matlab/sounding_powerlaw_sens.m:94
        # getting the ix position for the master and slave dates with respect
    # to the times
        date_master=datenum(num2str(ifgs_dates[:,1]),'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:98
        date_slave=datenum(num2str(ifgs_dates[:,2]),'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:99
        for k in arange(1,size(date_master,1)).reshape(-1):
            date_master_ix[k,1]=find(date_master[k,1] == dates)
# matlab/sounding_powerlaw_sens.m:102
            date_slave_ix[k,1]=find(date_slave[k,1] == dates)
# matlab/sounding_powerlaw_sens.m:103
        # ix interferograms
        ifgs_ix=matlabarray(cat(date_master_ix,date_slave_ix))
# matlab/sounding_powerlaw_sens.m:107
        clear('date_master_ix','date_slave_ix')
    
    if strcmp(sounding_ifg_dates,'y'):
        # estimate for interferogram dates
        stamps_processed=getparm_aps('stamps_processed')
# matlab/sounding_powerlaw_sens.m:116
        if strcmp(stamps_processed,'y'):
            ps=load(ll_matfile)
# matlab/sounding_powerlaw_sens.m:118
            date_start_vector=datestr(ps.day - 15,'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:119
            date_end_vector=datestr(ps.day + 15,'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:120
        else:
            ifgday_matfile=getparm_aps('ifgday_matfile')
# matlab/sounding_powerlaw_sens.m:124
            ifgs_dates=load(ifgday_matfile)
# matlab/sounding_powerlaw_sens.m:125
            ifgs_dates=ifgs_dates.ifgday
# matlab/sounding_powerlaw_sens.m:126
            dates=reshape(ifgs_dates,[],1)
# matlab/sounding_powerlaw_sens.m:127
            dates=unique(dates)
# matlab/sounding_powerlaw_sens.m:128
            dates=datenum(num2str(dates),'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:129
            dates=sort(dates)
# matlab/sounding_powerlaw_sens.m:130
            date_start_vector=datestr(dates - 15,'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:133
            date_end_vector=datestr(dates + 15,'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:134
        # save name of the output data
        if hydro == 1 and wet == 0:
            save_name=matlabarray(cat('Powerlaw_sensitivity_hydro_SAR_dates_1month_',time_stamp_str,'Hr.mat'))
# matlab/sounding_powerlaw_sens.m:139
        else:
            if hydro == 0 and wet == 1:
                save_name=matlabarray(cat('Powerlaw_sensitivity_wet_SAR_dates_1month_',time_stamp_str,'Hr.mat'))
# matlab/sounding_powerlaw_sens.m:141
            else:
                save_name=matlabarray(cat('Powerlaw_sensitivity_SAR_dates_1month_',time_stamp_str,'Hr.mat'))
# matlab/sounding_powerlaw_sens.m:143
        if exist(cat(sounding_dir,filesep,'Powerlaw'),'dir') != 7:
            mkdir(cat(sounding_dir,filesep,'Powerlaw'))
    else:
        # estimate is on fixed intervals
    # in case no start or end time is given, get it from the data files
        if isempty(sounding_start_date) or isempty(sounding_end_date):
            if exist('sounding.list','file') != 2:
                # making a list of all the sounding files
                dummy,dummy2=system('echo sounding_list > sounding.list',nargout=2)
# matlab/sounding_powerlaw_sens.m:157
                clear('dummy','dummy2')
                for k in arange(1,size(time_stamp,1)).reshape(-1):
                    command_str=matlabarray(cat('ls [0-9]???????_',time_stamp[k,:],'.mat >> sounding.list'))
# matlab/sounding_powerlaw_sens.m:160
                    dummy,dummy2=system(command_str,nargout=2)
# matlab/sounding_powerlaw_sens.m:161
                    clear('dummy','dummy2')
            temp=tdfread('sounding.list')
# matlab/sounding_powerlaw_sens.m:165
            dummy,dummy2=system('rm sounding.list',nargout=2)
# matlab/sounding_powerlaw_sens.m:166
            clear('dummy','dummy2')
            date_list_temp=temp.sounding_list(arange(),cat(arange(1,8)))
# matlab/sounding_powerlaw_sens.m:168
            clear('ix')
            if isempty(start_date):
                sounding_start_date=date_list_temp[1,:]
# matlab/sounding_powerlaw_sens.m:174
            if isempty(end_date):
                sounding_end_date=date_list_temp[end(),:]
# matlab/sounding_powerlaw_sens.m:177
            clear('date_list_temp')
        # putting the variables in the right set-up
        start_year=str2num(sounding_start_date[1:4])
# matlab/sounding_powerlaw_sens.m:183
        end_year=str2num(sounding_end_date[1:4])
# matlab/sounding_powerlaw_sens.m:184
        start_str=sounding_start_date[5:6]
# matlab/sounding_powerlaw_sens.m:185
        end_str=sounding_end_date[5:6]
# matlab/sounding_powerlaw_sens.m:186
        start_month=str2num(start_str)
# matlab/sounding_powerlaw_sens.m:187
        end_month=str2num(end_str)
# matlab/sounding_powerlaw_sens.m:188
        if hydro == 1 and wet == 0:
            save_name=matlabarray(cat('Powerlaw_sensitivity_hydro_',num2str(n_months),'month_',time_stamp_str,'Hr_',num2str(start_year),start_str,'_',num2str(end_year),end_str,'.mat'))
# matlab/sounding_powerlaw_sens.m:192
        else:
            if hydro == 0 and wet == 1:
                save_name=matlabarray(cat('Powerlaw_sensitivity_wet_',num2str(n_months),'month_',time_stamp_str,'Hr_',num2str(start_year),start_str,'_',num2str(end_year),end_str,'.mat'))
# matlab/sounding_powerlaw_sens.m:194
            else:
                save_name=matlabarray(cat('Powerlaw_sensitivity_',num2str(n_months),'month_',time_stamp_str,'Hr_',num2str(start_year),start_str,'_',num2str(end_year),end_str,'.mat'))
# matlab/sounding_powerlaw_sens.m:196
        if exist(cat(sounding_dir,filesep,'Powerlaw'),'dir') != 7:
            mkdir(cat(sounding_dir,filesep,'Powerlaw'))
        if exist(cat(sounding_dir,filesep,'Powerlaw'),'dir') != 7:
            mkdir(cat(sounding_dir,filesep,'Powerlaw'))
        # generating the periods
        month_str=matlabarray(cat(['01'],['02'],['03'],['04'],['05'],['06'],['07'],['08'],['09'],['10'],['11'],['12']))
# matlab/sounding_powerlaw_sens.m:209
        counter=1
# matlab/sounding_powerlaw_sens.m:210
        for k in arange(1,end_year - start_year + 1).reshape(-1):
            if k == logical_and(end_year - start_year + 1,k) > 1:
                for l in arange(1,end_month).reshape(-1):
                    date_start_temp=datenum(cat(num2str(start_year + k - 1),month_str[l,:],'01'),'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:215
                    date_start_month_vector[counter,:]=datestr(date_start_temp,'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:216
                    counter=counter + 1
# matlab/sounding_powerlaw_sens.m:217
            else:
                if k == logical_and(end_year - start_year + 1,k) == 1:
                    for l in arange(start_month,end_month).reshape(-1):
                        date_start_temp=datenum(cat(num2str(start_year + k - 1),month_str[l,:],'01'),'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:221
                        date_start_month_vector[counter,:]=datestr(date_start_temp,'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:222
                        counter=counter + 1
# matlab/sounding_powerlaw_sens.m:223
                else:
                    for l in arange(1,12).reshape(-1):
                        date_start_temp=datenum(cat(num2str(start_year + k - 1),month_str[l,:],'01'),'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:227
                        date_start_month_vector[counter,:]=datestr(date_start_temp,'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:228
                        counter=counter + 1
# matlab/sounding_powerlaw_sens.m:229
        n_months_total=size(date_start_month_vector,1)
# matlab/sounding_powerlaw_sens.m:234
        for k in arange(1,ceil(n_months_total / n_months)).reshape(-1):
            k_lower=dot(n_months,(k - 1)) + 1
# matlab/sounding_powerlaw_sens.m:236
            k_upper=dot(n_months,(k)) + 1
# matlab/sounding_powerlaw_sens.m:237
            if k_upper > n_months_total:
                k_upper=copy(n_months_total)
# matlab/sounding_powerlaw_sens.m:240
            date_start_vector[k,:]=date_start_month_vector[k_lower,:]
# matlab/sounding_powerlaw_sens.m:242
            date_end_vector[k,:]=datestr(datenum(date_start_month_vector[k_upper,:],'yyyymmdd') - 1,'yyyymmdd')
# matlab/sounding_powerlaw_sens.m:243
    
    # Remove those months outside the users request
    if logical_not(isempty(sounding_start_date)):
        ix_drop=find(datenum(date_start_vector,'yyyymmdd') < datenum(sounding_start_date,'yyyymmdd'))
# matlab/sounding_powerlaw_sens.m:250
    else:
        ix_drop=matlabarray([])
# matlab/sounding_powerlaw_sens.m:252
    
    if logical_not(isempty(sounding_end_date)):
        ix_drop=matlabarray(cat([ix_drop],[find(datenum(date_end_vector,'yyyymmdd') > datenum(sounding_end_date,'yyyymmdd'))]))
# matlab/sounding_powerlaw_sens.m:255
    
    ix_drop=unique(ix_drop)
# matlab/sounding_powerlaw_sens.m:257
    date_end_vector[ix_drop,:]=[]
# matlab/sounding_powerlaw_sens.m:258
    date_start_vector[ix_drop,:]=[]
# matlab/sounding_powerlaw_sens.m:259
    # Computing the power law coefficients
    for k in arange(1,size(date_start_vector,1)).reshape(-1):
        fprintf(cat('\\n',num2str(k),'/',num2str(size(date_start_vector,1)),' completed \\n'))
        alpha_all,alpha_hc,h_0_threshold,n_soundings=sounding(date_start_vector[k,:],date_end_vector[k,:],[],hydro,wet,nargout=4)
# matlab/sounding_powerlaw_sens.m:266
        alpha_vector_all[k,1]=alpha_all
# matlab/sounding_powerlaw_sens.m:267
        alpha_vector[k,1]=alpha_hc
# matlab/sounding_powerlaw_sens.m:268
        n_soundings_vector[k,1]=n_soundings
# matlab/sounding_powerlaw_sens.m:269
        h0_vector[k,1]=h_0_threshold
# matlab/sounding_powerlaw_sens.m:270
    
    save(cat(sounding_dir,filesep,'Powerlaw',filesep,save_name),'alpha_vector_all','alpha_vector','n_soundings_vector','h0_vector','date_start_vector','date_end_vector')
    cd(curdir)
    if strcmp(sounding_ifg_dates,'y'):
        # estimate for interferogram dates
        stamps_processed=getparm_aps('stamps_processed')
# matlab/sounding_powerlaw_sens.m:278
        if strcmp(stamps_processed,'y'):
            fprintf('Updating powerlaw parameters with new values. \\n')
            # removing NaN by replacing them with the other SAR date estimates
            ix_alpha_fix=find(isnan(alpha_vector[:,1]))
# matlab/sounding_powerlaw_sens.m:283
            if logical_not(isempty(ix_alpha_fix)):
                if length(ix_alpha_fix) != length(alpha_vector):
                    fprintf(cat(num2str(length(ix_alpha_fix)),' out of ',num2str(length(alpha_vector)),' SAR dates where set to the mean alpha due to lack of sounding data. \\n'))
                    alpha_vector[isnan(alpha_vector)]=nanmean(alpha_vector)
# matlab/sounding_powerlaw_sens.m:287
                    alpha_vector_fix=copy(alpha_vector)
# matlab/sounding_powerlaw_sens.m:288
                    save(cat(sounding_dir,filesep,'Powerlaw',filesep,save_name),'-append','alpha_vector_fix','ix_alpha_fix')
                else:
                    fprintf('None of the SAR dates where estimate using sounding data \\n')
            ix_height_fix=find(isnan(h0_vector[:,1]))
# matlab/sounding_powerlaw_sens.m:297
            if logical_not(isempty(ix_height_fix)):
                if length(ix_height_fix) != length(h0_vector):
                    fprintf(cat(num2str(length(ix_height_fix)),' out of ',num2str(length(alpha_vector)),' SAR dates where set to the mean h0 due to lack of sounding data. \\n'))
                    h0_vector[isnan(h0_vector)]=nanmean(h0_vector)
# matlab/sounding_powerlaw_sens.m:301
                    h0_vector_fix=copy(h0_vector)
# matlab/sounding_powerlaw_sens.m:302
                    save(cat(sounding_dir,filesep,'Powerlaw',filesep,save_name),'-append','h0_vector_fix','ix_height_fix')
                else:
                    fprintf('None of the SAR dates where estimate using sounding data \\n')
            alpha_SAR=matlabarray(cat(alpha_vector[ifgs_ix[:,1]],alpha_vector[ifgs_ix[:,2]]))
# matlab/sounding_powerlaw_sens.m:310
            h0_SAR=matlabarray(cat(h0_vector[ifgs_ix[:,1]],h0_vector[ifgs_ix[:,2]]))
# matlab/sounding_powerlaw_sens.m:311
            h0_InSAR=mean(h0_SAR,2)
# matlab/sounding_powerlaw_sens.m:315
            alpha_InSAR=mean(alpha_SAR,2)
# matlab/sounding_powerlaw_sens.m:316
            setparm_aps('powerlaw_h0',h0_InSAR.T)
            setparm_aps('powerlaw_alpha',alpha_InSAR.T)
    else:
        # computing the mean between two SAR dates
        ix=isnan(h0_vector)
# matlab/sounding_powerlaw_sens.m:324
        powerlaw_h0=mean(h0_vector[logical_not(ix)])
# matlab/sounding_powerlaw_sens.m:325
        powerlaw_alpha=mean(alpha_vector[logical_not(ix)])
# matlab/sounding_powerlaw_sens.m:326
        setparm_aps('powerlaw_h0',powerlaw_h0.T)
        setparm_aps('powerlaw_alpha',powerlaw_alpha.T)
    