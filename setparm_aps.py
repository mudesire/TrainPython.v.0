# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/setparm_aps.m

    
@function
def setparm_aps(parmname=None,value=None,newflag=None,*args,**kwargs):
    varargin = setparm_aps.varargin
    nargin = setparm_aps.nargin

    #SETPARM_APS sets parameters in a saved workspace
# SETPARM_APS(PARMNAME,VALUE,FLAG) 
# Only enough characters of PARMNAME to make it unique need be typed.
# If VALUE is set to nan, the parameter is reset to the default value.   
# FLAG is optional, valid values are:
#       1 = add a new parameter (PARMNAME must be typed in full)
#      -1 = delete parameter from workspace(VALUE ignored)
    
    # Based on script by Andy Hooper (StaMPS)
# Modified for the aps toolbox by David Bekaert - University of Leeds - 2013
# This script allows for non-StaMPS structured processed data.
    
    # modifications:
# 04/2013   DB:     Convert column values to a row when logging the changes
# 04/2013   DB      Allowing the grid resolution to be specified by single
#                   value.
# 02/2015   DB      Fix in case you give only H:MM for UTC_sat
# 11/2015   DB      Include more freedom in specifying UTC_sat
# 02/2016   DB 	    Give better output for the band selection
    
    parmfile='parms_aps.mat'
# Trainmatlab.v.0/setparm_aps.m:22
    localparmfile='localparms_aps.mat'
# Trainmatlab.v.0/setparm_aps.m:23
    parent_flag=0
# Trainmatlab.v.0/setparm_aps.m:25
    
    if exist(cat('.',filesep,parmfile),'file') == 0 and exist(cat('..',filesep,parmfile),'file') == 0:
        parms_default_aps
    
    if exist(cat('.',filesep,parmfile),'file'):
        parms=load(parmfile)
# Trainmatlab.v.0/setparm_aps.m:32
    else:
        if exist(cat('..',filesep,parmfile),'file'):
            parmfile=matlabarray(cat('..',filesep,parmfile))
# Trainmatlab.v.0/setparm_aps.m:34
            parms=load(parmfile)
# Trainmatlab.v.0/setparm_aps.m:35
            parent_flag=1
# Trainmatlab.v.0/setparm_aps.m:36
    
    if exist(localparmfile,'file'):
        localparms=load(localparmfile)
# Trainmatlab.v.0/setparm_aps.m:40
    else:
        localparms=struct('Created',date)
# Trainmatlab.v.0/setparm_aps.m:42
    
    # a flag which changes the band of the powerlaw and updates the data file
# as well
    if nargin > logical_and(2,newflag) == 1:
        if isempty(value):
            logit(cat(parmname,' = []'),'aps.log',parent_flag)
        else:
            if isnumeric(value):
                logit(cat(parmname,' = ',num2str(value)),'aps.log',parent_flag)
            else:
                logit(cat(parmname,' = ',value),'aps.log',parent_flag)
        parms=setfield(parms,parmname,value)
# Trainmatlab.v.0/setparm_aps.m:57
        save(parmfile,'-struct','parms')
    else:
        if nargin > 1:
            if logical_not(isnumeric(parmname)):
                parmnum=strmatch(parmname,fieldnames(parms))
# Trainmatlab.v.0/setparm_aps.m:63
                if length(parmnum) > 1:
                    error(cat('Parameter ',parmname,'* is not unique'))
                else:
                    if isempty(parmnum):
                        error(cat('Parameter ',parmname,'* does not exist'))
            else:
                parmnum=copy(parmname)
# Trainmatlab.v.0/setparm_aps.m:70
            parmnames=fieldnames(parms)
# Trainmatlab.v.0/setparm_aps.m:72
            if size(parmnames,1) < parmnum:
                error(cat('There are only ',num2str(size(parmnames,1)),' fields'))
            parmname=parmnames[parmnum]
# Trainmatlab.v.0/setparm_aps.m:76
            if isnan(value):
                parms=rmfield(parms,parmname)
# Trainmatlab.v.0/setparm_aps.m:79
                save(parmfile,'-struct','parms')
                if isfield(localparms,parmname):
                    localparms=rmfield(localparms,parmname)
# Trainmatlab.v.0/setparm_aps.m:83
                    save(localparmfile,'-struct','localparms')
                parms_default_aps
                value=getparm_aps(parmname)
# Trainmatlab.v.0/setparm_aps.m:88
                if strcmpi(parmname,'powerlaw_kept'):
                    if logical_not(strcmpi(getparm_aps('powerlaw_all_bands'),'y')):
                        fprintf('There are no bands stored, keep the original \\n')
                    else:
                        aps_powerlaw_update_band(value)
                disp(cat(parmname,' reset to default value'))
            else:
                if nargin <= 2 or newflag >= 0:
                    if isempty(value):
                        logit(cat(parmname,' = []'),'aps.log',parent_flag)
                    else:
                        if isnumeric(value):
                            if strcmp(parmname,'powerlaw_xy_res') and size(value,2) == 1:
                                value=matlabarray(cat(value,value))
# Trainmatlab.v.0/setparm_aps.m:109
                            # updating the data variable
                            if strcmpi(parmname,'powerlaw_kept'):
                                if logical_not(strcmpi(getparm_aps('powerlaw_all_bands'),'y')):
                                    fprintf('There are no bands stored, keep the original \\n')
                                else:
                                    aps_powerlaw_update_band(value)
                            if size(value,1) > 1:
                                value_str='['
# Trainmatlab.v.0/setparm_aps.m:121
                                for ll in arange(1,size(value,1)).reshape(-1):
                                    if ll == size(value,1):
                                        value_str=matlabarray(cat(value_str,num2str(value[ll,:])))
# Trainmatlab.v.0/setparm_aps.m:124
                                    else:
                                        value_str=matlabarray(cat(value_str,num2str(value[ll,:]),'; '))
# Trainmatlab.v.0/setparm_aps.m:126
                                value_str=matlabarray(cat(value_str,']'))
# Trainmatlab.v.0/setparm_aps.m:129
                            else:
                                value_str=num2str(value)
# Trainmatlab.v.0/setparm_aps.m:131
                            logit(cat(parmname,' = ',value_str),'aps.log',parent_flag)
                            clear('value_str')
                        else:
                            if size(value,1) > 1:
                                value_str='['
# Trainmatlab.v.0/setparm_aps.m:137
                                for ll in arange(1,size(value,1)).reshape(-1):
                                    if ll == size(value,1):
                                        value_str=matlabarray(cat(value_str,num2str(value[ll,:])))
# Trainmatlab.v.0/setparm_aps.m:140
                                    else:
                                        value_str=matlabarray(cat(value_str,num2str(value[ll,:]),'; '))
# Trainmatlab.v.0/setparm_aps.m:142
                                value_str=matlabarray(cat(value_str,']'))
# Trainmatlab.v.0/setparm_aps.m:145
                            else:
                                if logical_and(strcmpi(parmname,'UTC_sat'),(size(value,2) != logical_and(5,size(value,2)) != 11)):
                                    fprintf('UTC_sat is not given as \'HH:MM\', fixing this...\\n')
                                    # the UTC time does not have HH:MM
                                    ix=find(value == ':')
# Trainmatlab.v.0/setparm_aps.m:150
                                    value_temp='00:00'
# Trainmatlab.v.0/setparm_aps.m:151
                                    value_temp[3 - ix + 1:3 - ix + size(value,2)]=value
# Trainmatlab.v.0/setparm_aps.m:152
                                    value=copy(value_temp)
# Trainmatlab.v.0/setparm_aps.m:153
                                    clear('value_temp')
                                value_str=copy(value)
# Trainmatlab.v.0/setparm_aps.m:156
                            logit(cat(parmname,' = ',value_str),'aps.log',parent_flag)
                            clear('value_str')
                if nargin > 2:
                    if newflag == 2:
                        localparms=setfield(localparms,parmname,value)
# Trainmatlab.v.0/setparm_aps.m:165
                        save(localparmfile,'-struct','localparms')
                        logit('Added to LOCAL parameter file','aps.log')
                    else:
                        if newflag == - 1:
                            parms=rmfield(parms,parmname)
# Trainmatlab.v.0/setparm_aps.m:169
                            save(parmfile,'-struct','parms')
                            logit(cat(parmname,' removed from parameter file'),'aps.log',parent_flag)
                        else:
                            if newflag == - 2:
                                localparms=rmfield(localparms,parmname)
# Trainmatlab.v.0/setparm_aps.m:173
                                if size(fieldnames(localparms),1) > 1:
                                    save(localparmfile,'-struct','localparms')
                                else:
                                    delete(localparmfile)
                                logit(cat(parmname,' removed from LOCAL parameter file'),'aps.log')
                            else:
                                error('Invalid value for NEWFLAG')
                else:
                    if logical_not(isfield(localparms,parmname)):
                        parms=setfield(parms,parmname,value)
# Trainmatlab.v.0/setparm_aps.m:186
                        save(parmfile,'-struct','parms')
                    else:
                        localparms=setfield(localparms,parmname,value)
# Trainmatlab.v.0/setparm_aps.m:189
                        save(localparmfile,'-struct','localparms')
                        disp('Warning: Only LOCAL parameter file updated')
        else:
            if nargin > 0:
                error('Format is: SETPARM(PARMNAME,VALUE,[NEWFLAG])')
            else:
                disp(orderfields(parms))
                if size(fieldnames(localparms),1) > 1:
                    localparms
    