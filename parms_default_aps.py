# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/parms_default_aps.m

    
@function
def parms_default_aps(*args,**kwargs):
    varargin = parms_default_aps.varargin
    nargin = parms_default_aps.nargin

    # lwts_parms_default set parms to default value if not already set
    
    # Based on script by Andy Hooper (StaMPS)
# Modified for the aps toolbox by David Bekaert - University of Leeds - 2013
# This script allows for non-StaMPS structured processed data.
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # modifications:
# 04/2013   DB:     Convert column values to a row when logging the changes
# 10/2013   DB:     Include ERA-I options
# 10/2013   DB:     Fixed flag for StaMPS SB option
# 10/2013   DB:     Fix bug for UTC time retrieval of master.res file
# 11/2013   DB:     Including WRF in parameter list
# 02/2014   DB:     Introduce power_law_ridge_constraint to use ridge
#                   information to constrain the patch definition
# 03/2014   DB:     Change default ERA-I to ECMWF
# 03/2014   DB:     Add auto selection of merid grid for StamPS users
# 05/2014   DB:     Add MODIS support
# 05/2014   DB:     replace variable names to spectrometer as its the same for modis and meris
# 05/2014   DB:     Fix error in default look angle value
# 07/2014   DB:     Add the modis calibration factor
# 08/2014   DB:     Add an extra powerlaw_kept flag
# 08/2014   DB:     Include support for gamma processed data UTC retrieval
# 08/2014   DB:     Add option to use recalibrated MODIS data
# 01/2016   DB:     Include powerlaw plane flag
# 04/2016   DB:     Adding MERRA support
    
    parmfile='parms_aps.mat'
# Trainmatlab.v.0/parms_default_aps.m:45
    parent_flag=0
# Trainmatlab.v.0/parms_default_aps.m:46
    if exist(cat('.',filesep,parmfile),'file'):
        parms=load(parmfile)
# Trainmatlab.v.0/parms_default_aps.m:49
    else:
        if exist(cat('..',filesep,parmfile),'file'):
            parmfile=matlabarray(cat('..',filesep,parmfile))
# Trainmatlab.v.0/parms_default_aps.m:51
            parms=load(parmfile)
# Trainmatlab.v.0/parms_default_aps.m:52
            parent_flag=1
# Trainmatlab.v.0/parms_default_aps.m:53
        else:
            parms=struct('Created',date)
# Trainmatlab.v.0/parms_default_aps.m:55
            parms.small_baseline_flag = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:56
    
    parmfields_before=fieldnames(parms)
# Trainmatlab.v.0/parms_default_aps.m:60
    num_fields=size(parmfields_before,1)
# Trainmatlab.v.0/parms_default_aps.m:61
    warning_message=0
# Trainmatlab.v.0/parms_default_aps.m:63
    ## StaMPS specific
    if exist('psver.mat') != 2:
        stamps_flag=0
# Trainmatlab.v.0/parms_default_aps.m:66
        parms.stamps_processed = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:67
    else:
        load(psver)
        psname=matlabarray(cat('ps',num2str(psver)))
# Trainmatlab.v.0/parms_default_aps.m:70
        ps=load(psname)
# Trainmatlab.v.0/parms_default_aps.m:71
        stamps_flag=1
# Trainmatlab.v.0/parms_default_aps.m:72
        parms.stamps_processed = copy('y')
# Trainmatlab.v.0/parms_default_aps.m:73
    
    ## regarding sounding data
    if logical_not(isfield(parms,'sounding_data')):
        # use sounding data when 1
        parms.sounding_data = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:78
    
    if logical_not(isfield(parms,'sounding_dir')):
        # the sounding data dir
        parms.sounding_dir = copy(cat(pwd,filesep,'sounding_data'))
# Trainmatlab.v.0/parms_default_aps.m:82
    
    if logical_not(isfield(parms,'sounding_time_stamp')):
        # The sounding aquisition times
        parms.sounding_time_stamp = copy(cat(['00'],['12']))
# Trainmatlab.v.0/parms_default_aps.m:86
    
    if logical_not(isfield(parms,'sounding_start_date')):
        # The sounding aquisition times. When [] use the first date.
        parms.sounding_start_date = copy([])
# Trainmatlab.v.0/parms_default_aps.m:90
    
    if logical_not(isfield(parms,'sounding_end_date')):
        # The sounding aquisition times. When [] use last date.
        parms.sounding_end_date = copy([])
# Trainmatlab.v.0/parms_default_aps.m:94
    
    if logical_not(isfield(parms,'sounding_h0')):
        # The maximum height at which the delay is computed in km. When 0 estimate
    # this height from the sounding data.
        parms.sounding_h0 = copy(0)
# Trainmatlab.v.0/parms_default_aps.m:99
    
    if logical_not(isfield(parms,'sounding_error_promp')):
        # sounding errors being outputed but keep on running script by setting
    # to 0.
        parms.sounding_error_promp = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:104
    
    if logical_not(isfield(parms,'sounding_h_alpha_thres')):
        # lower height range which is used to compute the powerlaw decay
    # coefficient, given in km
        parms.sounding_h_alpha_thres = copy(4)
# Trainmatlab.v.0/parms_default_aps.m:109
    
    if logical_not(isfield(parms,'sounding_months')):
        # monthly interval for which the sensitivity is is evaluated
        parms.sounding_months = copy(1)
# Trainmatlab.v.0/parms_default_aps.m:114
    
    if logical_not(isfield(parms,'sounding_ifg_dates')):
        # do sensitivity analysis only for SAR dates
        parms.sounding_ifg_dates = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:119
    
    if logical_not(isfield(parms,'sounding_sensitivity')):
        # perform sensitivity analysis
        parms.sounding_sensitivity = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:124
    
    ## satellite specific
    if logical_not(isfield(parms,'lambda')):
        if stamps_flag == 1:
            # radar wavelength in [m]
            lambda_file='lambda.1.in'
# Trainmatlab.v.0/parms_default_aps.m:131
            if exist(lambda_file,'file') != 2:
                lambda_file=matlabarray(cat('..',filesep,lambda_file))
# Trainmatlab.v.0/parms_default_aps.m:133
                if exist(lambda_file,'file') != 2:
                    lambda_file=matlabarray(cat('..',filesep,lambda_file))
# Trainmatlab.v.0/parms_default_aps.m:135
            if exist(lambda_file,'file') == 2:
                parms.lambda = copy(load(lambda_file))
# Trainmatlab.v.0/parms_default_aps.m:139
            else:
                fprintf('Set lambda manual in parms_aps! \\n')
        else:
            parms.lambda = copy(0.0562)
# Trainmatlab.v.0/parms_default_aps.m:144
            warning_message=1
# Trainmatlab.v.0/parms_default_aps.m:145
    
    if logical_not(isfield(parms,'look_angle')):
        if stamps_flag == 1:
            # mean look angle in [deg]
            look_angle=matlabarray(cat(pwd,filesep,'la',num2str(psver),'.mat'))
# Trainmatlab.v.0/parms_default_aps.m:151
            parms.look_angle = copy(look_angle)
# Trainmatlab.v.0/parms_default_aps.m:152
        else:
            parms.look_angle = copy(dot(21,pi) / 180)
# Trainmatlab.v.0/parms_default_aps.m:154
            warning_message=1
# Trainmatlab.v.0/parms_default_aps.m:155
    
    if logical_not(isfield(parms,'heading')):
        if stamps_flag == 1:
            # mean heading in [deg]
            heading_file='heading.1.in'
# Trainmatlab.v.0/parms_default_aps.m:161
            if exist(heading_file,'file') != 2:
                heading_file=matlabarray(cat('..',filesep,heading_file))
# Trainmatlab.v.0/parms_default_aps.m:163
                if exist(heading_file,'file') != 2:
                    heading_file=matlabarray(cat('..',filesep,heading_file))
# Trainmatlab.v.0/parms_default_aps.m:165
            if exist(heading_file,'file') == 2:
                parms.heading = copy(load(heading_file))
# Trainmatlab.v.0/parms_default_aps.m:169
            else:
                fprintf('Set heading manual in parms_aps! \\n')
        else:
            parms.heading = copy([])
# Trainmatlab.v.0/parms_default_aps.m:174
            warning_message=1
# Trainmatlab.v.0/parms_default_aps.m:175
    
    if logical_not(isfield(parms,'UTC_sat')):
        if stamps_flag == 1:
            # Satellite heading as a string in 'HH:MM'
            if strcmpi(getparm('insar_processor'),'gamma'):
                load(ps2)
                command_str=matlabarray(cat('ls ',datestr(master_day,'yyyymmdd'),'*',filesep,datestr(master_day,'yyyymmdd'),'*slc.par > temp.master.res'))
# Trainmatlab.v.0/parms_default_aps.m:183
                a,b=system(command_str,nargout=2)
# Trainmatlab.v.0/parms_default_aps.m:184
                fid=fopen('temp.master.res')
# Trainmatlab.v.0/parms_default_aps.m:185
                if fid > 0:
                    # getting only one master file back
                    master_files=textscan(fid,'%s')
# Trainmatlab.v.0/parms_default_aps.m:189
                    master_file=master_files[1](1)
# Trainmatlab.v.0/parms_default_aps.m:190
                    command_str=matlabarray(cat('echo `grep center\\_time\\: ',char(master_file),'` > temp.utc'))
# Trainmatlab.v.0/parms_default_aps.m:193
                    a,b=system(command_str,nargout=2)
# Trainmatlab.v.0/parms_default_aps.m:195
                    if exist('temp.utc') != 2:
                        warning_message=1
# Trainmatlab.v.0/parms_default_aps.m:198
                        UTC_sat=matlabarray([])
# Trainmatlab.v.0/parms_default_aps.m:199
                    else:
                        filetext=strtrim(fileread('temp.utc'))
# Trainmatlab.v.0/parms_default_aps.m:201
                        ix=find(filetext == ':')
# Trainmatlab.v.0/parms_default_aps.m:202
                        a,b=system('rm temp.utc',nargout=2)
# Trainmatlab.v.0/parms_default_aps.m:203
                        UTC_sat=str2num(filetext[ix[1] + 1:end() - 1])
# Trainmatlab.v.0/parms_default_aps.m:204
                        UTC_hr=floor(UTC_sat / 60 / 60)
# Trainmatlab.v.0/parms_default_aps.m:205
                        UTC_min=floor((UTC_sat - dot(UTC_hr,60)) / 60)
# Trainmatlab.v.0/parms_default_aps.m:206
                        UTC_hr=num2str(UTC_hr)
# Trainmatlab.v.0/parms_default_aps.m:207
                        UTC_min=num2str(UTC_min)
# Trainmatlab.v.0/parms_default_aps.m:208
                        if length(UTC_min) == 1:
                            UTC_min=matlabarray(cat('0',UTC_min))
# Trainmatlab.v.0/parms_default_aps.m:210
                        if length(UTC_hr) == 1:
                            UTC_hr=matlabarray(cat('0',UTC_hr))
# Trainmatlab.v.0/parms_default_aps.m:213
                        UTC_sat=matlabarray(cat(UTC_hr,':',UTC_min))
# Trainmatlab.v.0/parms_default_aps.m:215
                    clear('a')
                    clear('b')
                fclose(fid)
            else:
                if exist('master.res') != 2:
                    if exist('../master.res') == 2:
                        command_str='echo `grep First\\_pixel\\_azimuth\\_time\\ \\(UTC\\)\\: ../master.res` > temp.utc'
# Trainmatlab.v.0/parms_default_aps.m:223
                        a,b=system(command_str,nargout=2)
# Trainmatlab.v.0/parms_default_aps.m:224
                else:
                    command_str='echo `grep First\\_pixel\\_azimuth\\_time\\ \\(UTC\\)\\: master.res` > temp.utc'
# Trainmatlab.v.0/parms_default_aps.m:227
                    a,b=system(command_str,nargout=2)
# Trainmatlab.v.0/parms_default_aps.m:228
                if exist('temp.utc') != 2:
                    warning_message=1
# Trainmatlab.v.0/parms_default_aps.m:231
                    UTC_sat=matlabarray([])
# Trainmatlab.v.0/parms_default_aps.m:232
                else:
                    filetext=fileread('temp.utc')
# Trainmatlab.v.0/parms_default_aps.m:234
                    ix=find(filetext == ':')
# Trainmatlab.v.0/parms_default_aps.m:235
                    a,b=system('rm temp.utc',nargout=2)
# Trainmatlab.v.0/parms_default_aps.m:236
                    UTC_sat=filetext[ix[2] - 2:ix[3] - 1]
# Trainmatlab.v.0/parms_default_aps.m:237
                    clear('a')
                    clear('b')
        else:
            warning_message=1
# Trainmatlab.v.0/parms_default_aps.m:242
            UTC_sat=matlabarray([])
# Trainmatlab.v.0/parms_default_aps.m:243
        parms.UTC_sat = copy(UTC_sat)
# Trainmatlab.v.0/parms_default_aps.m:245
    
    ## regarding the aps estimation method
    if logical_not(isfield(parms,'non_defo_flag')):
        parms.non_defo_flag = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:250
    
    ## region specific
    if logical_not(isfield(parms,'region_res')):
        # dem_resolution in degrees
        parms.region_res = copy(0.008333)
# Trainmatlab.v.0/parms_default_aps.m:256
    
    if logical_not(isfield(parms,'region_lon_range')):
        # dem_resolution in degrees
        if stamps_flag == 1:
            temp=load(cat(pwd,filesep,'ps',num2str(psver),'.mat'))
# Trainmatlab.v.0/parms_default_aps.m:262
            lonlat_temp=temp.lonlat
# Trainmatlab.v.0/parms_default_aps.m:263
            clear('temp')
            if logical_not(isempty(lonlat_temp)):
                parms.region_lon_range = copy(cat(floor(min(lonlat_temp[:,1])) - dot(5,parms.region_res),ceil(max(lonlat_temp[:,1])) + dot(5,parms.region_res)))
# Trainmatlab.v.0/parms_default_aps.m:266
                clear('lonlat_temp')
            else:
                parms.region_lon_range = copy([])
# Trainmatlab.v.0/parms_default_aps.m:269
        else:
            parms.region_lon_range = copy([])
# Trainmatlab.v.0/parms_default_aps.m:272
    
    if logical_not(isfield(parms,'region_lat_range')):
        # dem_resolution in degrees
        if stamps_flag == 1:
            temp=load(cat(pwd,filesep,'ps',num2str(psver),'.mat'))
# Trainmatlab.v.0/parms_default_aps.m:278
            lonlat_temp=temp.lonlat
# Trainmatlab.v.0/parms_default_aps.m:279
            clear('temp')
            if logical_not(isempty(lonlat_temp)):
                parms.region_lat_range = copy(cat(floor(min(lonlat_temp[:,2])) - dot(5,parms.region_res),ceil(max(lonlat_temp[:,2])) + dot(5,parms.region_res)))
# Trainmatlab.v.0/parms_default_aps.m:282
                clear('lonlat_temp')
            else:
                parms.region_lat_range = copy([])
# Trainmatlab.v.0/parms_default_aps.m:285
        else:
            parms.region_lat_range = copy([])
# Trainmatlab.v.0/parms_default_aps.m:288
    
    if logical_not(isfield(parms,'demfile')):
        # dem_resolution in degrees
        parms.demfile = copy(cat(pwd,filesep,'dummy.dem'))
# Trainmatlab.v.0/parms_default_aps.m:295
    
    ## regarding spectrometer correction:
    if logical_not(isfield(parms,'spectrometer_scaleheight')):
        # Scale height in m.
        parms.spectrometer_scaleheight = copy(8340)
# Trainmatlab.v.0/parms_default_aps.m:300
    
    if logical_not(isfield(parms,'spectrometer_PIconversion')):
        # PI conversion factor
        parms.spectrometer_PIconversion = copy(6.2)
# Trainmatlab.v.0/parms_default_aps.m:304
    
    ## regarding the meris correction
    
    if logical_not(isfield(parms,'dem_null')):
        # dem_null values
        parms.dem_null = copy(- 32768)
# Trainmatlab.v.0/parms_default_aps.m:311
    
    if logical_not(isfield(parms,'meris_perc_coverage')):
        # dem_resolution in degrees
        parms.meris_perc_coverage = copy(80)
# Trainmatlab.v.0/parms_default_aps.m:317
    
    if logical_not(isfield(parms,'meris_datapath')):
        # meris data path
        parms.meris_datapath = copy([])
# Trainmatlab.v.0/parms_default_aps.m:321
    
    ## regarding MODIS
    if logical_not(isfield(parms,'modis_datapath')):
        # meris data path
        parms.modis_datapath = copy([])
# Trainmatlab.v.0/parms_default_aps.m:328
    
    # modis calibration factor from:
# Li, Z., Fielding, E. J., Cross, P., & Preusker, R. (2009). 
# Advanced InSAR atmospheric correction: MERIS/MODIS combination and 
# stacked water vapour models. International Journal of Remote Sensing, 30(13), 
# 3343-3363. doi: 10.1080/01431160802562172
    if logical_not(isfield(parms,'modis_calibration')):
        # meris data path
        parms.modis_calibration = copy(0.95)
# Trainmatlab.v.0/parms_default_aps.m:337
    
    if logical_not(isfield(parms,'modis_recalibrated')):
        # meris data path
        parms.modis_recalibrated = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:341
    
    ## regarding ERA-I
    if logical_not(isfield(parms,'era_datapath')):
        # ERA-I data path
        parms.era_datapath = copy([])
# Trainmatlab.v.0/parms_default_aps.m:348
    
    if logical_not(isfield(parms,'era_data_type')):
        # ERA-I data website (BADC or ECMWF)
        parms.era_data_type = copy('ECMWF')
# Trainmatlab.v.0/parms_default_aps.m:353
    
    ## regarding MERRA
    if logical_not(isfield(parms,'merra_datapath')):
        # MERRA data path
        parms.merra_datapath = copy([])
# Trainmatlab.v.0/parms_default_aps.m:359
    
    if logical_not(isfield(parms,'era_data_type')):
        # ERA-I data website (BADC or ECMWF)
        parms.era_data_type = copy('ECMWF')
# Trainmatlab.v.0/parms_default_aps.m:364
    
    ## regarding WRF
    if logical_not(isfield(parms,'wrf_datapath')):
        # WRF data path
        parms.wrf_datapath = copy([])
# Trainmatlab.v.0/parms_default_aps.m:371
    
    ## regarding the powerlaw correction
    if logical_not(isfield(parms,'powerlaw_DEM_corr')):
        # Powerlay decay coefficient.
        parms.powerlaw_DEM_corr = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:378
    
    if logical_not(isfield(parms,'powerlaw_h0')):
        # absolute height in km at which net-delay has reduced to zero. Default
    # this is 15m.
        parms.powerlaw_h0 = copy(10)
# Trainmatlab.v.0/parms_default_aps.m:384
    
    if logical_not(isfield(parms,'powerlaw_n_patches')):
        parms.powerlaw_n_patches = copy(50)
# Trainmatlab.v.0/parms_default_aps.m:387
    
    if logical_not(isfield(parms,'powerlaw_alpha')):
        # Powerlay decay coefficient.
        parms.powerlaw_alpha = copy(1.6)
# Trainmatlab.v.0/parms_default_aps.m:391
    
    if logical_not(isfield(parms,'powerlaw_xy_res')):
        # Grid resolution in m for the local grid.
        parms.powerlaw_xy_res = copy(cat(30,30))
# Trainmatlab.v.0/parms_default_aps.m:396
    
    if logical_not(isfield(parms,'powerlaw_patch_overlap')):
        # percentage of the overlapping patches.
        parms.powerlaw_patch_overlap = copy(50)
# Trainmatlab.v.0/parms_default_aps.m:400
    
    if logical_not(isfield(parms,'powerlaw_all_bands')):
        # which band to use
        parms.powerlaw_all_bands = copy('y')
# Trainmatlab.v.0/parms_default_aps.m:404
    
    if logical_not(isfield(parms,'powerlaw_spatial_bands')):
        # spatial bands filters.
        spatial_bands=matlabarray(cat(2000,4000,4000,8000,8000,16000,16000,32000,32000,64000,64000,128000))
# Trainmatlab.v.0/parms_default_aps.m:408
        parms.powerlaw_spatial_bands = copy(spatial_bands)
# Trainmatlab.v.0/parms_default_aps.m:414
    
    if logical_not(isfield(parms,'powerlaw_ridge_constraint')):
        parms.powerlaw_ridge_constraint = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:418
    
    if logical_not(isfield(parms,'powerlaw_kept')):
        parms.powerlaw_kept = copy(0)
# Trainmatlab.v.0/parms_default_aps.m:422
    
    if logical_not(isfield(parms,'powerlaw_plane_mode')):
        parms.powerlaw_plane_mode = copy('y')
# Trainmatlab.v.0/parms_default_aps.m:426
    
    ## ifg specific
    if logical_not(isfield(parms,'crop_flag')):
        parms.crop_flag = copy('n')
# Trainmatlab.v.0/parms_default_aps.m:431
    
    # path to themat file containing the interferogram dates
    if logical_not(isfield(parms,'ifgday_matfile')):
        if stamps_flag == 1:
            parms.ifgday_matfile = copy(cat(pwd,filesep,'ps',num2str(psver),'.mat'))
# Trainmatlab.v.0/parms_default_aps.m:438
        else:
            parms.ifgday_matfile = copy([])
# Trainmatlab.v.0/parms_default_aps.m:440
            warning_message=1
# Trainmatlab.v.0/parms_default_aps.m:441
    
    if logical_not(isfield(parms,'save_folder_name')):
        # save folder of the results
        parms.save_folder_name = copy('aps_estimation')
# Trainmatlab.v.0/parms_default_aps.m:449
    
    if logical_not(isfield(parms,'drop_ifg_index')):
        if stamps_flag == 1:
            # list of interferograms to be dropped out of the processing
            parms.drop_ifg_index = copy(getparm('drop_ifg_index'))
# Trainmatlab.v.0/parms_default_aps.m:455
        else:
            parms.drop_ifg_index = copy([])
# Trainmatlab.v.0/parms_default_aps.m:457
    
    if logical_not(isfield(parms,'phuw_matfile')):
        if stamps_flag == 1:
            # list of interferograms to be dropped out of the processing
            small_baseline_flag=getparm('small_baseline_flag')
# Trainmatlab.v.0/parms_default_aps.m:464
            parms.small_baseline_flag = copy(small_baseline_flag)
# Trainmatlab.v.0/parms_default_aps.m:465
            load(psver)
            if strcmp(small_baseline_flag,'y'):
                # this is small baselines
                parms.phuw_matfile = copy(cat(pwd,filesep,'phuw_sb',num2str(psver),'.mat'))
# Trainmatlab.v.0/parms_default_aps.m:469
            else:
                # this is single master approach
                parms.phuw_matfile = copy(cat(pwd,filesep,'phuw',num2str(psver),'.mat'))
# Trainmatlab.v.0/parms_default_aps.m:472
        else:
            parms.phuw_matfile = copy(cat(pwd,filesep,'phuw.mat'))
# Trainmatlab.v.0/parms_default_aps.m:475
            warning_message=1
# Trainmatlab.v.0/parms_default_aps.m:476
    
    if logical_not(isfield(parms,'hgt_matfile')):
        if stamps_flag == 1:
            load(psver)
            # list of interferograms to be dropped out of the processing
            parms.hgt_matfile = copy(cat(pwd,filesep,'hgt',num2str(psver),'.mat'))
# Trainmatlab.v.0/parms_default_aps.m:483
        else:
            parms.hgt_matfile = copy(cat(pwd,filesep,'hgt.mat'))
# Trainmatlab.v.0/parms_default_aps.m:485
    
    if logical_not(isfield(parms,'ll_matfile')):
        if stamps_flag == 1:
            # list of interferograms to be dropped out of the processing
            parms.ll_matfile = copy(cat(pwd,filesep,'ps',num2str(psver),'.mat'))
# Trainmatlab.v.0/parms_default_aps.m:491
        else:
            parms.ll_matfile = copy(cat(pwd,filesep,'ll.mat'))
# Trainmatlab.v.0/parms_default_aps.m:493
            warning_message=1
# Trainmatlab.v.0/parms_default_aps.m:494
    
    if logical_not(isfield(parms,'bperp_matfile')):
        if stamps_flag == 1:
            # list of interferograms to be dropped out of the processing
            parms.bperp_matfile = copy(cat(pwd,filesep,'ps',num2str(psver),'.mat'))
# Trainmatlab.v.0/parms_default_aps.m:500
        else:
            parms.bperp_matfile = copy(cat(pwd,filesep,'bperp.mat'))
# Trainmatlab.v.0/parms_default_aps.m:502
            warning_message=1
# Trainmatlab.v.0/parms_default_aps.m:503
    
    ##
    parmfields=fieldnames(parms)
# Trainmatlab.v.0/parms_default_aps.m:509
    if size(parmfields,1) != num_fields:
        try:
            save(parmfile,'-struct','parms')
            for i in arange(1,size(parmfields,1)).reshape(-1):
                if isempty(strmatch(parmfields[i],parmfields_before)):
                    parmname=parmfields[i]
# Trainmatlab.v.0/parms_default_aps.m:515
                    value=getfield(parms,parmname)
# Trainmatlab.v.0/parms_default_aps.m:516
                    if isempty(value):
                        value='[]'
# Trainmatlab.v.0/parms_default_aps.m:518
                    if isnumeric(value):
                        if size(value,1) > 1:
                            value_str='['
# Trainmatlab.v.0/parms_default_aps.m:522
                            for ll in arange(1,size(value,1)).reshape(-1):
                                if ll == size(value,1):
                                    value_str=matlabarray(cat(value_str,num2str(value[ll,:])))
# Trainmatlab.v.0/parms_default_aps.m:525
                                else:
                                    value_str=matlabarray(cat(value_str,num2str(value[ll,:]),'; '))
# Trainmatlab.v.0/parms_default_aps.m:527
                            value_str=matlabarray(cat(value_str,']'))
# Trainmatlab.v.0/parms_default_aps.m:530
                        else:
                            value_str=num2str(value)
# Trainmatlab.v.0/parms_default_aps.m:532
                        logit(cat(parmname,' = ',value_str),'aps.log',parent_flag)
                        clear('value_str')
                    else:
                        if size(value,1) > 1:
                            value_str='['
# Trainmatlab.v.0/parms_default_aps.m:538
                            for ll in arange(1,size(value,1)).reshape(-1):
                                if ll == size(value,1):
                                    value_str=matlabarray(cat(value_str,num2str(value[ll,:])))
# Trainmatlab.v.0/parms_default_aps.m:541
                                else:
                                    value_str=matlabarray(cat(value_str,num2str(value[ll,:]),'; '))
# Trainmatlab.v.0/parms_default_aps.m:543
                            value_str=matlabarray(cat(value_str,']'))
# Trainmatlab.v.0/parms_default_aps.m:546
                        else:
                            value_str=copy(value)
# Trainmatlab.v.0/parms_default_aps.m:548
                        logit(cat(parmname,' = ',value_str),'aps.log',parent_flag)
                        clear('value_str')
        finally:
            pass
    
    if stamps_flag == 0 and warning_message == 1:
        fprintf(cat('\\n ** Please check as default values were assumed for: \\n lambda, heading, phuw_matfile, bperp_matfile, hgt_matfile, ll_matfile, demfile, region_lat_range, region_lon_range, spectrometer_scaleheight, spectrometer_PIconversion and dem_null \\n\\n\\n'))
    
    