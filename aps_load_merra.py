# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/aps_load_merra.m

    
@function
def aps_load_merra(file=None,merra_model=None,coeff=None,*args,**kwargs):
    varargin = aps_load_merra.varargin
    nargin = aps_load_merra.nargin

    # loading merra data and output the variables for TRAIN
    
    #     Copyright (C) 2016  Bekaert David
#     davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # modifications
# DB    10/04/2016      Base this code on aps_load_era.m modular approach  
# DB    01/05/2016      Include MERRA2 support
    
    # debug figure to test and validate dataloading.
    debug_fig=0
# Trainmatlab.v.0/aps_load_merra.m:27
    # missing values in the hdf files of MERRA
    missing_value=999999986991104
# Trainmatlab.v.0/aps_load_merra.m:30
    # specify the coeficients in case they are not given
    if nargin < 3:
        coeff.Rv = copy(461.495)
# Trainmatlab.v.0/aps_load_merra.m:34
        coeff.Rd = copy(287.05)
# Trainmatlab.v.0/aps_load_merra.m:35
    
    if logical_not(isfield(coeff,'Rd')) or logical_not(isfield(coeff,'Rv')):
        error('Coefficients Rd and Rv are not spcified')
    
    if strcmpi(merra_model,'merra'):
        hdf_file=hdfinfo(file)
# Trainmatlab.v.0/aps_load_merra.m:43
        Temp=hdfread(file,'/t')
# Trainmatlab.v.0/aps_load_merra.m:44
        qv=hdfread(file,'/qv')
# Trainmatlab.v.0/aps_load_merra.m:45
        H=hdfread(file,'/h')
# Trainmatlab.v.0/aps_load_merra.m:46
        # important this is needed to be consitent with the other weather modules
        g0=9.80665
# Trainmatlab.v.0/aps_load_merra.m:49
        Geopot=multiply(H,g0)
# Trainmatlab.v.0/aps_load_merra.m:50
        Psurface=hdfread(file,'/ps')
# Trainmatlab.v.0/aps_load_merra.m:51
        Plevs=hdfread(file,'/levels').T
# Trainmatlab.v.0/aps_load_merra.m:52
        lons=hdfread(file,'/longitude').T
# Trainmatlab.v.0/aps_load_merra.m:53
        lats=hdfread(file,'/latitude').T
# Trainmatlab.v.0/aps_load_merra.m:54
    else:
        if strcmpi(merra_model,'merra2'):
            # open the netcdf
            ncid=netcdf.open(file,'NC_NOWRITE')
# Trainmatlab.v.0/aps_load_merra.m:57
            numdims,numvars,numglobalatts,unlimdimid=netcdf.inq(ncid,nargout=4)
# Trainmatlab.v.0/aps_load_merra.m:60
            for i in arange(0,numvars - 1).reshape(-1):
                varname,xtype,dimids,numatts=netcdf.inqVar(ncid,i,nargout=4)
# Trainmatlab.v.0/aps_load_merra.m:65
                flag=0
# Trainmatlab.v.0/aps_load_merra.m:66
                for j in arange(0,numatts - 1).reshape(-1):
                    attname1=netcdf.inqAttName(ncid,i,j)
# Trainmatlab.v.0/aps_load_merra.m:68
                    attname2=netcdf.getAtt(ncid,i,attname1)
# Trainmatlab.v.0/aps_load_merra.m:69
                    if strcmp('add_offset',attname1):
                        offset=copy(attname2)
# Trainmatlab.v.0/aps_load_merra.m:72
                    if strcmp('scale_factor',attname1):
                        scale=copy(attname2)
# Trainmatlab.v.0/aps_load_merra.m:76
                        flag=1
# Trainmatlab.v.0/aps_load_merra.m:77
                if flag:
                    eval(cat(varname,'= double(netcdf.getVar(ncid,i))*scale + offset;'))
                else:
                    eval(cat(varname,'= double(netcdf.getVar(ncid,i));'))
                clear('varname','xtype','dimids','numatts','scale','offset')
            # close nedtcdf
            netcdf.close(ncid)
            # definition of QV
            qv=copy(QV)
# Trainmatlab.v.0/aps_load_merra.m:92
            # Convert Geopotential Height to geopotential
    # important this is needed to be consitent with the other weather modules
            g0=9.80665
# Trainmatlab.v.0/aps_load_merra.m:97
            Geopot=multiply(H,g0)
# Trainmatlab.v.0/aps_load_merra.m:98
            lons=copy(lon)
# Trainmatlab.v.0/aps_load_merra.m:101
            lats=copy(lat)
# Trainmatlab.v.0/aps_load_merra.m:102
            clear('lon','lat')
            # define temperature
            Temp=copy(T)
# Trainmatlab.v.0/aps_load_merra.m:105
            clear('T')
            # define pressure
            Plevs=copy(lev)
# Trainmatlab.v.0/aps_load_merra.m:108
            clear('lev')
            # this is the time-stamps
            time / 60
    
    ##
# update the no data values with NaN's
    Temp[Temp == missing_value]=NaN
# Trainmatlab.v.0/aps_load_merra.m:116
    qv[qv == missing_value]=NaN
# Trainmatlab.v.0/aps_load_merra.m:117
    Geopot[Geopot == missing_value]=NaN
# Trainmatlab.v.0/aps_load_merra.m:118
    # number of lon lat grid nodes
    n_latitude_points=size(lats,1)
# Trainmatlab.v.0/aps_load_merra.m:122
    n_longitude_points=size(lons,1)
# Trainmatlab.v.0/aps_load_merra.m:123
    # generate the pressure levels
    Pressure=repmat(Plevs,cat(1,n_latitude_points,n_longitude_points))
# Trainmatlab.v.0/aps_load_merra.m:126
    Pressure=permute(Pressure,cat(2,3,1))
# Trainmatlab.v.0/aps_load_merra.m:127
    # change the order of variables such its consistent with the pressure levels
    if strcmpi(merra_model,'merra2'):
        Temp=permute(Temp,cat(2,1,3))
# Trainmatlab.v.0/aps_load_merra.m:132
        qv=permute(qv,cat(2,1,3))
# Trainmatlab.v.0/aps_load_merra.m:133
        Geopot=permute(Geopot,cat(2,1,3))
# Trainmatlab.v.0/aps_load_merra.m:134
    else:
        if strcmpi(merra_model,'merra'):
            Temp=permute(Temp,cat(2,3,1))
# Trainmatlab.v.0/aps_load_merra.m:137
            qv=permute(qv,cat(2,3,1))
# Trainmatlab.v.0/aps_load_merra.m:138
            Geopot=permute(Geopot,cat(2,3,1))
# Trainmatlab.v.0/aps_load_merra.m:139
    
    # computation of the saturated water vapour e
# use mixing ratio r = E*e/(p-e), where E = Rd/Rv
# and specific humidity qv = r/(1+r)
    E=coeff.Rd / coeff.Rv
# Trainmatlab.v.0/aps_load_merra.m:146
    WVapour=multiply(qv,Pressure) / (multiply(E,(1 - qv)) + qv)
# Trainmatlab.v.0/aps_load_merra.m:147
    clear('qv')
    # Get list of points to look at in analysis
    xx,yy=meshgrid(arange(1,n_longitude_points),arange(1,n_latitude_points),nargout=2)
# Trainmatlab.v.0/aps_load_merra.m:151
    # generate the lon lat grid
    latgrid=repmat(lats,cat(1,length(Plevs),n_longitude_points))
# Trainmatlab.v.0/aps_load_merra.m:154
    latgrid=permute(latgrid,cat(1,3,2))
# Trainmatlab.v.0/aps_load_merra.m:155
    longrid=repmat(lons,cat(1,length(Plevs),n_latitude_points))
# Trainmatlab.v.0/aps_load_merra.m:156
    longrid=permute(longrid,cat(3,1,2))
# Trainmatlab.v.0/aps_load_merra.m:157
    # inform about the organisation of the longitudes
    if sum(lons > 180) > 1:
        lon0360_flag='y'
# Trainmatlab.v.0/aps_load_merra.m:162
    else:
        lon0360_flag='n'
# Trainmatlab.v.0/aps_load_merra.m:164
    
    # validation plots
    if debug_fig == 1:
        figure('position',cat(3,628,1402,586))
        subplot(2,5,1)
        imagesc(Temp[:,:,end()])
        colorbar
        axis('xy')
        axis('equal')
        axis('tight')
        title('temp upper atmo')
        subplot(2,5,2)
        imagesc(Temp[:,:,1])
        colorbar
        axis('xy')
        axis('equal')
        axis('tight')
        title('temp lower atmo')
        subplot(2,5,3)
        imagesc(Pressure[:,:,end()])
        colorbar
        axis('xy')
        axis('equal')
        axis('tight')
        title('pressure upper atmo')
        subplot(2,5,4)
        imagesc(Pressure[:,:,1])
        colorbar
        axis('xy')
        axis('equal')
        axis('tight')
        title('pressure lower atmo')
        subplot(2,5,6)
        imagesc(WVapour[:,:,end()])
        colorbar
        axis('xy')
        axis('equal')
        axis('tight')
        title('water vapour upper atmo')
        subplot(2,5,7)
        imagesc(WVapour[:,:,1])
        colorbar
        axis('xy')
        axis('equal')
        axis('tight')
        title('water vapour lower atmo')
        subplot(2,5,8)
        imagesc(Geopot[:,:,end()])
        colorbar
        axis('xy')
        axis('equal')
        axis('tight')
        title('geopotential upper atmo')
        subplot(2,5,9)
        imagesc(Geopot[:,:,1])
        colorbar
        axis('xy')
        axis('equal')
        axis('tight')
        title('geopotential lower atmo')
        subplot(2,5,5)
        imagesc(latgrid[:,:,1])
        colorbar
        axis('xy')
        axis('equal')
        axis('tight')
        title('lat')
        subplot(2,5,10)
        imagesc(longrid[:,:,1])
        colorbar
        axis('xy')
        axis('equal')
        axis('tight')
        title('lon')
    
    # 
# 
# 
#  ncid = netcdf.open(file,'NC_NOWRITE');
# [numdims,numvars,numglobalatts,unlimdimid] = netcdf.inq(ncid);
# [dimname, dimlen] = netcdf.inqDim(ncid,0); 
# 
#         for k=1:numvars
#             [dimname, dimlen] = netcdf.inqVar(ncid,k-1); 
#             fprintf([num2str(k-1) ' - ' dimname '\n'])
#         end