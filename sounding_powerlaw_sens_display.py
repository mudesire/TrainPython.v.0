# Autogenerated with SMOP 
from smop.core import *
# matlab/sounding_powerlaw_sens_display.m

    
@function
def sounding_powerlaw_sens_display(*args,**kwargs):
    varargin = sounding_powerlaw_sens_display.varargin
    nargin = sounding_powerlaw_sens_display.nargin

    # function to display the powerlaw sensitivity results.
# results are save in the figures folder.
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # Bekaert David - university of Leeds
    
    # modifications:
# 08/2014   DB  Update the parms_aps file with the values loaded from the
#               earlier processed file
# 03/2016   DB  Remove axis limits and set to default, fix figure size, fix
#               for delay reference height difference
    
    colorbarflag=0
# matlab/sounding_powerlaw_sens_display.m:30
    fig_format='png'
# matlab/sounding_powerlaw_sens_display.m:31
    
    xlims=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:32
    
    curdir=copy(pwd)
# matlab/sounding_powerlaw_sens_display.m:33
    fontsize=24
# matlab/sounding_powerlaw_sens_display.m:37
    # getting the data from the parms_aps file
    sounding_dir=getparm_aps('sounding_dir')
# matlab/sounding_powerlaw_sens_display.m:39
    n_months=getparm_aps('sounding_months')
# matlab/sounding_powerlaw_sens_display.m:40
    sounding_start_date=getparm_aps('sounding_start_date')
# matlab/sounding_powerlaw_sens_display.m:41
    sounding_end_date=getparm_aps('sounding_end_date')
# matlab/sounding_powerlaw_sens_display.m:42
    sounding_dir=getparm_aps('sounding_dir')
# matlab/sounding_powerlaw_sens_display.m:43
    time_stamp=getparm_aps('sounding_time_stamp')
# matlab/sounding_powerlaw_sens_display.m:44
    sounding_ifg_dates=getparm_aps('sounding_ifg_dates')
# matlab/sounding_powerlaw_sens_display.m:45
    time_stamp_str=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:46
    for k in arange(1,size(time_stamp,1)).reshape(-1):
        if k > 1:
            time_stamp_str=matlabarray(cat(time_stamp_str,'_',time_stamp[k,:]))
# matlab/sounding_powerlaw_sens_display.m:49
        else:
            time_stamp_str=matlabarray(cat(time_stamp[k,:]))
# matlab/sounding_powerlaw_sens_display.m:51
    
    # saving of the figures
    save_str=matlabarray(cat(sounding_dir,filesep,'Powerlaw',filesep,'figures',filesep))
# matlab/sounding_powerlaw_sens_display.m:56
    if exist(save_str,'dir') != 7:
        mkdir(save_str)
    
    if strcmp(sounding_ifg_dates,'y'):
        save_name=matlabarray(cat(sounding_dir,filesep,'Powerlaw',filesep,'Powerlaw_sensitivity_SAR_dates_1month_',time_stamp_str,'Hr.mat'))
# matlab/sounding_powerlaw_sens_display.m:62
        n_months=1
# matlab/sounding_powerlaw_sens_display.m:63
        save_str=matlabarray(cat(save_str,'SAR_dates'))
# matlab/sounding_powerlaw_sens_display.m:64
        stamps_processed=getparm_aps('stamps_processed')
# matlab/sounding_powerlaw_sens_display.m:67
        if strcmp(stamps_processed,'y'):
            fprintf('Stamps processed structure \\n')
            ll_matfile=getparm_aps('ll_matfile')
# matlab/sounding_powerlaw_sens_display.m:71
            ps=load(ll_matfile)
# matlab/sounding_powerlaw_sens_display.m:72
            # constructing the matrix with master and slave dates
            if strcmp(getparm('small_baseline_flag'),'y'):
                # for SB
                ifgs_ix=ps.ifgday_ix
# matlab/sounding_powerlaw_sens_display.m:78
            else:
                n_ifg=ps.n_ifg
# matlab/sounding_powerlaw_sens_display.m:81
                date_slave_ix=cat(arange(1,n_ifg)).T
# matlab/sounding_powerlaw_sens_display.m:83
                date_master_ix=repmat(ps.master_ix,size(date_slave_ix,1),1)
# matlab/sounding_powerlaw_sens_display.m:85
                ifgs_ix=matlabarray(cat(date_master_ix,date_slave_ix))
# matlab/sounding_powerlaw_sens_display.m:87
        else:
            # getting the dates in jullian format
            ifgday_matfile=getparm_aps('ifgday_matfile')
# matlab/sounding_powerlaw_sens_display.m:91
            ifgs_dates=load(ifgday_matfile)
# matlab/sounding_powerlaw_sens_display.m:92
            ifgs_dates=ifgs_dates.ifgday
# matlab/sounding_powerlaw_sens_display.m:93
            dates=reshape(ifgs_dates,[],1)
# matlab/sounding_powerlaw_sens_display.m:94
            dates=unique(dates)
# matlab/sounding_powerlaw_sens_display.m:95
            dates=datenum(num2str(dates),'yyyymmdd')
# matlab/sounding_powerlaw_sens_display.m:96
            dates=sort(dates)
# matlab/sounding_powerlaw_sens_display.m:97
            # getting the ix position for the master and slave dates with respect
        # to the times
            date_master=datenum(num2str(ifgs_dates[:,1]),'yyyymmdd')
# matlab/sounding_powerlaw_sens_display.m:101
            date_slave=datenum(num2str(ifgs_dates[:,2]),'yyyymmdd')
# matlab/sounding_powerlaw_sens_display.m:102
            for k in arange(1,size(date_master,1)).reshape(-1):
                date_master_ix[k,1]=find(date_master[k,1] == dates)
# matlab/sounding_powerlaw_sens_display.m:105
                date_slave_ix[k,1]=find(date_slave[k,1] == dates)
# matlab/sounding_powerlaw_sens_display.m:106
            # ix interferograms
            ifgs_ix=matlabarray(cat(date_master_ix,date_slave_ix))
# matlab/sounding_powerlaw_sens_display.m:110
            clear('date_master_ix','date_slave_ix')
            keyboard
            fprintf('Check the InSAR dates, this has not been tested \\n')
    else:
        # putting the variables in the right set-up
        start_year=str2num(sounding_start_date[1:4])
# matlab/sounding_powerlaw_sens_display.m:118
        end_year=str2num(sounding_end_date[1:4])
# matlab/sounding_powerlaw_sens_display.m:119
        start_str=sounding_start_date[5:6]
# matlab/sounding_powerlaw_sens_display.m:120
        end_str=sounding_end_date[5:6]
# matlab/sounding_powerlaw_sens_display.m:121
        save_name=matlabarray(cat(sounding_dir,filesep,'Powerlaw',filesep,'Powerlaw_sensitivity_',num2str(n_months),'month_',time_stamp_str,'Hr_',num2str(start_year),start_str,'_',num2str(end_year),end_str,'.mat'))
# matlab/sounding_powerlaw_sens_display.m:124
        save_str=matlabarray(cat(save_str,'period_'))
# matlab/sounding_powerlaw_sens_display.m:125
    
    #loading the data
    load(cat(save_name))
    # updating the parms_aps file
    if strcmp(sounding_ifg_dates,'y'):
        alpha_SAR=matlabarray(cat(alpha_vector_fix(ifgs_ix[:,1]),alpha_vector_fix(ifgs_ix[:,2])))
# matlab/sounding_powerlaw_sens_display.m:136
        h0_SAR=matlabarray(cat(h0_vector_fix(ifgs_ix[:,1]),h0_vector_fix(ifgs_ix[:,2])))
# matlab/sounding_powerlaw_sens_display.m:137
        h0_InSAR=mean(h0_SAR,2)
# matlab/sounding_powerlaw_sens_display.m:141
        alpha_InSAR=mean(alpha_SAR,2)
# matlab/sounding_powerlaw_sens_display.m:142
        setparm_aps('powerlaw_h0',h0_InSAR.T)
        setparm_aps('powerlaw_alpha',alpha_InSAR.T)
    else:
        # computing the mean between two SAR dates
        ix=isnan(h0_vector)
# matlab/sounding_powerlaw_sens_display.m:148
        powerlaw_h0=mean(h0_vector(logical_not(ix)))
# matlab/sounding_powerlaw_sens_display.m:149
        powerlaw_alpha=mean(alpha_vector(logical_not(ix)))
# matlab/sounding_powerlaw_sens_display.m:150
        setparm_aps('powerlaw_h0',powerlaw_h0.T)
        setparm_aps('powerlaw_alpha',powerlaw_alpha.T)
    
    # getting the mean of the month
    date_center=(mean(cat(datenum(date_start_vector,'yyyymmdd'),datenum(date_end_vector,'yyyymmdd')),2))
# matlab/sounding_powerlaw_sens_display.m:159
    # color variation
    color_max=dot(dot(n_months,30),size(time_stamp,1))
# matlab/sounding_powerlaw_sens_display.m:162
    color_step=5
# matlab/sounding_powerlaw_sens_display.m:163
    # generating a colorbar based on the number of soundings per estimate
    if isempty(color_max) or color_max == 0:
        color_max=max(n_soundings_vector)
# matlab/sounding_powerlaw_sens_display.m:167
    
    if isempty(color_step):
        color_step=1
# matlab/sounding_powerlaw_sens_display.m:170
    
    color_max=dot(ceil(color_max / color_step),color_step)
# matlab/sounding_powerlaw_sens_display.m:173
    n_colors=color_max / color_step
# matlab/sounding_powerlaw_sens_display.m:174
    colorcode=jet(n_colors)
# matlab/sounding_powerlaw_sens_display.m:177
    color_ix=floor(dot(n_soundings_vector / color_max,n_colors))
# matlab/sounding_powerlaw_sens_display.m:178
    color_ix[color_ix == 0]=1
# matlab/sounding_powerlaw_sens_display.m:179
    if isempty(xlims) != 1:
        xlimits=matlabarray(cat(datenum(num2str(xlims[1]),'yyyymmdd'),datenum(num2str(xlims[2]),'yyyymmdd')))
# matlab/sounding_powerlaw_sens_display.m:182
        window_size=matlabarray(cat(64,254,1493,269))
# matlab/sounding_powerlaw_sens_display.m:183
    else:
        window_size=matlabarray(cat(64,254,1493,269))
# matlab/sounding_powerlaw_sens_display.m:185
    
    ## Plotting power law coefficient estimated from the 0-hc height range
    h_fig=figure('name','Powerlaw from the hc height range','position',window_size)
# matlab/sounding_powerlaw_sens_display.m:189
    for k in arange(1,length(alpha_vector)).reshape(-1):
        if logical_not(isnan(alpha_vector(k))):
            h=plot(date_center[k],alpha_vector(k),'ko')
# matlab/sounding_powerlaw_sens_display.m:192
            if colorbarflag == 1:
                set(h,'Markerfacecolor',colorcode[color_ix[k],:])
            else:
                set(h,'Markerfacecolor','k')
            hold('on')
    
    xlabel('time of year','fontsize',fontsize)
    ylabel('\\alpha','fontsize',fontsize)
    title('Power law from 0 to hc height range','fontsize',fontsize)
    datetick('x','mm/yyyy')
    if isempty(xlims) != 1:
        xlim(xlimits)
    
    ylim(cat(min(alpha_vector) - (max(alpha_vector) - min(alpha_vector)) / 10,max(alpha_vector) + (max(alpha_vector) - min(alpha_vector)) / 10))
    if colorbarflag == 1:
        cc=copy(colorbar)
# matlab/sounding_powerlaw_sens_display.m:211
        caxis(cat(0,color_max))
        title(cc,'n soundings','fontsize',fontsize)
        colormap(jet(n_colors))
    
    set(gca,'fontsize',fontsize)
    box('on')
    grid('off')
    set(h_fig,'PaperPositionMode','auto')
    if strcmp(fig_format,'eps'):
        print_(h_fig,'-depsc','-r150',cat(save_str,'alpha_hc.eps'))
    else:
        if strcmp(fig_format,'png'):
            print_(h_fig,'-dpng','-r150',cat(save_str,'alpha_hc.png'))
    
    ## Plotting power law coefficient estimated from the full height range
    h_fig=figure('name','Powerlaw from the full height range','position',window_size)
# matlab/sounding_powerlaw_sens_display.m:227
    for k in arange(1,length(alpha_vector_all)).reshape(-1):
        if logical_not(isnan(alpha_vector_all(k))):
            h=plot(date_center[k],alpha_vector_all(k),'ko')
# matlab/sounding_powerlaw_sens_display.m:230
            if colorbarflag == 1:
                set(h,'Markerfacecolor',colorcode[color_ix[k],:])
            else:
                set(h,'Markerfacecolor','k')
            hold('on')
    
    xlabel('time of year','fontsize',fontsize)
    ylabel('\\alpha','fontsize',fontsize)
    title('Power law from full height range','fontsize',fontsize)
    datetick('x','mm/yyyy')
    if isempty(xlims) != 1:
        xlim(xlimits)
    
    ylim(cat(min(alpha_vector_all) - (max(alpha_vector_all) - min(alpha_vector_all)) / 10,max(alpha_vector_all) + (max(alpha_vector_all) - min(alpha_vector_all)) / 10))
    if colorbarflag == 1:
        cc=copy(colorbar)
# matlab/sounding_powerlaw_sens_display.m:248
        caxis(cat(0,color_max))
        title(cc,'n soundings','fontsize',fontsize)
        colormap(jet(n_colors))
    
    set(gca,'fontsize',fontsize)
    box('on')
    grid('off')
    set(h_fig,'PaperPositionMode','auto')
    if strcmp(fig_format,'eps'):
        print_(h_fig,'-depsc','-r150',cat(save_str,'alpha_all.eps'))
    else:
        if strcmp(fig_format,'png'):
            print_(h_fig,'-dpng','-r150',cat(save_str,'alpha_all.png'))
    
    ## Plotting reference height
    h_fig=figure('name','Reference height variation of the power law','position',window_size)
# matlab/sounding_powerlaw_sens_display.m:264
    for k in arange(1,length(h0_vector)).reshape(-1):
        if logical_not(isnan(h0_vector(k))):
            h=plot(date_center[k],h0_vector(k),'ko')
# matlab/sounding_powerlaw_sens_display.m:267
            if colorbarflag == 1:
                set(h,'Markerfacecolor',colorcode[color_ix[k],:])
            else:
                set(h,'Markerfacecolor','k')
            hold('on')
    
    xlabel('time of year','fontsize',fontsize)
    ylabel('h_0 [km]','fontsize',fontsize)
    title('Reference height of power law','fontsize',fontsize)
    datetick('x','mm/yyyy')
    if isempty(xlims) != 1:
        xlim(xlimits)
    
    ylim(cat(min(h0_vector) - (max(h0_vector) - min(h0_vector)) / 10,max(h0_vector) + (max(h0_vector) - min(h0_vector)) / 10))
    if colorbarflag == 1:
        cc=copy(colorbar)
# matlab/sounding_powerlaw_sens_display.m:286
        caxis(cat(0,color_max))
        title(cc,'n soundings','fontsize',fontsize)
        colormap(jet(n_colors))
    
    set(gca,'fontsize',fontsize)
    box('on')
    grid('off')
    set(h_fig,'PaperPositionMode','auto')
    if strcmp(fig_format,'eps'):
        print_(h_fig,'-depsc','-r150',cat(save_str,'href.eps'))
    else:
        if strcmp(fig_format,'png'):
            print_(h_fig,'-dpng','-r150',cat(save_str,'href.png'))
    
    ## plotting hte mead delay cure and the mean of the delays
    
    str=''
# matlab/sounding_powerlaw_sens_display.m:304
    while strcmpi(str,'y') != 1 and strcmpi(str,'n') != 1:

        str=input_(cat('Do you want to plot mean delay and net delay? [y/n] \\n'),'s')
# matlab/sounding_powerlaw_sens_display.m:306

    
    if strcmpi(str,'y'):
        fprintf(cat('Your sounding period is from ',getparm_aps('sounding_start_date'),' till ',getparm_aps('sounding_end_date'),'\\n'))
        start_date_user=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:310
        end_date_user=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:311
        while isempty(start_date_user):

            start_date_user=input_(cat('start date yyyymmdd (as a number or NaN for all)?  \\n'),'s')
# matlab/sounding_powerlaw_sens_display.m:313
            start_date_user=str2num(start_date_user)
# matlab/sounding_powerlaw_sens_display.m:314

        while isempty(end_date_user):

            end_date_user=input_(cat('end date yyyymmdd (as a number or NaN for all)?  \\n'),'s')
# matlab/sounding_powerlaw_sens_display.m:317
            end_date_user=str2num(end_date_user)
# matlab/sounding_powerlaw_sens_display.m:318

        if isnan(start_date_user):
            start_date_user=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:321
        else:
            start_date_user=num2str(start_date_user)
# matlab/sounding_powerlaw_sens_display.m:323
        if isnan(end_date_user):
            end_date_user=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:326
        else:
            end_date_user=num2str(end_date_user)
# matlab/sounding_powerlaw_sens_display.m:328
        time_stamp=getparm_aps('sounding_time_stamp')
# matlab/sounding_powerlaw_sens_display.m:332
        cd(sounding_dir)
        # making a list of all the sounding files
        dummy,dummy2=system('echo sounding_list > sounding.list',nargout=2)
# matlab/sounding_powerlaw_sens_display.m:336
        clear('dummy','dummy2')
        for k in arange(1,size(time_stamp,1)).reshape(-1):
            command_str=matlabarray(cat('ls [0-9]???????_',time_stamp[k,:],'.mat >> sounding.list'))
# matlab/sounding_powerlaw_sens_display.m:339
            dummy,dummy2=system(command_str,nargout=2)
# matlab/sounding_powerlaw_sens_display.m:340
            clear('dummy','dummy2')
        temp=tdfread('sounding.list')
# matlab/sounding_powerlaw_sens_display.m:344
        dummy,dummy2=system('rm sounding.list',nargout=2)
# matlab/sounding_powerlaw_sens_display.m:345
        clear('dummy','dummy2')
        date_list_temp=temp.sounding_list(arange(),cat(arange(1,8)))
# matlab/sounding_powerlaw_sens_display.m:347
        sounding_list=temp.sounding_list
# matlab/sounding_powerlaw_sens_display.m:348
        clear('ix')
        abord_flag=0
# matlab/sounding_powerlaw_sens_display.m:352
        count_runs=0
# matlab/sounding_powerlaw_sens_display.m:353
        while abord_flag == 0:

            if isempty(start_date_user) != 1 and isempty(end_date_user) != 1:
                ix=find(datenum(date_list_temp,'yyyymmdd') >= logical_and(datenum(start_date_user,'yyyymmdd'),datenum(date_list_temp,'yyyymmdd')) <= datenum(end_date_user,'yyyymmdd'))
# matlab/sounding_powerlaw_sens_display.m:356
            else:
                if isempty(start_date_user) != 1 and isempty(end_date_user) == 1:
                    ix=find(datenum(date_list_temp,'yyyymmdd') >= datenum(start_date_user,'yyyymmdd'))
# matlab/sounding_powerlaw_sens_display.m:358
                else:
                    if isempty(start_date_user) == 1 and isempty(end_date_user) != 1:
                        ix=find(datenum(date_list_temp,'yyyymmdd') <= datenum(end_date_user,'yyyymmdd'))
# matlab/sounding_powerlaw_sens_display.m:360
            if isempty(start_date_user) != 1 or isempty(end_date_user) != 1:
                if isempty(ix) != 1:
                    date_list_temp=date_list_temp[ix,:]
# matlab/sounding_powerlaw_sens_display.m:366
                    sounding_list=sounding_list[ix,:]
# matlab/sounding_powerlaw_sens_display.m:367
                else:
                    fprintf('No sounding has been acquired in this period \\n')
                    continue_flag=0
# matlab/sounding_powerlaw_sens_display.m:370
                    abord_flag=1
# matlab/sounding_powerlaw_sens_display.m:371
                clear('temp','ix')
            # getting the maximum height
            hgt_temp=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:377
            for counter_date in arange(1,size(sounding_list,1)).reshape(-1):
                # loading of the data
                temp=load(sounding_list[counter_date,:])
# matlab/sounding_powerlaw_sens_display.m:380
                if isfield(temp,'h_delay'):
                    hgt_temp=matlabarray(cat([hgt_temp],[nanmax(temp.h_delay)]))
# matlab/sounding_powerlaw_sens_display.m:382
                clear('temp')
            hgt_temp=sort(hgt_temp)
# matlab/sounding_powerlaw_sens_display.m:386
            max_height_95=hgt_temp[floor(dot(length(hgt_temp),0.25))]
# matlab/sounding_powerlaw_sens_display.m:387
            max_height_all=max(hgt_temp)
# matlab/sounding_powerlaw_sens_display.m:388
            if sum(hgt_temp < max_height_all) > sum(hgt_temp < max_height_95):
                max_height=copy(max_height_95)
# matlab/sounding_powerlaw_sens_display.m:391
            else:
                max_height=copy(max_height_all)
# matlab/sounding_powerlaw_sens_display.m:393
            if count_runs == 0:
                # max_height = 15000;
                height_step=50
# matlab/sounding_powerlaw_sens_display.m:398
                max_delay=200
# matlab/sounding_powerlaw_sens_display.m:399
                delay_step=0.25
# matlab/sounding_powerlaw_sens_display.m:400
                max_sat_delay=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:401
                max_sat_netdelay=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:402
                scaling_resolution=1
# matlab/sounding_powerlaw_sens_display.m:403
            else:
                # max_height = 15000;
                height_step=dot(50.0,scaling_resolution)
# matlab/sounding_powerlaw_sens_display.m:406
                max_delay=200
# matlab/sounding_powerlaw_sens_display.m:407
                delay_step=multiply(0.25,scaling_resolution)
# matlab/sounding_powerlaw_sens_display.m:408
                str=''
# matlab/sounding_powerlaw_sens_display.m:409
                while strcmpi(str,'y') != 1 and strcmpi(str,'n') != 1:

                    str=input_(cat('Are you happy with the color scale or do you want to change manually (y for re-run)? [y/n] \\n'),'s')
# matlab/sounding_powerlaw_sens_display.m:411

                abord_flags=0
# matlab/sounding_powerlaw_sens_display.m:413
                if strcmpi(str,'n'):
                    abord_flags=abord_flags + 1
# matlab/sounding_powerlaw_sens_display.m:415
                else:
                    h_temp1=figure('name','color counts')
# matlab/sounding_powerlaw_sens_display.m:417
                    subplot(2,1,1)
                    hist(reshape(delay_matrix_count,[],1))
                    title('delays')
                    subplot(2,1,2)
                    hist(reshape(netdelay_matrix_count,[],1))
                    title('netdelays')
                    # changing the saturation values
                    str=''
# matlab/sounding_powerlaw_sens_display.m:425
                    while isnumeric(str) != 1:

                        str=input_(cat('change max saturation for the delay? [] for no change or numeric value \\n'),'s')
# matlab/sounding_powerlaw_sens_display.m:427
                        str=str2num(str)
# matlab/sounding_powerlaw_sens_display.m:428

                    max_sat_delay=copy(str)
# matlab/sounding_powerlaw_sens_display.m:430
                    str=''
# matlab/sounding_powerlaw_sens_display.m:431
                    while isnumeric(str) != 1:

                        str=input_(cat('change max saturation for the netdelay? [] for no change or numeric value \\n'),'s')
# matlab/sounding_powerlaw_sens_display.m:433
                        str=str2num(str)
# matlab/sounding_powerlaw_sens_display.m:434

                    max_sat_netdelay=copy(str)
# matlab/sounding_powerlaw_sens_display.m:436
                while strcmpi(str,'y') != 1 and strcmpi(str,'n') != 1:

                    str=input_(cat('Are you happy with the resolution or do you want to change manually (y for re-run)? [y/n] \\n'),'s')
# matlab/sounding_powerlaw_sens_display.m:441

                if strcmpi(str,'n'):
                    abord_flags=abord_flags + 1
# matlab/sounding_powerlaw_sens_display.m:444
                else:
                    # changing the saturation values
                    str=''
# matlab/sounding_powerlaw_sens_display.m:447
                    while isnumeric(str) != 1:

                        str=input_(cat('By what scaling do you want to increase (new = factor*original resolution)? [] for no change or numeric value \\n'),'s')
# matlab/sounding_powerlaw_sens_display.m:449
                        str=str2num(str)
# matlab/sounding_powerlaw_sens_display.m:450

                    scaling_resolution=copy(str)
# matlab/sounding_powerlaw_sens_display.m:452
                    height_step=multiply(height_step,scaling_resolution)
# matlab/sounding_powerlaw_sens_display.m:453
                    delay_step=multiply(delay_step,scaling_resolution)
# matlab/sounding_powerlaw_sens_display.m:454
                if abord_flags == 2:
                    abord_flag=1
# matlab/sounding_powerlaw_sens_display.m:460
                    break
                close_(h_delay)
                close_(h_netdelay)
                close_(h_temp1)
            max_height=dot(ceil(max_height / height_step),height_step)
# matlab/sounding_powerlaw_sens_display.m:472
            max_delay=dot(ceil(max_delay / delay_step),delay_step)
# matlab/sounding_powerlaw_sens_display.m:473
            nx=matlabarray(cat(max_delay / delay_step + 1))
# matlab/sounding_powerlaw_sens_display.m:477
            ny=matlabarray(cat(max_height / height_step + 1))
# matlab/sounding_powerlaw_sens_display.m:478
            delay_matrix_count=zeros(cat(ny,nx))
# matlab/sounding_powerlaw_sens_display.m:479
            # loading the data for plotting of the delay curves
            delay_keep=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:483
            hgt_keep=cat(arange(1,max_height)).T
# matlab/sounding_powerlaw_sens_display.m:484
            for counter_date in arange(1,size(sounding_list,1)).reshape(-1):
                # loading of the data
                data_temp=load(sounding_list[counter_date,:])
# matlab/sounding_powerlaw_sens_display.m:488
                if isfield(data_temp,'delay'):
                    #                if ~isempty(delay_keep)
#                    if length(data_temp.delay)==size(delay_keep,1)
#                        
#                        # fix for the reference as some stations go higher
#                        # up than others
#                        ix_reference = find(data_temp.h_delay==max_height);
#                        
#                        delay_keep = [delay_keep data_temp.delay-data_temp.delay(ix_reference)];
#                        sounding_list_keep = [ sounding_list_keep ; sounding_list(counter_date,:)];
# 
#                    end
#                else
                    if max(data_temp.h_delay) >= max_height:
                        # reference height at the top
                        ix_reference=find(data_temp.h_delay == max_height)
# matlab/sounding_powerlaw_sens_display.m:508
                        delay_temp=NaN(cat(size(hgt_keep)))
# matlab/sounding_powerlaw_sens_display.m:511
                        delay_temp[min(data_temp.h_delay):size(delay_temp,1),1]=data_temp.delay(arange(1,ix_reference)) - data_temp.delay(ix_reference)
# matlab/sounding_powerlaw_sens_display.m:512
                        delay_keep=matlabarray(cat(delay_keep,delay_temp))
# matlab/sounding_powerlaw_sens_display.m:514
                        sounding_list_keep=matlabarray(cat(sounding_list[counter_date,:]))
# matlab/sounding_powerlaw_sens_display.m:515
                        for m in arange(1,length(hgt_keep)).reshape(-1):
                            if logical_not(isnan(delay_temp[m])):
                                iy_pos=round(hgt_keep[m] / height_step) + 1
# matlab/sounding_powerlaw_sens_display.m:520
                                ix_pos=round(dot(delay_temp[m],100.0) / delay_step) + 1
# matlab/sounding_powerlaw_sens_display.m:521
                                delay_matrix_count[iy_pos,ix_pos]=delay_matrix_count[iy_pos,ix_pos] + 1
# matlab/sounding_powerlaw_sens_display.m:522
                fprintf(cat(num2str(counter_date),' of ',num2str(size(sounding_list,1)),' done \\n'))
            if isempty(sounding_list_keep):
                sounding_list_keep=copy(NaN)
# matlab/sounding_powerlaw_sens_display.m:531
            fprintf(cat('Total number of soundings (having data) used in the plot : ',num2str(size(sounding_list_keep,1)),'\\n'))
            # computation of the mean delay curve
            mean_delay=mean(delay_keep,2)
# matlab/sounding_powerlaw_sens_display.m:537
            nx_max=max(find(sum(delay_matrix_count,1) != 0))
# matlab/sounding_powerlaw_sens_display.m:540
            ny_max=max(find(sum(delay_matrix_count,2) != 0))
# matlab/sounding_powerlaw_sens_display.m:541
            x_bounds=cat(dot(0(nx_max - 1),delay_step)) / 100
# matlab/sounding_powerlaw_sens_display.m:542
            y_bounds=cat(dot(0(ny_max - 1),height_step)) / 1000
# matlab/sounding_powerlaw_sens_display.m:543
            delay_matrix_count=delay_matrix_count[:,1:nx_max]
# matlab/sounding_powerlaw_sens_display.m:546
            delay_matrix_count=delay_matrix_count[1:ny_max,:]
# matlab/sounding_powerlaw_sens_display.m:547
            delay_matrix_count[delay_matrix_count == 0]=NaN
# matlab/sounding_powerlaw_sens_display.m:548
            h_delay=figure('name','Delay curve')
# matlab/sounding_powerlaw_sens_display.m:550
            imagesc(x_bounds,y_bounds,delay_matrix_count)
            axis('xy')
            if logical_not(isempty(max_sat_delay)):
                caxis(cat(0,max_sat_delay))
            hold('on')
            plot(mean_delay,hgt_keep / 1000,'k--','linewidth',2)
            scale_axis=matlabarray(cat(0,nanmax(nanmax(delay_matrix_count))))
# matlab/sounding_powerlaw_sens_display.m:558
            scale_axis=matlabarray(cat(dot(floor(scale_axis[1] / 1),1),dot(ceil(scale_axis[2] / 1),1)))
# matlab/sounding_powerlaw_sens_display.m:559
            n_steps=(scale_axis[2] - scale_axis[1]) / 1
# matlab/sounding_powerlaw_sens_display.m:560
            colormap_figure=(gray(ceil(dot(n_steps,1.15))))
# matlab/sounding_powerlaw_sens_display.m:561
            colormap_figure=flipud(colormap_figure[1:n_steps,:])
# matlab/sounding_powerlaw_sens_display.m:562
            colormap_figure=reshape(repmat(colormap_figure,1,10).T,3,[]).T
# matlab/sounding_powerlaw_sens_display.m:563
            colormap_figure=matlabarray(cat([1,1,1],[colormap_figure]))
# matlab/sounding_powerlaw_sens_display.m:564
            colormap(colormap_figure)
            ylabel('h [km]','fontsize',fontsize)
            xlabel('d_{tropo} [m]','fontsize',fontsize)
            set(gca,'fontsize',fontsize)
            ## computation of the net delay
            n_netdelays_max=400
# matlab/sounding_powerlaw_sens_display.m:573
            n_soundings=size(delay_keep,2)
# matlab/sounding_powerlaw_sens_display.m:574
            if (dot(n_soundings,n_soundings) - n_soundings) / 2 <= n_netdelays_max:
                fprintf(cat('Make all netdelay differences \\n'))
                ix1_random=repmat(arange(1,n_soundings),n_soundings,1)
# matlab/sounding_powerlaw_sens_display.m:577
                ix1_random=single(ix1_random)
# matlab/sounding_powerlaw_sens_display.m:578
                ix2_random=ix1_random.T
# matlab/sounding_powerlaw_sens_display.m:579
                ix_temp=logical_and(logical(tril(ones(n_soundings))),logical_not(eye(n_soundings)))
# matlab/sounding_powerlaw_sens_display.m:580
                ix_random=matlabarray(cat(ix1_random[ix_temp],ix2_random[ix_temp]))
# matlab/sounding_powerlaw_sens_display.m:581
                clear('ix1_random','ix2_random')
            else:
                fprintf(cat('Take random set to make netdelay differences \\n'))
                # take 2 random sets of n_netdelays_max
                new_set_search=1
# matlab/sounding_powerlaw_sens_display.m:586
                loop_counter=0
# matlab/sounding_powerlaw_sens_display.m:587
                while new_set_search:

                    ix1_random=ceil(dot(rand(dot(n_netdelays_max,5),1),n_soundings))
# matlab/sounding_powerlaw_sens_display.m:589
                    ix2_random=ceil(dot(rand(dot(n_netdelays_max,5),1),n_soundings))
# matlab/sounding_powerlaw_sens_display.m:590
                    ix_random=matlabarray(cat(ix1_random,ix2_random))
# matlab/sounding_powerlaw_sens_display.m:591
                    clear('ix1_random','ix2_random')
                    # remove those net delays of the same date
                    ix_temp=find(ix_random[:,1] - ix_random[:,2] == 0)
# matlab/sounding_powerlaw_sens_display.m:595
                    ix_random[ix_temp,:]=[]
# matlab/sounding_powerlaw_sens_display.m:596
                    clear('ix_temp')
                    # remove repetition of pair combination
                    ix_random=unique(ix_random,'rows')
# matlab/sounding_powerlaw_sens_display.m:600
                    if size(ix_random,1) >= n_netdelays_max:
                        ix_random[n_netdelays_max + 1:end(),:]=[]
# matlab/sounding_powerlaw_sens_display.m:604
                        new_set_search=0
# matlab/sounding_powerlaw_sens_display.m:605
                    loop_counter=loop_counter + 1
# matlab/sounding_powerlaw_sens_display.m:608
                    if loop_counter == 50:
                        fprintf('Having difficulty determining net delay combinations \\n')
                        keyboard

            # computation of the net delay
            netdelay_matrix_temp=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:617
            netdelay_matrix_temp=delay_keep[:,ix_random[:,1]] - delay_keep[:,ix_random[:,2]]
# matlab/sounding_powerlaw_sens_display.m:618
            netdelay_matrix_count=matlabarray([])
# matlab/sounding_powerlaw_sens_display.m:622
            max_netdelay=25
# matlab/sounding_powerlaw_sens_display.m:623
            delay_step=delay_step / 2
# matlab/sounding_powerlaw_sens_display.m:624
            max_height=dot(ceil(max_height / height_step),height_step)
# matlab/sounding_powerlaw_sens_display.m:626
            max_netdelay=dot(ceil(max_netdelay / delay_step),delay_step)
# matlab/sounding_powerlaw_sens_display.m:627
            nx=matlabarray(cat(dot(2,max_netdelay) / delay_step + 2))
# matlab/sounding_powerlaw_sens_display.m:630
            ny=matlabarray(cat(max_height / height_step + 1))
# matlab/sounding_powerlaw_sens_display.m:631
            netdelay_matrix_count=zeros(cat(ny,nx))
# matlab/sounding_powerlaw_sens_display.m:632
            fprintf(cat('Total number of netdelays computed for the plot: ',num2str(size(netdelay_matrix_temp,2)),'\\n'))
            for counter_date in arange(1,size(netdelay_matrix_temp,2)).reshape(-1):
                # loading of the data
                data_temp=netdelay_matrix_temp[:,counter_date]
# matlab/sounding_powerlaw_sens_display.m:639
                for m in arange(1,length(data_temp)).reshape(-1):
                    if hgt_keep[m] <= max_height:
                        if logical_not(isnan(data_temp[m])):
                            iy_pos=round(hgt_keep[m] / height_step) + 1
# matlab/sounding_powerlaw_sens_display.m:645
                            ix_pos=round(dot(data_temp[m],100.0) / delay_step) + 1 + nx / 2
# matlab/sounding_powerlaw_sens_display.m:646
                            if ix_pos <= size(netdelay_matrix_count,2) and ix_pos > 0:
                                netdelay_matrix_count[iy_pos,ix_pos]=netdelay_matrix_count[iy_pos,ix_pos] + 1
# matlab/sounding_powerlaw_sens_display.m:648
                if dot(floor(counter_date / 50),50) == counter_date:
                    fprintf(cat(num2str(counter_date),' of ',num2str(size(netdelay_matrix_temp,2)),' done \\n'))
            # getting the bounding box of the data
            nx_max=max(find(sum(netdelay_matrix_count,1) != 0))
# matlab/sounding_powerlaw_sens_display.m:661
            nx_min=min(find(sum(netdelay_matrix_count,1) != 0))
# matlab/sounding_powerlaw_sens_display.m:662
            nx_max=nx / 2 + max(cat(nx_max - nx / 2,nx / 2 - nx_min))
# matlab/sounding_powerlaw_sens_display.m:663
            nx_min=nx / 2 - max(cat(nx_max - nx / 2,nx / 2 - nx_min))
# matlab/sounding_powerlaw_sens_display.m:664
            ny_max=max(find(sum(netdelay_matrix_count,2) != 0))
# matlab/sounding_powerlaw_sens_display.m:665
            x_bounds=matlabarray(cat(dot(dot((nx_min - nx / 2 + 1),delay_step[nx_max - nx / 2 - 1]),delay_step)))
# matlab/sounding_powerlaw_sens_display.m:666
            y_bounds=cat(dot(0(ny_max - 1),height_step)) / 1000
# matlab/sounding_powerlaw_sens_display.m:667
            if nx_min == 0:
                nx_min=1
# matlab/sounding_powerlaw_sens_display.m:670
            # removing empty space and removing zeros and replace by NaN for plotting
            netdelay_matrix_count=netdelay_matrix_count[:,nx_min:nx_max]
# matlab/sounding_powerlaw_sens_display.m:673
            netdelay_matrix_count=netdelay_matrix_count[1:ny_max,:]
# matlab/sounding_powerlaw_sens_display.m:674
            netdelay_matrix_count[netdelay_matrix_count == 0]=NaN
# matlab/sounding_powerlaw_sens_display.m:675
            h_netdelay=figure('name','Net-delay curve')
# matlab/sounding_powerlaw_sens_display.m:677
            imagesc(x_bounds,y_bounds,netdelay_matrix_count)
            axis('xy')
            if logical_not(isempty(max_sat_netdelay)):
                caxis(cat(0,max_sat_netdelay))
            scale_axis=matlabarray(cat(0,nanmax(nanmax(netdelay_matrix_count))))
# matlab/sounding_powerlaw_sens_display.m:683
            scale_axis=matlabarray(cat(dot(floor(scale_axis[1] / 1),1),dot(ceil(scale_axis[2] / 1),1)))
# matlab/sounding_powerlaw_sens_display.m:684
            n_steps=(scale_axis[2] - scale_axis[1]) / 1
# matlab/sounding_powerlaw_sens_display.m:685
            colormap_figure=(gray(ceil(dot(n_steps,1.2))))
# matlab/sounding_powerlaw_sens_display.m:686
            colormap_figure=flipud(colormap_figure[1:n_steps,:])
# matlab/sounding_powerlaw_sens_display.m:687
            colormap_figure=reshape(repmat(colormap_figure,1,10).T,3,[]).T
# matlab/sounding_powerlaw_sens_display.m:688
            colormap_figure=matlabarray(cat([1,1,1],[colormap_figure]))
# matlab/sounding_powerlaw_sens_display.m:689
            colormap(colormap_figure)
            ylabel('h [km]','fontsize',fontsize)
            xlabel('\\Delta d_{tropo} [cm]','fontsize',fontsize)
            set(gca,'fontsize',fontsize)
            count_runs=count_runs + 1
# matlab/sounding_powerlaw_sens_display.m:695

        cd(curdir)
        # plotting the mean delay curve
        str=''
# matlab/sounding_powerlaw_sens_display.m:703
        while strcmpi(str,'y') != 1 and strcmpi(str,'n') != 1:

            str=input_(cat('Do you want to plot the loglog mean delay? [y/n] \\n'),'s')
# matlab/sounding_powerlaw_sens_display.m:705

        if strcmpi(str,'y'):
            h0=getparm_aps('powerlaw_h0')
# matlab/sounding_powerlaw_sens_display.m:708
            h_lims=matlabarray(cat(0,4))
# matlab/sounding_powerlaw_sens_display.m:710
            h_lims_scalled=sort((h0 - h_lims))
# matlab/sounding_powerlaw_sens_display.m:711
            hgt_keep_new=copy(hgt_keep)
# matlab/sounding_powerlaw_sens_display.m:713
            mean_delay_new=copy(mean_delay)
# matlab/sounding_powerlaw_sens_display.m:714
            mean_delay_new[hgt_keep_new / 1000 < logical_or(min(h_lims),hgt_keep_new / 1000) >= max(h_lims)]=[]
# matlab/sounding_powerlaw_sens_display.m:715
            hgt_keep_new[hgt_keep_new / 1000 < logical_or(min(h_lims),hgt_keep_new / 1000) >= max(h_lims)]=[]
# matlab/sounding_powerlaw_sens_display.m:716
            h_scalled=(h0 - hgt_keep_new / 1000)
# matlab/sounding_powerlaw_sens_display.m:717
            # line through data
            A=matlabarray(cat(log10(h_scalled),ones(size(h_scalled))))
# matlab/sounding_powerlaw_sens_display.m:721
            coeff=lscov(A,log10(mean_delay_new))
# matlab/sounding_powerlaw_sens_display.m:722
            y_values=dot(cat((sort(log10(h_lims_scalled))).T,cat([1],[1])),coeff)
# matlab/sounding_powerlaw_sens_display.m:723
            # latter on
            h_temp=figure('position',cat(1000,392,560,530))
# matlab/sounding_powerlaw_sens_display.m:727
            plot(log10(h_scalled),log10(mean_delay_new))
            hold('on')
            plot((sort(log10(h_lims_scalled))),y_values,'r--','linewidth',2)
            xlim(sort(log10(h_lims_scalled)))
            xlabel('log(h_0-h [km])','fontsize',fontsize)
            ylabel('log(d_{tropo} [m])','fontsize',fontsize)
            title(cellarray(['  ','   ']),'fontsize',fontsize)
            set(gca,'fontsize',fontsize)
            grid('on')
            # axis information
            h_ticks=matlabarray(cat(0.001,1000,2000,3000,4000))
# matlab/sounding_powerlaw_sens_display.m:740
            h_scalled_ticks=log10(h0 - h_ticks / 1000)
# matlab/sounding_powerlaw_sens_display.m:741
            h_scalled_ticks_label=num2str(round(dot(h_ticks.T / 1000.0,10)) / 10)
# matlab/sounding_powerlaw_sens_display.m:742
            h_scalled_ticks,b=sort(h_scalled_ticks,nargout=2)
# matlab/sounding_powerlaw_sens_display.m:743
            h_scalled_ticks_label=h_scalled_ticks_label[b,:]
# matlab/sounding_powerlaw_sens_display.m:744
            Ax1=copy(gca)
# matlab/sounding_powerlaw_sens_display.m:745
            figure('position',cat(1000,392,560,530),'name','Power-law')
            Ax2=axes('Position',get(Ax1,'Position'))
# matlab/sounding_powerlaw_sens_display.m:750
            plot(log10(h_scalled),log10(mean_delay_new))
            xlim(sort(log10(h_lims_scalled)))
            xlabel('h [km]','fontsize',fontsize)
            set(Ax2,'XAxisLocation','top')
            set(gca,'fontsize',fontsize)
            set(Ax2,'xtick',h_scalled_ticks,'xticklabel',h_scalled_ticks_label)
            # put the actual plot on top
            Ax3=axes('Position',get(Ax1,'Position'))
# matlab/sounding_powerlaw_sens_display.m:759
            hold('on')
            plot(log10(h_scalled),log10(mean_delay_new),'k-','linewidth',2)
            hold('on')
            plot((sort(log10(h_lims_scalled))),y_values,'r--','linewidth',2)
            xlim(sort(log10(h_lims_scalled)))
            xlabel('log(h_0-h [km])','fontsize',fontsize)
            ylabel('log(d_{tropo} [m])','fontsize',fontsize)
            title(cellarray(['  ','   ']),'fontsize',fontsize)
            set(gca,'fontsize',fontsize)
            grid('on')
            box('on')
            # close the dummy figure
            close_(h_temp)
    