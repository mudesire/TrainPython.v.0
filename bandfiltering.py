# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/bandfiltering.m

    
@function
def bandfiltering(z_grid=None,x_res=None,y_res=None,spatial_bands=None,save_path=None,ifg_based_correction=None,n_degree_butterworth=None,norm_filter_flag=None,*args,**kwargs):
    varargin = bandfiltering.varargin
    nargin = bandfiltering.nargin

    # function that computes the band pass filtered data usigng 2D FFT and a
# butterwurth function. Make sure the input data is on a regular grid and
# has no NaN values. There is no output passed in this function. Instead
# the bandfiltered data is saved for each dataset individually, e.g.
# 'dataset_1.mat' for the first dataset and increasing for the others. 
# input:
# z_grid                    The data specified as a grid, i.e. a matrix.
#                           Additonal datasets can be specified by 
#                           increasing the third dimention.
# x_res                     The resolution in x-direction in m of the grid
# y_res                     The resolution in y-direction in m of the grid
# spatial_bands             The spatial band that need to be filtered in m, 
#                           specified as a 2 column matrix [lower upper].
#                           Multiple band filters can be specified by 
#                           increasing the number or rows. 
# Optional inputs:
# save_path                 The path were the output data will be saved. default
#                           is the current directory
# n_degree_butterworth      The degree of the butterwurth filter, by
#                           default this is set to be 3.
# norm_filter_flag          Normalisation of the butterwurth filter is done
#                           by default. This is to scope with the issue
#                           when the extremes of the bandfitler are too
#                           close to eachother causing only a partial
#                           amplitude passing in the selected band.
# 
#     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # By Bekaert David - December 2012
# modifications:
# DB	02/2013		Include the save_path variable
# DB    03/2013     Include warnings for edge effects and to large spatial
#                   bandfilters.
# DB    03/2013     Include 1D filtering to cope with limitation of narrow 
#                   datasets  
# DB    05/2013     Include option to crop out a region
    
    # optional inputs for checking results:
# figure properties
    fontsize=15
# Trainmatlab.v.0/bandfiltering.m:56
    plot_figures=0
# Trainmatlab.v.0/bandfiltering.m:57
    
    save_fig=0
# Trainmatlab.v.0/bandfiltering.m:58
    
    n_plot_dataset=1
# Trainmatlab.v.0/bandfiltering.m:59
    
    # Topography is first then the interferograms
    check_flag=0
# Trainmatlab.v.0/bandfiltering.m:61
    
    mirror_flag=1
# Trainmatlab.v.0/bandfiltering.m:62
    
    # are reduced. The mirror is based on the
                            # largest spatial filter wavelength.
    
    max_perc_mirror_2D=100
# Trainmatlab.v.0/bandfiltering.m:66
    
    # dimension in percentage till what 2D
                            # filtering is allowed. When larger 1D
                            # filtering is performed in the larger
                            # dimension of X or Y.
    
    
    warning_flag_perc=10
# Trainmatlab.v.0/bandfiltering.m:73
    
    # and the percentage of half the filter length 
                            # with respect to the maximum dimension is mirrored.
    
    warning_mirror_flag_perc=50
# Trainmatlab.v.0/bandfiltering.m:77
    
    # with respect to the maximum dimension is mirrored.
                            # Mirroring is done by half the maximum filter size.
    
    
    # getting the data from the parms_aps file
    crop_flag=getparm_aps('crop_flag')
# Trainmatlab.v.0/bandfiltering.m:84
    
    if nargin < 6:
        ifg_based_correction='n'
# Trainmatlab.v.0/bandfiltering.m:87
    
    if nargin < 7:
        n_degree_butterworth=matlabarray([])
# Trainmatlab.v.0/bandfiltering.m:90
    
    if nargin < 8:
        norm_filter_flag=matlabarray([])
# Trainmatlab.v.0/bandfiltering.m:93
    
    if isempty(n_degree_butterworth) == 1:
        n_degree_butterworth=3
# Trainmatlab.v.0/bandfiltering.m:96
    
    if isempty(norm_filter_flag) == 1:
        norm_filter_flag=1
# Trainmatlab.v.0/bandfiltering.m:99
    
    if nargin < 5 or isempty(save_path) == 1:
        save_path='./'
# Trainmatlab.v.0/bandfiltering.m:102
    
    fprintf(cat('***Bandfiltering***\\n'))
    fprintf(cat('Using butterworth filter degree: ',num2str(n_degree_butterworth),'\\n'))
    if norm_filter_flag == 1:
        fprintf(cat('Normalise the butterworth filter. \\n'))
    
    norm_filter_flag=0
# Trainmatlab.v.0/bandfiltering.m:110
    n_degree_butterworth=10
# Trainmatlab.v.0/bandfiltering.m:111
    # number of datasets
    n_datasets=size(z_grid,3)
# Trainmatlab.v.0/bandfiltering.m:113
    n_band_filters=size(spatial_bands,1)
# Trainmatlab.v.0/bandfiltering.m:114
    if strcmp(ifg_based_correction,'y'):
        h_ifg_number=n_datasets / 2
# Trainmatlab.v.0/bandfiltering.m:116
    else:
        h_ifg_number=1
# Trainmatlab.v.0/bandfiltering.m:118
    
    
    if size(spatial_bands,1) == 1 and size(spatial_bands,2) == 2 and spatial_bands[1,1] == 0 and spatial_bands[1,2] == inf:
        # this is a band filter of the whole image
        for k in arange(1,n_datasets).reshape(-1):
            if k <= h_ifg_number and h_ifg_number != 1:
                # these are interferograms
                save_name=matlabarray(cat('bandfilter_regular_hgt_ifg_',num2str(k),'.mat'))
# Trainmatlab.v.0/bandfiltering.m:127
            else:
                if k <= h_ifg_number and h_ifg_number == 1:
                    # these are the heights
                    save_name='bandfilter_regular_hgt.mat'
# Trainmatlab.v.0/bandfiltering.m:130
                else:
                    # thse are interferograms
                    save_name=matlabarray(cat('bandfilter_regular_ifg_',num2str(k - h_ifg_number),'.mat'))
# Trainmatlab.v.0/bandfiltering.m:133
            data_band_out[:,:]=z_grid[:,:,k]
# Trainmatlab.v.0/bandfiltering.m:135
            clear('data_band')
            dimension_filter=copy(NaN)
# Trainmatlab.v.0/bandfiltering.m:138
            save(cat(save_path,filesep,save_name),'data_band_out','x_res','y_res','spatial_bands','dimension_filter')
            clear('data_band_out')
    else:
        # Starting the bandfiltering code
        if plot_figures == 1:
            if n_plot_dataset <= h_ifg_number and h_ifg_number != 1:
                # thse are interferograms
                save_folder_str=matlabarray(cat('aps_p',filesep,'fig_bandfilter_hgt_ifg',num2str(n_plot_dataset)))
# Trainmatlab.v.0/bandfiltering.m:149
            else:
                if n_plot_dataset <= h_ifg_number and h_ifg_number == 1:
                    # these are the heights
                    save_folder_str=matlabarray(cat('aps_p',filesep,'fig_bandfilter_hgt'))
# Trainmatlab.v.0/bandfiltering.m:152
                else:
                    # these are interferograms
                    save_folder_str=matlabarray(cat('aps_p',filesep,'fig_bandfilter_ifg_',num2str(n_plot_dataset - h_ifg_number)))
# Trainmatlab.v.0/bandfiltering.m:155
            #     if n_plot_dataset==1
    #         save_folder_str=['aps_p' filesep 'fig_bandfilter_hgt'];
    #     else
    #         save_folder_str=['aps_p' filesep 'fig_bandfilter_ifg_' num2str(n_plot_dataset-1)];
    #     end
            if exist(save_folder_str,'dir') != 7:
                mkdir(save_folder_str)
        # original gridsize
        data_rows_or=size(z_grid,1)
# Trainmatlab.v.0/bandfiltering.m:169
        data_columns_or=size(z_grid,2)
# Trainmatlab.v.0/bandfiltering.m:170
        # below the percentage of the maximum band filter with respect to the dimension is computed
        x_samples_overlap=ceil(max(spatial_bands,[],2) / x_res / 2)
# Trainmatlab.v.0/bandfiltering.m:174
        x_perc_overlap=dot(x_samples_overlap / data_columns_or,100)
# Trainmatlab.v.0/bandfiltering.m:175
        y_samples_overlap=ceil(max(spatial_bands,[],2) / y_res / 2)
# Trainmatlab.v.0/bandfiltering.m:176
        y_perc_overlap=dot(y_samples_overlap / data_rows_or,100)
# Trainmatlab.v.0/bandfiltering.m:177
        # effect hit the warning percentage as set at the start of the code.
        if mirror_flag == 1:
            warning_perc=copy(warning_mirror_flag_perc)
# Trainmatlab.v.0/bandfiltering.m:182
        else:
            warning_perc=copy(warning_flag_perc)
# Trainmatlab.v.0/bandfiltering.m:184
        ix_x=find(x_perc_overlap > warning_perc)
# Trainmatlab.v.0/bandfiltering.m:186
        ix_y=find(y_perc_overlap > warning_perc)
# Trainmatlab.v.0/bandfiltering.m:187
        ix=intersect(ix_x,ix_y)
# Trainmatlab.v.0/bandfiltering.m:188
        clear('ix_x')
        clear('ix_y')
        if isempty(ix) != 1:
            new_linestr=repmat('\\n',length(ix),1)
# Trainmatlab.v.0/bandfiltering.m:191
            outputstr=matlabarray(cat(num2str(spatial_bands[ix,:]),new_linestr))
# Trainmatlab.v.0/bandfiltering.m:192
            if mirror_flag == 1:
                fprintf(cat('***Warning: The following band filters are mirrored about ',num2str(warning_perc),' perc of the maximum dimension: \\n'))
                for kk in arange(1,size(outputstr,1)).reshape(-1):
                    fprintf(outputstr[kk,:])
                clear('outputstr','kk')
                fprintf(cat('This migth introduce arctifacts. \\n'))
                fprintf(cat('It is recommended to limit to smaller spatial bandwidths. \\n'))
            else:
                fprintf(cat('***Warning: The following band filters are above ',num2str(warning_perc),' perc of the maximum dimension: \\n'))
                for kk in arange(1,size(outputstr,1)).reshape(-1):
                    fprintf(outputstr[kk,:])
                clear('outputstr','kk')
                fprintf(cat('Likely edge effects are introduced. \\n'))
                fprintf(cat('Turn the mirror flag on and/or limit to smaller spatial bandwidths. \\n\\n'))
        clear('ix')
        # output information on which bandfilters are replaced by a 1D filter to
    # reduce edge effects from a limiting dimension
    # x/y_perc_overlap represents the maximum bandfilter size with respect to
    # the x/y dimension given as a percentage
        ix_x=find(x_perc_overlap > max_perc_mirror_2D)
# Trainmatlab.v.0/bandfiltering.m:218
        ix_y=find(y_perc_overlap > max_perc_mirror_2D)
# Trainmatlab.v.0/bandfiltering.m:219
        if isempty(ix_x) != 1 or isempty(ix_y) != 1:
            x_n_cases=length(ix_x)
# Trainmatlab.v.0/bandfiltering.m:222
            y_n_cases=length(ix_y)
# Trainmatlab.v.0/bandfiltering.m:223
            if x_n_cases > y_n_cases:
                fprintf(cat('X-direction appears limited for band filtering. \\n'))
                fprintf(cat('1D (Y-direction) band filtering is performed for the following bands: \\n'))
                new_linestr=repmat('\\n',length(ix_x),1)
# Trainmatlab.v.0/bandfiltering.m:227
                outputstr=matlabarray(cat(num2str(spatial_bands[ix_x,:]),new_linestr))
# Trainmatlab.v.0/bandfiltering.m:228
                for kk in arange(1,size(outputstr,1)).reshape(-1):
                    fprintf(outputstr[kk,:])
                # setting the variables for the 1D filtering
                filter_1D_Y=1
# Trainmatlab.v.0/bandfiltering.m:234
                filter_1D_X=0
# Trainmatlab.v.0/bandfiltering.m:235
                ix_1D_filter=copy(ix_x)
# Trainmatlab.v.0/bandfiltering.m:236
                clear('outputstr')
                clear('new_linestr')
                clear('kk')
                clear('ix_y')
                clear('ix_x')
            else:
                if y_n_cases > x_n_cases:
                    fprintf(cat('Y-direction appears limited for band filtering. \\n'))
                    fprintf(cat('1D (X-direction) band filtering is performed for the following bands: \\n'))
                    new_linestr=repmat('\\n',length(ix_y),1)
# Trainmatlab.v.0/bandfiltering.m:242
                    outputstr=matlabarray(cat(num2str(spatial_bands[ix_y,:]),new_linestr))
# Trainmatlab.v.0/bandfiltering.m:243
                    for kk in arange(1,size(outputstr,1)).reshape(-1):
                        fprintf(outputstr[kk,:])
                    # setting the variables for the 1D filtering
                    filter_1D_Y=0
# Trainmatlab.v.0/bandfiltering.m:249
                    filter_1D_X=1
# Trainmatlab.v.0/bandfiltering.m:250
                    ix_1D_filter=copy(ix_y)
# Trainmatlab.v.0/bandfiltering.m:251
                    clear('outputstr')
                    clear('new_linestr')
                    clear('kk')
                    clear('ix_x')
                    clear('ix_y')
                else:
                    fprintf(cat('Both dataset appears as limited for band filtering. \\n'))
                    fprintf(cat('2D band filtering is performed, but check the following bands: \\n'))
                    new_linestr=repmat('\\n',length(ix_y),1)
# Trainmatlab.v.0/bandfiltering.m:257
                    outputstr=matlabarray(cat(num2str(spatial_bands[ix_y,:]),new_linestr))
# Trainmatlab.v.0/bandfiltering.m:258
                    for kk in arange(1,size(outputstr,1)).reshape(-1):
                        fprintf(outputstr[kk,:])
                    # setting the variables for the 1D filtering
                    filter_1D_Y=0
# Trainmatlab.v.0/bandfiltering.m:264
                    filter_1D_X=0
# Trainmatlab.v.0/bandfiltering.m:265
                    ix_1D_filter=matlabarray([])
# Trainmatlab.v.0/bandfiltering.m:266
                    clear('outputstr')
                    clear('new_linestr')
                    clear('kk')
                    clear('ix_x')
                    clear('ix_y')
        else:
            filter_1D_Y=0
# Trainmatlab.v.0/bandfiltering.m:270
            filter_1D_X=0
# Trainmatlab.v.0/bandfiltering.m:271
            ix_1D_filter=matlabarray([])
# Trainmatlab.v.0/bandfiltering.m:272
        if plot_figures == 1:
            data_original_image=z_grid[:,:,n_plot_dataset]
# Trainmatlab.v.0/bandfiltering.m:277
        # mirror the edges of the grid to reduce filter effects at the edges
    # get the maximum size of the spatial filters
        if mirror_flag == 1:
            fprintf('Perform mirroring to reduce filtering effects on edges \\n')
            fprintf('By half the maximum filter length at each edge. \\n')
            # maximum spatial wavelength
            max_band=max(max(spatial_bands))
# Trainmatlab.v.0/bandfiltering.m:288
            if max_band == inf:
                max_band=100000
# Trainmatlab.v.0/bandfiltering.m:290
            n_mirror_x=ceil(dot(max_band / x_res,1.5))
# Trainmatlab.v.0/bandfiltering.m:292
            n_mirror_y=ceil(dot(max_band / y_res,1.5))
# Trainmatlab.v.0/bandfiltering.m:293
            for k in arange(1,n_datasets).reshape(-1):
                # padding the grid symmetric
                z_grid_new[:,:,k]=padarray(z_grid[:,:,k],cat(n_mirror_y,n_mirror_x),'symmetric')
# Trainmatlab.v.0/bandfiltering.m:297
                if plot_figures == 1 and k == n_plot_dataset:
                    h1=figure('name','Data symmetric padded for largest filter')
# Trainmatlab.v.0/bandfiltering.m:300
                    imagesc(z_grid_new[:,:,k])
                    axis('equal')
                    axis('tight')
                    # saving of the figure when requested
                    if save_fig == 1:
                        fig_save_name=matlabarray(cat(save_folder_str,filesep,'original_data_mirrored.eps'))
# Trainmatlab.v.0/bandfiltering.m:307
                        set(h1,'PaperPositionMode','auto')
                        print_(h1,'-depsc','-r150',fig_save_name)
                        clear('fig_save_name')
                        close_(h1)
                    clear('h1')
            clear('z_grid')
            z_grid=copy(z_grid_new)
# Trainmatlab.v.0/bandfiltering.m:317
        else:
            fprintf('No mirroring performed. Filter artifacts will become more persistent for larger wavelengths! \\n')
        # size of the dataset
        data_rows=size(z_grid,1)
# Trainmatlab.v.0/bandfiltering.m:324
        data_columns=size(z_grid,2)
# Trainmatlab.v.0/bandfiltering.m:325
        fs_rows=1 / y_res
# Trainmatlab.v.0/bandfiltering.m:328
        fs_columns=1 / x_res
# Trainmatlab.v.0/bandfiltering.m:329
        # rows and columns of the data such they are a power of 2
    # this will speed up the fft and will autmoatically padd 
    # the data matrix with zeros where needed
        data_rows_new=2.0 ** nextpow2(data_rows)
# Trainmatlab.v.0/bandfiltering.m:334
        data_columns_new=2.0 ** nextpow2(data_columns)
# Trainmatlab.v.0/bandfiltering.m:335
        if plot_figures == 1:
            if mirror_flag == 1:
                # computation of the axis extremes based on the resolution given
                X_lims_fig=matlabarray(cat(0,dot(data_columns_or,x_res)))
# Trainmatlab.v.0/bandfiltering.m:340
                Y_lims_fig=matlabarray(cat(0,dot(data_rows_or,y_res)))
# Trainmatlab.v.0/bandfiltering.m:341
            else:
                X_lims_fig=matlabarray(cat(0,dot(data_columns,x_res)))
# Trainmatlab.v.0/bandfiltering.m:343
                Y_lims_fig=matlabarray(cat(0,dot(data_rows,y_res)))
# Trainmatlab.v.0/bandfiltering.m:344
            # computation of the axis extremes based on the resolution given 
        # Asummed to be symmetric padded. In case no padding is done, this will
        # be equal to the orginal dataset
            X_lims_fig_syix_1D_filterm=matlabarray(cat(0,dot(data_columns,x_res)))
# Trainmatlab.v.0/bandfiltering.m:349
            Y_lims_fig_sym=matlabarray(cat(0,dot(data_rows,y_res)))
# Trainmatlab.v.0/bandfiltering.m:350
        # Loop over each dataset. Invert to the freq domain once and reinvert for
    # each bandfilter. i.e. There will be a loop over the different
    # bandfilters. For each dataset the data is being saved in a matfile.
        for k in arange(1,n_datasets).reshape(-1):
            if k == n_plot_dataset and plot_figures == 1:
                plot_fig_flag=1
# Trainmatlab.v.0/bandfiltering.m:359
            else:
                plot_fig_flag=0
# Trainmatlab.v.0/bandfiltering.m:361
            fprintf(cat('Progress: ',num2str(k),'/',num2str(n_datasets),' done \\n'))
            # when chosen visualise the dataset
            if plot_fig_flag == 1:
                h1=figure('name','Original image')
# Trainmatlab.v.0/bandfiltering.m:367
                imagesc(X_lims_fig,Y_lims_fig,data_original_image)
                cc=copy(colorbar)
# Trainmatlab.v.0/bandfiltering.m:369
                axis('xy')
                axis('equal')
                axis('tight')
                set(gca,'fontsize',fontsize)
                xlabel('Distance [m]','fontsize',fontsize)
                ylabel('Distance [m]','fontsize',fontsize)
                title('Original image','fontsize',fontsize)
                colorlimits=get(cc,'YLim')
# Trainmatlab.v.0/bandfiltering.m:377
                if save_fig == 1:
                    fig_save_name=matlabarray(cat(save_folder_str,filesep,'input.eps'))
# Trainmatlab.v.0/bandfiltering.m:381
                    set(h1,'PaperPositionMode','auto')
                    print_(h1,'-depsc','-r150',fig_save_name)
                    clear('fig_save_name')
                    close_(h1)
                clear('h1')
            # converting to the frequency domain by FFT
            data_freq_complex=fft2(z_grid[:,:,k],data_rows_new,data_columns_new)
# Trainmatlab.v.0/bandfiltering.m:393
            # matlab shifts with 1 pixel off for even number columns and rows
            data_freq_complex=fftshift(data_freq_complex)
# Trainmatlab.v.0/bandfiltering.m:397
            data_freq_complex_new=matlabarray(cat(data_freq_complex,data_freq_complex[:,1]))
# Trainmatlab.v.0/bandfiltering.m:398
            data_freq_complex_new=matlabarray(cat([data_freq_complex_new],[data_freq_complex_new[1,:]]))
# Trainmatlab.v.0/bandfiltering.m:399
            clear('data_freq_complex')
            # Frequency domain: sampling resolution follows from the Nyquist requency (spampling freq/samples)
        # freq resolution of the bins in the freq domain
            fs_rows=dot(1 / data_rows_new,1) / y_res
# Trainmatlab.v.0/bandfiltering.m:404
            fs_columns=dot(1 / data_columns_new,1) / x_res
# Trainmatlab.v.0/bandfiltering.m:405
            freq_rows_fig_vector=multiply(cat(arange(- (data_rows_new - 1) / 2 - 0.5,(data_rows_new - 1) / 2 + 0.5,1)),fs_rows)
# Trainmatlab.v.0/bandfiltering.m:408
            freq_columns_fig_vector=multiply(cat(arange(- (data_columns_new - 1) / 2 - 0.5,(data_columns_new - 1) / 2 + 0.5,1)),fs_columns)
# Trainmatlab.v.0/bandfiltering.m:409
            if plot_fig_flag == 1 and check_flag == 1:
                figure('name','Spectrum centralised around zero freq')
                imagesc(freq_columns_fig_vector,freq_rows_fig_vector,abs(data_freq_complex_new))
                xlabel('Xfreq [1/m]','fontsize',fontsize)
                ylabel('Yfreq [1/m]','fontsize',fontsize)
                title('Spectrum centralised around zero freq','fontsize',fontsize)
                colorbar
                set(gca,'fontsize',fontsize)
                axis('equal')
                axis('tight')
                figure('name','Phase centralised around zero freq')
                imagesc(freq_columns_fig_vector,freq_rows_fig_vector,angle(data_freq_complex_new))
                xlabel('Xfreq [1/m]','fontsize',fontsize)
                ylabel('Yfreq [1/m]','fontsize',fontsize)
                title('Phase centralised around zero freq','fontsize',fontsize)
                colorbar
                set(gca,'fontsize',fontsize)
                axis('equal')
                axis('tight')
            ## Computing the grid of frequencies
            freq_rows_fig_matrix=repmat(freq_rows_fig_vector.T,1,data_columns_new + 1)
# Trainmatlab.v.0/bandfiltering.m:436
            freq_columns_fig_matrix=repmat(freq_columns_fig_vector,data_rows_new + 1,1)
# Trainmatlab.v.0/bandfiltering.m:437
            if filter_1D_X == 1:
                # 1D X-direction filter
                freq_fig_matrix_1D=copy(freq_columns_fig_matrix)
# Trainmatlab.v.0/bandfiltering.m:441
                if plot_fig_flag == 1 and check_flag == 1:
                    figure('name','Frequency grid 1D X-direction filter')
                    imagesc(freq_fig_matrix_1D)
                    xlabel('X','fontsize',fontsize)
                    ylabel('Y','fontsize',fontsize)
                    cc=copy(colorbar)
# Trainmatlab.v.0/bandfiltering.m:447
                    set(gca,'fontsize',fontsize)
                    xlabel(cc,'Freq [1/m]','fontsize',fontsize)
            else:
                if filter_1D_Y == 1:
                    # 1D Y-direction filter
                    freq_fig_matrix_1D=copy(freq_rows_fig_matrix)
# Trainmatlab.v.0/bandfiltering.m:453
                    if plot_fig_flag == 1 and check_flag == 1:
                        figure('name','Frequency grid 1D Y-direction filter')
                        imagesc(freq_fig_matrix_1D)
                        xlabel('X','fontsize',fontsize)
                        ylabel('Y','fontsize',fontsize)
                        cc=copy(colorbar)
# Trainmatlab.v.0/bandfiltering.m:459
                        set(gca,'fontsize',fontsize)
                        xlabel(cc,'Freq [1/m]','fontsize',fontsize)
            # 2D filter
            freq_fig_matrix_2D=sqrt(freq_rows_fig_matrix ** 2 + freq_columns_fig_matrix ** 2)
# Trainmatlab.v.0/bandfiltering.m:465
            if plot_fig_flag == 1 and check_flag == 1:
                figure('name','Frequency grid')
                imagesc(freq_fig_matrix_2D)
                xlabel('X','fontsize',fontsize)
                ylabel('Y','fontsize',fontsize)
                cc=copy(colorbar)
# Trainmatlab.v.0/bandfiltering.m:471
                set(gca,'fontsize',fontsize)
                xlabel(cc,'Freq [1/m]','fontsize',fontsize)
            ## Loop over the different bandfilters
        # initialisation of the output data_band variable
        # This is after the symmetric padding has been removed again.
            data_band_out=NaN(cat(data_rows_or,data_columns_or,n_band_filters))
# Trainmatlab.v.0/bandfiltering.m:480
            dimension_filter=NaN(cat(n_band_filters,1))
# Trainmatlab.v.0/bandfiltering.m:481
            for kk in arange(1,n_band_filters).reshape(-1):
                # output to the screen
                fprintf(cat('Spatial bandfilter: ',num2str(spatial_bands[kk,1]),'\\t - ',num2str(spatial_bands[kk,2]),' \\t m \\t'))
                # convert spatial wavelength band to spatial frequency band
                f_band=1.0 / sort(spatial_bands[kk,:])
# Trainmatlab.v.0/bandfiltering.m:487
                # Checking if the band filter is set as 1D or 2D filter
                filter_1D=find(kk == ix_1D_filter)
# Trainmatlab.v.0/bandfiltering.m:491
                if isempty(filter_1D) != 1:
                    # do 1D filtering
                # computing the function of the bandfilter
                    H_low=1.0 / (1 + (freq_fig_matrix_1D / f_band[1]) ** (dot(2,n_degree_butterworth)))
# Trainmatlab.v.0/bandfiltering.m:495
                    H_high=1.0 / (1 + (freq_fig_matrix_1D / f_band[2]) ** (dot(2,n_degree_butterworth)))
# Trainmatlab.v.0/bandfiltering.m:496
                    dimension_filter[kk]=1
# Trainmatlab.v.0/bandfiltering.m:497
                    fprintf(cat('(1D filter)\\n'))
                else:
                    # do 2D filtering
                # computing the function of the bandfilter
                    H_low=1.0 / (1 + (freq_fig_matrix_2D / f_band[1]) ** (dot(2,n_degree_butterworth)))
# Trainmatlab.v.0/bandfiltering.m:502
                    H_high=1.0 / (1 + (freq_fig_matrix_2D / f_band[2]) ** (dot(2,n_degree_butterworth)))
# Trainmatlab.v.0/bandfiltering.m:503
                    dimension_filter[kk]=2
# Trainmatlab.v.0/bandfiltering.m:504
                    fprintf(cat('(2D filter)\\n'))
                # Correct for the case of a filter having inf in its range
                ix_center_spectrum=(size(H_high) - 1) / 2 + 1
# Trainmatlab.v.0/bandfiltering.m:509
                if isnan(H_high[ix_center_spectrum[1],ix_center_spectrum[2]]):
                    H_high[ix_center_spectrum[1],ix_center_spectrum[2]]=0
# Trainmatlab.v.0/bandfiltering.m:511
                if isnan(H_low[ix_center_spectrum[1],ix_center_spectrum[2]]):
                    H_low[ix_center_spectrum[1],ix_center_spectrum[2]]=0
# Trainmatlab.v.0/bandfiltering.m:514
                # Computing the band pass filter
                H_Butterworth=(H_low - H_high)
# Trainmatlab.v.0/bandfiltering.m:517
                H_Butterworth_norm=H_Butterworth / max(max(H_Butterworth))
# Trainmatlab.v.0/bandfiltering.m:518
                if plot_fig_flag == 1:
                    # plotting the filter around zero for the rows
                    h1=figure('name','Rows freq filter')
# Trainmatlab.v.0/bandfiltering.m:523
                    subplot(4,1,1)
                    plot(freq_rows_fig_vector,H_low[:,ix_center_spectrum[2]],'b.-')
                    ylim(cat(0,1))
                    title(cat('freq : ',num2str(f_band[1])))
                    subplot(4,1,2)
                    plot(freq_rows_fig_vector,H_high[:,ix_center_spectrum[2]],'b.-')
                    ylim(cat(0,1))
                    title(cat('freq : ',num2str(f_band[2])))
                    subplot(4,1,3)
                    plot(freq_rows_fig_vector,H_Butterworth[:,ix_center_spectrum[2]],'b.-')
                    ylim(cat(0,1))
                    title(cat('Band freq'))
                    subplot(4,1,4)
                    plot(freq_rows_fig_vector,H_Butterworth_norm[:,ix_center_spectrum[2]],'b.-')
                    ylim(cat(0,1))
                    title(cat('Norm band freq'))
                    # saving of the figure when requested
                    if save_fig == 1:
                        fig_save_name=matlabarray(cat(save_folder_str,filesep,'bandfilter_',num2str(spatial_bands[kk,1]),'_',num2str(spatial_bands[kk,2]),'m.eps'))
# Trainmatlab.v.0/bandfiltering.m:543
                        set(h1,'PaperPositionMode','auto')
                        print_(h1,'-depsc','-r150',fig_save_name)
                        clear('fig_save_name')
                        close_(h1)
                    clear('h1')
                if norm_filter_flag == 1:
                    H_Butterworth=copy(H_Butterworth_norm)
# Trainmatlab.v.0/bandfiltering.m:554
                # multiplying filter in frequency domain.
            # data_freq_complex_new = real(data_freq_complex_new).*H_Butterworth+1i.*angle(data_freq_complex_new);
                data_freq_complex_new_band=multiply(data_freq_complex_new,H_Butterworth)
# Trainmatlab.v.0/bandfiltering.m:559
                if plot_fig_flag == 1 and check_flag == 1:
                    figure('name','New spectrum centralised around zero freq')
                    imagesc(freq_columns_fig_vector,freq_rows_fig_vector,abs(data_freq_complex_new_band))
                    xlabel('Xfreq [1/m]','fontsize',fontsize)
                    ylabel('Yfreq [1/m]','fontsize',fontsize)
                    title('Spectrum centralised around zero freq','fontsize',fontsize)
                    colorbar
                    set(gca,'fontsize',fontsize)
                    axis('equal')
                    axis('tight')
                    figure('name','New phase centralised around zero freq')
                    imagesc(freq_columns_fig_vector,freq_rows_fig_vector,angle(data_freq_complex_new_band))
                    xlabel('Xfreq [1/m]','fontsize',fontsize)
                    ylabel('Yfreq [1/m]','fontsize',fontsize)
                    title('Phase centralised around zero freq','fontsize',fontsize)
                    colorbar
                    set(gca,'fontsize',fontsize)
                    axis('equal')
                    axis('tight')
                # Shifting the spectrum such the center frequency is at the top left corner
                data_freq_complex_new_band[:,end()]=[]
# Trainmatlab.v.0/bandfiltering.m:583
                data_freq_complex_new_band[end(),:]=[]
# Trainmatlab.v.0/bandfiltering.m:584
                data_freq_complex_new_band=ifftshift(data_freq_complex_new_band)
# Trainmatlab.v.0/bandfiltering.m:585
                data_band=ifft2(data_freq_complex_new_band,data_rows_new,data_columns_new)
# Trainmatlab.v.0/bandfiltering.m:588
                if data_rows - data_rows_new < 0:
                    data_band[data_rows + 1:end(),:]=[]
# Trainmatlab.v.0/bandfiltering.m:592
                if data_columns - data_columns_new < 0:
                    data_band[:,data_columns + 1:end()]=[]
# Trainmatlab.v.0/bandfiltering.m:595
                # Keeping only the real part
                data_band=real(data_band)
# Trainmatlab.v.0/bandfiltering.m:599
                if mirror_flag == 1:
                    data_band_or=copy(data_band)
# Trainmatlab.v.0/bandfiltering.m:603
                    data_band[cat(arange(1,n_mirror_y)),:]=[]
# Trainmatlab.v.0/bandfiltering.m:604
                    data_band[cat(arange(end() - n_mirror_y + 1,end())),:]=[]
# Trainmatlab.v.0/bandfiltering.m:605
                    data_band[:,cat(arange(1,n_mirror_x))]=[]
# Trainmatlab.v.0/bandfiltering.m:606
                    data_band[:,cat(arange(end() - n_mirror_x + 1,end()))]=[]
# Trainmatlab.v.0/bandfiltering.m:607
                # plotting the final results when requested
                if plot_fig_flag == 1:
                    h1=figure('name','output image')
# Trainmatlab.v.0/bandfiltering.m:613
                    imagesc(X_lims_fig,Y_lims_fig,data_band)
                    # limit the colorbar to 95# bounds
                    data_sorted=sort(reshape(data_band,[],1))
# Trainmatlab.v.0/bandfiltering.m:616
                    ix=round(multiply(cat(0.025,0.975),length(data_sorted)))
# Trainmatlab.v.0/bandfiltering.m:617
                    colorlimits=matlabarray(cat(data_sorted[ix]))
# Trainmatlab.v.0/bandfiltering.m:618
                    caxis(colorlimits)
                    colorbar
                    set(gca,'fontsize',fontsize)
                    xlabel('Distance [m]','fontsize',fontsize)
                    ylabel('Distance [m]','fontsize',fontsize)
                    title(cat('Band filter: ',num2str(spatial_bands[kk,1]),' -- ',num2str(spatial_bands[kk,2]),' m'),'fontsize',fontsize)
                    axis('equal')
                    axis('tight')
                    axis('xy')
                    # saving of the figure when requested
                    if save_fig == 1:
                        fig_save_name=matlabarray(cat(save_folder_str,filesep,'output_',num2str(spatial_bands[kk,1]),'_',num2str(spatial_bands[kk,2]),'m.eps'))
# Trainmatlab.v.0/bandfiltering.m:631
                        set(h1,'PaperPositionMode','auto')
                        print_(h1,'-depsc','-r150',fig_save_name)
                        clear('fig_save_name')
                        close_(h1)
                    clear('h1')
                # Storing the output data
                data_band_out[:,:,kk]=data_band
# Trainmatlab.v.0/bandfiltering.m:644
                clear('data_band')
            if k <= h_ifg_number and h_ifg_number != 1:
                # thse are interferograms
                save_name=matlabarray(cat('bandfilter_regular_hgt_ifg_',num2str(k),'.mat'))
# Trainmatlab.v.0/bandfiltering.m:652
            else:
                if k <= h_ifg_number and h_ifg_number == 1:
                    # these are the heights
                    save_name='bandfilter_regular_hgt.mat'
# Trainmatlab.v.0/bandfiltering.m:655
                else:
                    # thse are interferograms
                    save_name=matlabarray(cat('bandfilter_regular_ifg_',num2str(k - h_ifg_number),'.mat'))
# Trainmatlab.v.0/bandfiltering.m:658
            # saving the bandfiltered data for eacht dataset seperately
            save(cat(save_path,filesep,save_name),'data_band_out','x_res','y_res','spatial_bands','n_degree_butterworth','norm_filter_flag','dimension_filter')
            clear('data_band_out')
    