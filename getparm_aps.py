# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/getparm_aps.m

    
@function
def getparm_aps(parmname=None,printflag=None,*args,**kwargs):
    varargin = getparm_aps.varargin
    nargin = getparm_aps.nargin

    #GETPARM_APS get parameter value from parms_lwts.mat
# GETPARM_APS(PARMNAME) 
# Only enough characters of PARMNAME to make it unique need be typed
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # Based on script by Andy Hooper (StaMPS)
# Modified for the aps toolbox by David Bekaert - University of Leeds - 2013
# This script allows for non-StaMPS structured processed data.
    
    parms_default_aps
    if nargin < 2:
        printflag=0
# Trainmatlab.v.0/getparm_aps.m:30
    
    parmfile='parms_aps.mat'
# Trainmatlab.v.0/getparm_aps.m:33
    if exist(cat('.',filesep,parmfile),'file'):
        parms=load(parmfile)
# Trainmatlab.v.0/getparm_aps.m:36
    else:
        if exist(cat('..',filesep,parmfile),'file'):
            parmfile=matlabarray(cat('..',filesep,parmfile))
# Trainmatlab.v.0/getparm_aps.m:38
            parms=load(parmfile)
# Trainmatlab.v.0/getparm_aps.m:39
        else:
            error(cat(parmfile,' not found'))
    
    if nargin < 1:
        disp(orderfields(parms))
    else:
        parmnum=strmatch(parmname,fieldnames(parms))
# Trainmatlab.v.0/getparm_aps.m:48
        if length(parmnum) > 1:
            error(cat('Parameter ',parmname,'* is not unique'))
        else:
            if isempty(parmnum):
                parmname=matlabarray([])
# Trainmatlab.v.0/getparm_aps.m:52
                value=matlabarray([])
# Trainmatlab.v.0/getparm_aps.m:53
            else:
                parmnames=fieldnames(parms)
# Trainmatlab.v.0/getparm_aps.m:55
                parmname=parmnames[parmnum]
# Trainmatlab.v.0/getparm_aps.m:56
                value=getfield(parms,parmname)
# Trainmatlab.v.0/getparm_aps.m:57
        if printflag != 0:
            if isnumeric(value):
                fprintf(cat('   PARM: %s=',repmat('%g ',1,200)),parmname,value)
                fprintf('\\n')
            else:
                fprintf('   PARM: %s=\'%s\'\\n',parmname,value)
    
    
    