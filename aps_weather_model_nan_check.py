# Autogenerated with SMOP 
from smop.core import *
# matlab/aps_weather_model_nan_check.m

    
@function
def aps_weather_model_nan_check(Temp=None,e=None,Geopot=None,P=None,longrid=None,latgrid=None,*args,**kwargs):
    varargin = aps_weather_model_nan_check.varargin
    nargin = aps_weather_model_nan_check.nargin

    # Function which wills in the gaps in the weather model data with the
# neirest neighbor value, or from the level above.
    
    #     Copyright (C) 2016  Bekaert David 
#     davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # By David Bekaert 
# April 2016
    
    # getting the pressure
    Pressure_level=squeeze(P[1,1,:])
# matlab/aps_weather_model_nan_check.m:27
    lon=double(longrid[:,:,1])
# matlab/aps_weather_model_nan_check.m:28
    lat=double(latgrid[:,:,1])
# matlab/aps_weather_model_nan_check.m:29
    # step_levels
# define it in such a way we loop from the upper atmopshere to the lower atmosphere
    step_level=cat(arange(length(Pressure_level),1,- 1)).T
# matlab/aps_weather_model_nan_check.m:33
    if Pressure_level[1] < Pressure_level[end()]:
        step_level=cat(arange(1,length(Pressure_level))).T
# matlab/aps_weather_model_nan_check.m:35
    
    # looping though and use TEMP as inital check for nan
    n_pixels=dot(size(P,1),size(P,2))
# matlab/aps_weather_model_nan_check.m:39
    for k in arange(1,length(Pressure_level)).reshape(-1):
        ix_nan=isnan(Temp[:,:,step_level[k]])
# matlab/aps_weather_model_nan_check.m:41
        n_nan=sum(sum(ix_nan))
# matlab/aps_weather_model_nan_check.m:42
        if n_nan < n_pixels - 3:
            temp_data=Temp[:,:,step_level[k]]
# matlab/aps_weather_model_nan_check.m:46
            Temp[:,:,step_level[k]]=griddata(reshape(lon[logical_not(ix_nan)],[],1),reshape(lat[logical_not(ix_nan)],[],1),double(reshape(temp_data[logical_not(ix_nan)],[],1)),lon,lat,'nearest')
# matlab/aps_weather_model_nan_check.m:47
            temp_data=e[:,:,step_level[k]]
# matlab/aps_weather_model_nan_check.m:49
            e[:,:,step_level[k]]=griddata(reshape(lon[logical_not(ix_nan)],[],1),reshape(lat[logical_not(ix_nan)],[],1),double(reshape(temp_data[logical_not(ix_nan)],[],1)),lon,lat,'nearest')
# matlab/aps_weather_model_nan_check.m:50
        else:
            if n_nan == n_pixels:
                if k == 1:
                    error('Weird seems like the top of the atmopshere has no data')
                Temp[:,:,step_level[k]]=Temp[:,:,step_level[k - 1]]
# matlab/aps_weather_model_nan_check.m:57
                e[:,:,step_level[k]]=e[:,:,step_level[k - 1]]
# matlab/aps_weather_model_nan_check.m:58
            else:
                Temp[:,:,step_level[k]]=nanmean(nanmean(Temp[:,:,step_level[k]]))
# matlab/aps_weather_model_nan_check.m:60
                e[:,:,step_level[k]]=nanmean(nanmean(e[:,:,step_level[k]]))
# matlab/aps_weather_model_nan_check.m:61
    