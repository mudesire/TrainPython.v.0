# Autogenerated with SMOP 
from smop.core import *
# matlab/w_test_mean.m

    
@function
def w_test_mean(y=None,y_std=None,alpha=None,*args,**kwargs):
    varargin = w_test_mean.varargin
    nargin = w_test_mean.nargin

    # [y_mean,y,y_std,obs_kept] = w_test_mean(y,y_std,alpha)
# Function which performs an outlier detection for the mean of a set of
# observations y and corresponding standard deviations y_std. The rate of
# rejection is determined by alpha. Alpha represents the probability that a
# good observations was considered as an outlier, i.e. alpha=1 all is rejected.
    
    # inputs: 
# y:        Observations, this needs to be a column or row vector of length n.
# y_std:    standard deviations of the observations. Needs to be a column
#           or row vector with length n. By default equal weighting is
#           assumed.
# alpha:    The probability that a point while good was regarded as an
#           outlier. When 1 all will be rejected, the smaller a less
#           outlier rejection criteria is set.
# 
# outputs:
# y_mean:   The weighted mean after rejection of the outliers.
# obs_kept: Vector with the position of those observations kept
    
    #     w_test_mean.m
#     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    
    # By David Bekaert - February 2013
# PhD student - University of Leeds
    
    if nargin < 1:
        pass
    
    if size(y,2) > 1:
        y=y.T
# matlab/w_test_mean.m:48
        if size(y,2) > 1:
            error('myApp:argChk',cat('number of observastions y and corresponding standard deviation are inconsistent...\\n'))
    
    if nargin < 2 or isempty(y_std):
        y_std=ones(size(y))
# matlab/w_test_mean.m:54
    
    if nargin < 3 or isempty(alpha):
        alpha=0.05
# matlab/w_test_mean.m:57
    
    # computation of the rejection threshold k_alpha_thres. 
# this is based on a standard normal distribution with level of
# significance alpha. alpha represents the probability that a point 
# is regarded as outlier while in reality it was not.
    k_alpha_thres=norminv(1 - alpha,0,1)
# matlab/w_test_mean.m:65
    # a variable to trace which observations were rejected
    obs_kept=arange(1,length(y))
# matlab/w_test_mean.m:70
    continue_reject=1
# matlab/w_test_mean.m:72
    while continue_reject:

        # Total number of observations to start with
        n_obs=length(y)
# matlab/w_test_mean.m:75
        Qyy=diag(y_std) ** 2
# matlab/w_test_mean.m:78
        A=ones(cat(n_obs,1))
# matlab/w_test_mean.m:81
        Qyy_inv=inv(Qyy)
# matlab/w_test_mean.m:84
        x_est=dot(dot(numpy.linalg.solve((dot(dot(A.T,Qyy_inv),A)),A.T),Qyy_inv),y)
# matlab/w_test_mean.m:87
        y_est=dot(A,x_est)
# matlab/w_test_mean.m:90
        e_est=y - y_est
# matlab/w_test_mean.m:91
        Qx_estx_est=inv(dot(dot(A.T,Qyy_inv),A))
# matlab/w_test_mean.m:94
        Qy_esty_est=dot(dot(A,Qx_estx_est),A.T)
# matlab/w_test_mean.m:95
        Qe_este_est=Qyy - Qy_esty_est
# matlab/w_test_mean.m:96
        # computation of the weights
        w=NaN(cat(n_obs,1))
# matlab/w_test_mean.m:99
        for k in arange(1,n_obs).reshape(-1):
            # setting the cy colum vector
            cy=zeros(cat(n_obs,1))
# matlab/w_test_mean.m:102
            cy[k]=1
# matlab/w_test_mean.m:103
            w[k]=(dot(dot(cy.T,Qyy_inv),e_est)) / (sqrt(dot(dot(dot(dot(cy.T,Qyy_inv),Qe_este_est),Qyy_inv),cy)))
# matlab/w_test_mean.m:106
            clear('cy')
        # take the absolute w-weight
        w=abs(w)
# matlab/w_test_mean.m:112
        ix=find(max(w) == w)
# matlab/w_test_mean.m:115
        if length(ix) > 1:
            ix=ix[1]
# matlab/w_test_mean.m:117
        # Check if the hypothesis is satisfield
        if w[ix] > sqrt(k_alpha_thres):
            # the test rejected all observations. The variance model is likely
        # to be incorect
            if n_obs == 1:
                continue_reject=0
# matlab/w_test_mean.m:128
            else:
                # removing the identified observation as it appears and outlier
                y[ix]=[]
# matlab/w_test_mean.m:131
                y_std[ix,:]=[]
# matlab/w_test_mean.m:132
                obs_kept[ix]=[]
# matlab/w_test_mean.m:133
                clear('ix')
        else:
            clear('ix')
            # no more outliers found, end the outlier rejection
            continue_reject=0
# matlab/w_test_mean.m:139

    
    # Once all outlier have been rejected y_est and y_est_std give the left
# over dataset. The weighted mean is represented by x_est
    y_mean=copy(x_est)
# matlab/w_test_mean.m:146
    # The standard deviation of the weighted mean is contained in Qx_estx_est
    y_std_mean=sqrt(Qx_estx_est)
# matlab/w_test_mean.m:148