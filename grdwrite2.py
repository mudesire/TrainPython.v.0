# Autogenerated with SMOP 
from smop.core import *
# matlab/grdwrite2.m

    
@function
def grdwrite2(x=None,y=None,z=None,file=None,*args,**kwargs):
    varargin = grdwrite2.varargin
    nargin = grdwrite2.nargin

    #GRDWRITE2  Write a GMT grid file
    
    # Uses built-in NetCDF capability (MATLAB R2008b or later) to 
# write a COARDS-compliant netCDF grid file
# Duplicates (some) functionality of the program grdwrite (which requires
# compilation as a mexfile-based function on each architecture) using
# Matlab 2008b (and later) built-in NetCDF functionality
# instead of GMT libraries.
    
    # GRDWRITE2(X,Y,Z,'filename') will create a grid file containing the
# data in the matrix Z.  X and Y should be either vectors with
# dimensions that match the size of Z or two-component vectors
# containing the max and min values for each.
    
    # See also GRDREAD2, GRDINFO2
    
    # For more information on GMT grid file formats, see:
# http://www.soest.hawaii.edu/gmt/gmt/doc/gmt/html/GMT_Docs/node70.html
# Details on Matlab's native netCDF capabilities are at:
# http://www.mathworks.com/access/helpdesk/help/techdoc/ref/netcdf.html
    
    # GMT (Generic Mapping Tools, <http://gmt.soest.hawaii.edu>)
# was developed by Paul Wessel and Walter H. F. Smith
    
    # Kelsey Jordahl
# Marymount Manhattan College
# http://marymount.mmm.edu/faculty/kjordahl/software.html
    
    # Time-stamp: <Tue Jul 19 16:28:24 EDT 2011>
    
    # Version 1.1.2, 19-Jul-2011
# Available at MATLAB Central
# <http://www.mathworks.com/matlabcentral/fileexchange/26290-grdwrite2>
    
    if nargin < 4:
        help(mfilename)
        return
    
    # check for appropriate Matlab version (>=7.7)
    V=regexp(version,'[ \\.]','split')
# matlab/grdwrite2.m:42
    if logical_or((str2num(V[1]) < 7),(str2num(V[1]) == logical_and(7,str2num(V[2])) < 7)):
        ver
        error('grdread2: Requires Matlab R2008b or later!')
    
    ncid=netcdf.create(file,'NC_SHARE')
# matlab/grdwrite2.m:48
    if isempty(ncid):
        return
    
    # set descriptive variables
    conv='COARDS/CF-1.0'
# matlab/grdwrite2.m:54
    title=copy(file)
# matlab/grdwrite2.m:55
    history='File written by MATLAB function grdwrite2.m'
# matlab/grdwrite2.m:56
    desc=matlabarray(cat('Created ',datestr(now)))
# matlab/grdwrite2.m:57
    vers='4.x'
# matlab/grdwrite2.m:58
    
    # check X and Y
    if (logical_or(logical_not(isvector(x)),logical_not(isvector(y)))):
        error('X and Y must be vectors!')
    
    if (length(x) != size(z,2)):
        minx=min(x)
# matlab/grdwrite2.m:65
        maxx=max(x)
# matlab/grdwrite2.m:65
        dx=(maxx - minx) / (size(z,2) - 1)
# matlab/grdwrite2.m:66
        x=arange(minx,maxx,dx)
# matlab/grdwrite2.m:67
    
    if (length(y) != size(z,1)):
        miny=min(y)
# matlab/grdwrite2.m:70
        maxy=max(y)
# matlab/grdwrite2.m:70
        dy=(maxy - miny) / (size(z,1) - 1)
# matlab/grdwrite2.m:71
        y=arange(miny,maxy,dy)
# matlab/grdwrite2.m:72
    
    # match Matlab class to NetCDF data type
    if 'single' == class_(z):
        nctype='NC_FLOAT'
# matlab/grdwrite2.m:78
        nanfill=single(NaN)
# matlab/grdwrite2.m:79
    else:
        if 'double' == class_(z):
            nctype='NC_DOUBLE'
# matlab/grdwrite2.m:81
            nanfill=double(NaN)
# matlab/grdwrite2.m:82
        else:
            if 'int8' == class_(z):
                nctype='NC_BYTE'
# matlab/grdwrite2.m:84
                nanfill=intmin(class_(z))
# matlab/grdwrite2.m:85
                disp(cat('Warning: \'No data\' fill value set to ',num2str(nanfill)))
            else:
                if 'int16' == class_(z):
                    nctype='NC_SHORT'
# matlab/grdwrite2.m:88
                    nanfill=intmin(class_(z))
# matlab/grdwrite2.m:89
                    disp(cat('Warning: \'No data\' fill value set to ',num2str(nanfill)))
                else:
                    if 'int32' == class_(z):
                        nctype='NC_INT'
# matlab/grdwrite2.m:92
                        nanfill=intmin(class_(z))
# matlab/grdwrite2.m:93
                        disp(cat('Warning: \'No data\' fill value set to ',num2str(nanfill)))
                    else:
                        error(cat('Don\'t know how to handle data of class \'',class_(z),'\'.  Try converting to a supported data type (int8, int16, int32, single or double).'))
    
    # global
    netcdf.putAtt(ncid,netcdf.getConstant('NC_GLOBAL'),'Conventions',conv)
    netcdf.putAtt(ncid,netcdf.getConstant('NC_GLOBAL'),'title',title)
    netcdf.putAtt(ncid,netcdf.getConstant('NC_GLOBAL'),'history',history)
    netcdf.putAtt(ncid,netcdf.getConstant('NC_GLOBAL'),'description',desc)
    netcdf.putAtt(ncid,netcdf.getConstant('NC_GLOBAL'),'GMT_version',vers)
    # X
    dimid=netcdf.defDim(ncid,'x',length(x))
# matlab/grdwrite2.m:106
    varid=netcdf.defVar(ncid,'x','double',dimid)
# matlab/grdwrite2.m:107
    netcdf.putAtt(ncid,varid,'long_name','x')
    netcdf.putAtt(ncid,varid,'actual_range',cat(min(x),max(x)))
    netcdf.endDef(ncid)
    netcdf.putVar(ncid,varid,x)
    # Y
    netcdf.reDef(ncid)
    dimid=netcdf.defDim(ncid,'y',length(y))
# matlab/grdwrite2.m:114
    varid=netcdf.defVar(ncid,'y','double',dimid)
# matlab/grdwrite2.m:115
    netcdf.putAtt(ncid,varid,'long_name','y')
    netcdf.putAtt(ncid,varid,'actual_range',cat(min(y),max(y)))
    netcdf.endDef(ncid)
    netcdf.putVar(ncid,varid,y)
    # Z
    netcdf.reDef(ncid)
    varid=netcdf.defVar(ncid,'z',nctype,cat(0,1))
# matlab/grdwrite2.m:122
    netcdf.putAtt(ncid,varid,'long_name','z')
    netcdf.putAtt(ncid,varid,'_FillValue',nanfill)
    netcdf.putAtt(ncid,varid,'actual_range',cat(min(ravel(z)),max(ravel(z))))
    netcdf.endDef(ncid)
    netcdf.putVar(ncid,varid,z.T)
    # close file
    netcdf.close(ncid)