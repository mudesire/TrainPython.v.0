# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/grdinfo2.m

    
@function
def grdinfo2(file=None,*args,**kwargs):
    varargin = grdinfo2.varargin
    nargin = grdinfo2.nargin

    #GRDINFO2  Print information about a GMT grdfile (netCDF format, GMT v3 or v4)
    
    # Uses NetCDF libraries to display information about a GMT grid file.
# Duplicates (some) functionality of the program grdinfo (which requires
# compilation as a mexcdf function on each architecture) using
# Matlab 2008b (and later) built-in NetCDF functionality
# instead of GMT libraries.
    
    # GRDINFO2('file.grd') will display information about the GMT grid
# file 'file.grd' in a format similar to the gmt command grdinfo.
    
    # D = GRDINFO('file.grd') will in addition return a vector containing
# (xmin, xmax, ymin, ymax, zmin, zmax, format, xinc, yinc). Format is
# 1 for pixel registration and 0 for grid node registration.
    
    # See also GRDREAD2, GRDWRITE2
    
    # This program is expected to work on any GMT netCDF format file,
# but it does not duplicate all the functionality of GMT's I/O
# library, so it will not work on all files supported by GMT.
# In particular, it will fail on binary format grdfiles.
# It is the responsibility of the user to determine whether this
# program is appropriate for any given task.
    
    # For more information on GMT grid file formats, see:
# http://www.soest.hawaii.edu/gmt/gmt/doc/gmt/html/GMT_Docs/node70.html
# Details on Matlab's native netCDF capabilities are at:
# http://www.mathworks.com/access/helpdesk/help/techdoc/ref/netcdf.html
    
    # GMT (Generic Mapping Tools, <http://gmt.soest.hawaii.edu>)
# was developed by Paul Wessel and Walter H. F. Smith
    
    # Kelsey Jordahl
# Marymount Manhattan College
# http://marymount.mmm.edu/faculty/kjordahl/software.html
    
    # Time-stamp: <Wed Jan  6 16:26:46 EST 2010>
    
    # Version 1.1.1, 6-Jan-2010
# first released on MATLAB Central
# modification
# DB 	05/2014 	Suppress command window output
    
    if nargin < 1:
        help(mfilename)
        return d
    
    # check for appropriate Matlab version (>=7.7)
    V=regexp(version,'[ \\.]','split')
# Trainmatlab.v.0/grdinfo2.m:51
    if logical_or((str2num(V[1]) < 7),(str2num(V[1]) == logical_and(7,str2num(V[2])) < 7)):
        ver
        error('grdread2: Requires Matlab R2008b or later!')
    
    ncid=netcdf.open(file,'NC_NOWRITE')
# Trainmatlab.v.0/grdinfo2.m:57
    if isempty(ncid):
        return d
    
    ndims,nvars,ngatts,unlimdimid=netcdf.inq(ncid,nargout=4)
# Trainmatlab.v.0/grdinfo2.m:62
    if (nvars == 3):
        #  for attnum=0:(ngatts-1),
        title=getatt_clean(ncid,'title')
# Trainmatlab.v.0/grdinfo2.m:66
        conv=getatt_clean(ncid,'Conventions')
# Trainmatlab.v.0/grdinfo2.m:67
        pixel=getatt_clean(ncid,'node_offset')
# Trainmatlab.v.0/grdinfo2.m:68
        if isempty(pixel):
            pixel=0
# Trainmatlab.v.0/grdinfo2.m:69
        desc=getatt_clean(ncid,'description')
# Trainmatlab.v.0/grdinfo2.m:70
        command=getatt_clean(ncid,'history')
# Trainmatlab.v.0/grdinfo2.m:71
        vers=getatt_clean(ncid,'GMT_version')
# Trainmatlab.v.0/grdinfo2.m:72
        xname=netcdf.getAtt(ncid,0,'long_name')
# Trainmatlab.v.0/grdinfo2.m:73
        yname=netcdf.getAtt(ncid,1,'long_name')
# Trainmatlab.v.0/grdinfo2.m:74
        zname=netcdf.getAtt(ncid,2,'long_name')
# Trainmatlab.v.0/grdinfo2.m:75
        xrange=netcdf.getAtt(ncid,0,'actual_range')
# Trainmatlab.v.0/grdinfo2.m:76
        yrange=netcdf.getAtt(ncid,1,'actual_range')
# Trainmatlab.v.0/grdinfo2.m:77
        zrange=netcdf.getAtt(ncid,2,'actual_range')
# Trainmatlab.v.0/grdinfo2.m:78
        dimname,nx=netcdf.inqDim(ncid,0,nargout=2)
# Trainmatlab.v.0/grdinfo2.m:79
        dimname,ny=netcdf.inqDim(ncid,1,nargout=2)
# Trainmatlab.v.0/grdinfo2.m:80
    else:
        if (nvars == 6):
            dimname,dimlen=netcdf.inqDim(ncid,1,nargout=2)
# Trainmatlab.v.0/grdinfo2.m:83
            if (dimname == 'xysize'):
                title=getatt_clean(ncid,'title')
# Trainmatlab.v.0/grdinfo2.m:85
                command=getatt_clean(ncid,'source')
# Trainmatlab.v.0/grdinfo2.m:86
                conv=matlabarray([])
# Trainmatlab.v.0/grdinfo2.m:87
                desc=matlabarray([])
# Trainmatlab.v.0/grdinfo2.m:88
                zrange=matlabarray(cat(0,0))
# Trainmatlab.v.0/grdinfo2.m:88
                vers='3.x format file'
# Trainmatlab.v.0/grdinfo2.m:88
                xrange=netcdf.getVar(ncid,0).T
# Trainmatlab.v.0/grdinfo2.m:89
                xname=netcdf.getAtt(ncid,0,'units')
# Trainmatlab.v.0/grdinfo2.m:90
                yrange=netcdf.getVar(ncid,1).T
# Trainmatlab.v.0/grdinfo2.m:91
                yname=netcdf.getAtt(ncid,1,'units')
# Trainmatlab.v.0/grdinfo2.m:92
                zrange=netcdf.getVar(ncid,2).T
# Trainmatlab.v.0/grdinfo2.m:93
                zname=netcdf.getAtt(ncid,2,'units')
# Trainmatlab.v.0/grdinfo2.m:94
                #      z=netcdf.getVar(ncid,5);
                dim=netcdf.getVar(ncid,4).T
# Trainmatlab.v.0/grdinfo2.m:96
                nx=dim[1]
# Trainmatlab.v.0/grdinfo2.m:97
                ny=dim[2]
# Trainmatlab.v.0/grdinfo2.m:97
                zname='z'
# Trainmatlab.v.0/grdinfo2.m:98
                pixel=netcdf.getAtt(ncid,5,'node_offset')
# Trainmatlab.v.0/grdinfo2.m:99
            else:
                error('Apparently not a GMT netCDF grid')
        else:
            error('Wrong number of variables in netCDF file!')
    
    if pixel:
        dx=diff(xrange) / double(nx)
# Trainmatlab.v.0/grdinfo2.m:109
        dy=diff(yrange) / double(ny)
# Trainmatlab.v.0/grdinfo2.m:110
    else:
        dx=diff(xrange) / double(nx - 1)
# Trainmatlab.v.0/grdinfo2.m:112
        dy=diff(yrange) / double(ny - 1)
# Trainmatlab.v.0/grdinfo2.m:113
    
    #disp(['Title: ' title]);
#disp(['Conventions: ' conv]);
#disp(['GMT version: ' vers]);
#disp(['Command: ' command]);
#disp(['Remark: ' desc]);
#if pixel,
#  disp('Pixel node registration used');
#else
#  disp('Gridline node registration used');
#end
#disp(['x_min: ' num2str(xrange(1)) ' x_max: ' num2str(xrange(2)) ...
#                   ' name: ' xname])
#disp(['y_min: ' num2str(yrange(1)) ' y_max: ' num2str(yrange(2)) ...
#                   ' name: ' yname])
#disp(['z_min: ' num2str(zrange(1)) ' z_max: ' num2str(zrange(2)) ...
#                   ' name: ' zname])
    
    if 1 == nargout:
        d=matlabarray(cat(xrange[1],xrange[2],yrange[1],yrange[2],double(zrange[1]),double(zrange[2]),double(pixel),dx,dy))
# Trainmatlab.v.0/grdinfo2.m:136
    
    
@function
def getatt_clean(ncid=None,attname=None,*args,**kwargs):
    varargin = getatt_clean.varargin
    nargin = getatt_clean.nargin

    
    # Call netcdf.getAtt when not sure whether global attribute 'attname' exists.
# Trap error and return empty vector in that case.
    
    eval(cat('val = netcdf.getAtt(ncid,netcdf.getConstant(\'NC_GLOBAL\'),\'',attname,'\');'),'val=[];')