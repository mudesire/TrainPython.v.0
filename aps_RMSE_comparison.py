# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/aps_RMSE_comparison.m

    
@function
def aps_RMSE_comparison(ref_technique=None,other_techniques=None,save_dir_path=None,save_dir_folder=None,units_flag=None,deramp_flag=None,fig_prop=None,*args,**kwargs):
    varargin = aps_RMSE_comparison.varargin
    nargin = aps_RMSE_comparison.nargin

    # Script that computes the RMSE between a reference technique and all the
# other technqiues. Optional is the profile flag, which when 1 will run the
# profiler code as well. Some hardoced values in the RMSE comparision code
# can still be changed in the code like, the percentage threshold of
# minimal common points, a deramping option, a reference option, and as
# last a option to crop out a specific region.
# Both the 'ref_technique' and 'other_techniques' variables are strings with 
# the abbreviated strings of the techniques. To specificy multiple
# techniques for the latter use tyhe & charakter, e.g. 'a_MI+a_eh&a_p'.
    
    # The struct fig_prop can contain ylimits
    
    # NOTE: the interferogram numbers displayed are the number of the
# interferograms kept. Not dropped. So in case of a dropped interferogram
# the number does not need to correspond.
    
    #     Copyright (C) 2016  Bekaert David 
#     davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # By Bekaert David - University of Leeds.
# This approach is used in Bekaert et al., 2014 as comparison approach
# between techniques
    
    
    # modifications
# 09/2014   DB:     Include the option tp call the profiling code directly
# 03/2015   DB:     change reference to black to difference more from the
#                   other methods. Change the plotting for powerlaw
#                   comparison of band.
#                   Make the interferogram plotting optional
# 03/2015   DB:     Include cm option as units. Plot the meris theoretical
#                   accuracy too when using MERIS as reference technique.
# 03/2015   DB:     Change the marker of the reference technqiue to a square
# 03/2015   DB:     Allow input of a matrix too
# 04/2015   DB:     Convert the theoretical accuracy of meris to LOS. 
#                   Difference between RMSE and RMS theoretical accuracy
# 04/2015   DB:     Add option to define the figure properties in advance.
# 02/2016   DB:     Include a fix when showing a single interferogram
#                   Fix for y-axis limits in case the correction is larger
#                   in RMSE. Fix in saving the figures.
# 08/2016   SSS:    compatibility with older matlab version for string splitting
    
    ## USER handles
# directory where the figures need to be saved together with the stats
    save_dir='RMSE_comparison'
# Trainmatlab.v.0/aps_RMSE_comparison.m:61
    save_dir_bands='RMSE_bands'
# Trainmatlab.v.0/aps_RMSE_comparison.m:62
    save_dir_data='RMSE_own_data'
# Trainmatlab.v.0/aps_RMSE_comparison.m:63
    # radar wavelength in m converted to cm
    lambda_=dot(getparm_aps('lambda'),100)
# Trainmatlab.v.0/aps_RMSE_comparison.m:66
    
    # retrieving the look angle
    lookangle=getparm_aps('look_angle')
# Trainmatlab.v.0/aps_RMSE_comparison.m:68
    if logical_and(ischar(lookangle),exist(lookangle,'file')) == 2:
        lookangle=load(lookangle)
# Trainmatlab.v.0/aps_RMSE_comparison.m:70
        lookangle=lookangle.la
# Trainmatlab.v.0/aps_RMSE_comparison.m:71
    
    lookangle=nanmean(lookangle)
# Trainmatlab.v.0/aps_RMSE_comparison.m:73
    
    # meris uncertainty on PWV in cm units
    PWV_meris=1.1 / 10
# Trainmatlab.v.0/aps_RMSE_comparison.m:77
    
    # compute the uncertancy of the MERIS delay for a difference between two
# epochs (reason for sqrt(2)).
    meris_uncertaincy_cm=dot(dot(6.2,PWV_meris),sqrt(2)) / cos(lookangle)
# Trainmatlab.v.0/aps_RMSE_comparison.m:80
    meris_uncertaincy_rad=dot(dot(meris_uncertaincy_cm,4),pi) / lambda_ / cos(lookangle)
# Trainmatlab.v.0/aps_RMSE_comparison.m:81
    # threshold of the minimum percentage of points used to compute RMSE
    perc_threshold=50
# Trainmatlab.v.0/aps_RMSE_comparison.m:85
    # when 1 the reference is set based on the mean of all available points in
# each ifgs.
    reference_flag=1
# Trainmatlab.v.0/aps_RMSE_comparison.m:90
    # when 1 crop out a polygon. This needs to be defined as lonlat variable
    crop_file_path='/nfs/a1/insar/mexico/envisat/track_255/SSE_model/programs/slip_model_code/model_cropout_MC.mat'
# Trainmatlab.v.0/aps_RMSE_comparison.m:93
    crop_out_flag=0
# Trainmatlab.v.0/aps_RMSE_comparison.m:94
    # the reference technique used to compare all the other data to
    if nargin < logical_or(1,isempty(ref_technique)):
        str=''
# Trainmatlab.v.0/aps_RMSE_comparison.m:100
        fprintf(cat('To indicate more use the & symbol.\\n'))
        fprintf(cat('You can alsu use u option or a subtract flag of the u option.\\n'))
        fprintf(cat('For the APS you need to indicate the type of correction using a_l, a_M+a_eh etc flag. \\n'))
        while isempty(str) and isnumeric(str2num(str)) == 1:

            str=input_(cat('What will be the reference technique? (e.g. a_mi+a_eh) \\n\\n'),'s')
# Trainmatlab.v.0/aps_RMSE_comparison.m:107

        ref_technique=copy(str)
# Trainmatlab.v.0/aps_RMSE_comparison.m:109
        clear('str')
    
    if nargin < logical_or(2,isempty(other_techniques)):
        str=''
# Trainmatlab.v.0/aps_RMSE_comparison.m:113
        fprintf(cat('To indicate more use the & symbol.\\n'))
        fprintf(cat('You can alsu use u option or a subtract flag of the u option.\\n'))
        fprintf(cat('For the APS you need to indicate the type of correction using a_l, a_M+a_eh etc flag. \\n'))
        while isempty(str) and isnumeric(str2num(str)) == 1:

            str=input_(cat('What will be the other technique(s)? (e.g. a_mi+a_eh) \\n\\n'),'s')
# Trainmatlab.v.0/aps_RMSE_comparison.m:119

        other_techniques=copy(str)
# Trainmatlab.v.0/aps_RMSE_comparison.m:121
        clear('str')
    
    if nargin < 3:
        save_dir_path=matlabarray([])
# Trainmatlab.v.0/aps_RMSE_comparison.m:127
    
    if nargin < 4:
        save_dir_folder=matlabarray([])
# Trainmatlab.v.0/aps_RMSE_comparison.m:130
    
    if nargin < 5:
        units_flag='rad'
# Trainmatlab.v.0/aps_RMSE_comparison.m:133
    
    if logical_not((strcmpi(units_flag,'rad') or strcmpi(units_flag,'cm'))):
        error('Give a valid unit flag, either a string \'rad\' or \'cm\'')
    
    if nargin < 6:
        # when 1 deramp all images else do not
        deramp_flag=0
# Trainmatlab.v.0/aps_RMSE_comparison.m:142
    
    # related to figure properties
    if nargin < 7:
        fig_prop=matlabarray([])
# Trainmatlab.v.0/aps_RMSE_comparison.m:147
    
    if isfield(fig_prop,'ylimits'):
        ylimits=fig_prop.ylimits
# Trainmatlab.v.0/aps_RMSE_comparison.m:150
    else:
        ylimits=matlabarray([])
# Trainmatlab.v.0/aps_RMSE_comparison.m:152
    
    if isfield(fig_prop,'current_colors'):
        current_colors=fig_prop.current_colors
# Trainmatlab.v.0/aps_RMSE_comparison.m:155
    else:
        current_colors=matlabarray([])
# Trainmatlab.v.0/aps_RMSE_comparison.m:157
    
    
    ## actual code
    
    # paths
    InSAR_datapath=copy(pwd)
# Trainmatlab.v.0/aps_RMSE_comparison.m:165
    curdir=copy(pwd)
# Trainmatlab.v.0/aps_RMSE_comparison.m:166
    # getting the original reference area
    ref_radius_original=getparm('ref_radius')
# Trainmatlab.v.0/aps_RMSE_comparison.m:170
    setparm('ref_radius',nan)
    # Checking if this is to plot the powerlaw bands or actual different
# correction methods
    compare_bands=0
# Trainmatlab.v.0/aps_RMSE_comparison.m:176
    if ischar(other_techniques):
        if strcmpi(other_techniques,'a_pbands'):
            compare_bands=1
# Trainmatlab.v.0/aps_RMSE_comparison.m:179
            save_dir=copy(save_dir_bands)
# Trainmatlab.v.0/aps_RMSE_comparison.m:180
        else:
            compare_bands=0
# Trainmatlab.v.0/aps_RMSE_comparison.m:182
    else:
        # this is based on a matrix specified
        other_techniques_data=copy(other_techniques)
# Trainmatlab.v.0/aps_RMSE_comparison.m:186
        clear('other_techniques')
        other_techniques=repmat(' &',1,size(other_techniques_data,3))
# Trainmatlab.v.0/aps_RMSE_comparison.m:188
        other_techniques=other_techniques[1:end() - 1]
# Trainmatlab.v.0/aps_RMSE_comparison.m:189
        save_dir=copy(save_dir_data)
# Trainmatlab.v.0/aps_RMSE_comparison.m:190
        ix_ref=copy(ps_setref)
# Trainmatlab.v.0/aps_RMSE_comparison.m:193
        for k_temp in arange(1,size(other_techniques_data,3)).reshape(-1):
            other_techniques_data[:,:,k_temp]=other_techniques_data[:,:,k_temp] - repmat(nanmean(other_techniques_data[ix_ref,:,k_temp],1),size(other_techniques_data,1),1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:195
    
    # check if the reference technique is given as a string
    if logical_not(ischar(ref_technique)):
        save_dir=copy(save_dir_data)
# Trainmatlab.v.0/aps_RMSE_comparison.m:200
        ref_technique_data=copy(ref_technique)
# Trainmatlab.v.0/aps_RMSE_comparison.m:201
        clear('ref_technique')
        ref_technique=' '
# Trainmatlab.v.0/aps_RMSE_comparison.m:203
        # set reference area of the data
        ix_ref=copy(ps_setref)
# Trainmatlab.v.0/aps_RMSE_comparison.m:206
        ref_technique_data=ref_technique_data - repmat(nanmean(ref_technique_data[ix_ref,:],1),size(ref_technique_data,1),1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:207
    
    # figure options
    fontsize=15
# Trainmatlab.v.0/aps_RMSE_comparison.m:212
    if logical_not(isempty(save_dir_folder)):
        save_dir=copy(save_dir_folder)
# Trainmatlab.v.0/aps_RMSE_comparison.m:214
    
    if isempty(save_dir_path):
        save_path=matlabarray(cat(InSAR_datapath,filesep,save_dir))
# Trainmatlab.v.0/aps_RMSE_comparison.m:217
    else:
        save_path=matlabarray(cat(save_dir_path,filesep,save_dir))
# Trainmatlab.v.0/aps_RMSE_comparison.m:219
    
    if exist(save_path,'dir') != 7:
        mkdir(save_path)
    else:
        str=''
# Trainmatlab.v.0/aps_RMSE_comparison.m:224
        while strcmpi(str,'y') != 1 and strcmpi(str,'n') != 1:

            str=input_(cat('This folder already exist, want to clear it? [y/n] \\n'),'s')
# Trainmatlab.v.0/aps_RMSE_comparison.m:226

        if strcmp(str,'y'):
            delete(cat(save_path,filesep,'*'))
    
    # get if its small baseline or not
    small_baseline_flag=getparm('small_baseline_flag')
# Trainmatlab.v.0/aps_RMSE_comparison.m:235
    load('psver')
    ps=load(cat('ps',num2str(psver),'.mat'))
# Trainmatlab.v.0/aps_RMSE_comparison.m:237
    if strcmp(small_baseline_flag,'y'):
        aps_str='asb'
# Trainmatlab.v.0/aps_RMSE_comparison.m:239
        tca_name='tca_sb2.mat'
# Trainmatlab.v.0/aps_RMSE_comparison.m:240
        tca_bands_name='tca_bands_sb2.mat'
# Trainmatlab.v.0/aps_RMSE_comparison.m:241
        if exist(cat('..',filesep,'ps1.mat'),'file') != 2:
            bperp=NaN(cat(length(ps.ifgday_ix),2))
# Trainmatlab.v.0/aps_RMSE_comparison.m:245
        else:
            bperp=load(cat('..',filesep,'ps1.mat'),'bperp')
# Trainmatlab.v.0/aps_RMSE_comparison.m:247
            bperp=bperp.bperp
# Trainmatlab.v.0/aps_RMSE_comparison.m:248
            bperp=bperp[ps.ifgday_ix]
# Trainmatlab.v.0/aps_RMSE_comparison.m:249
        dates=ps.ifgday
# Trainmatlab.v.0/aps_RMSE_comparison.m:251
        if logical_and(logical_not(isempty(strfind(ref_technique,'u'))),isempty(strfind(ref_technique,'usb'))):
            fprintf('You are displaying a phase type for PS not SB!\\nThis has been changed to SB instead!\\n')
            ref_technique=matlabarray(cat('usb',ref_technique[2:end()]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:255
            fprintf(cat(ref_technique,'\\n\\n'))
        if logical_and(logical_not(isempty(strfind(other_techniques,'u'))),isempty(strfind(other_techniques,'usb'))):
            fprintf('You are displaying a phase type for PS not SB!\\nThis has been changed to SB instead!\\n')
            ix=strfind(other_techniques,'u')
# Trainmatlab.v.0/aps_RMSE_comparison.m:260
            other_techniques=matlabarray(cat(other_techniques[1:ix],'sb',other_techniques[ix + 1:end()]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:261
            fprintf(cat(other_techniques,'\\n\\n'))
        ix_ifgs_keep=arange(1,ps.n_ifg)
# Trainmatlab.v.0/aps_RMSE_comparison.m:264
    else:
        aps_str='a'
# Trainmatlab.v.0/aps_RMSE_comparison.m:266
        tca_name='tca2.mat'
# Trainmatlab.v.0/aps_RMSE_comparison.m:267
        tca_bands_name='tca_bands2.mat'
# Trainmatlab.v.0/aps_RMSE_comparison.m:268
        dates=matlabarray(cat(ps.day,repmat(ps.master_day,length(ps.day),1)))
# Trainmatlab.v.0/aps_RMSE_comparison.m:270
        bperp=matlabarray(cat(ps.bperp,zeros(cat(length(ps.day),1))))
# Trainmatlab.v.0/aps_RMSE_comparison.m:271
        ix_ifgs_keep=arange(1,ps.n_ifg)
# Trainmatlab.v.0/aps_RMSE_comparison.m:272
    
    # remove that that have not been unwrapped before
    ix_dropped=getparm('drop_ifg')
# Trainmatlab.v.0/aps_RMSE_comparison.m:276
    if strcmp(small_baseline_flag,'n'):
        ix_dropped=unique(cat(ix_dropped,ps.master_ix))
# Trainmatlab.v.0/aps_RMSE_comparison.m:278
    
    ix_ifgs_keep[ix_dropped]=[]
# Trainmatlab.v.0/aps_RMSE_comparison.m:280
    bperp[ix_dropped,:]=[]
# Trainmatlab.v.0/aps_RMSE_comparison.m:281
    dates[ix_dropped,:]=[]
# Trainmatlab.v.0/aps_RMSE_comparison.m:282
    # keep the original network for reference
    dates_all=copy(dates)
# Trainmatlab.v.0/aps_RMSE_comparison.m:285
    bperp_all=copy(bperp)
# Trainmatlab.v.0/aps_RMSE_comparison.m:286
    # technique to be compared to
    try:
        other_techniques=strsplit(other_techniques,'&')
# Trainmatlab.v.0/aps_RMSE_comparison.m:291
    finally:
        pass
    
    # other techniques. This could also be bandfiltered powerlaw data
    if compare_bands == 1:
        bandfilter_dataset=getparm_aps('powerlaw_spatial_bands')
# Trainmatlab.v.0/aps_RMSE_comparison.m:298
        n_techniques=size(bandfilter_dataset,1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:299
    else:
        n_techniques=length(other_techniques)
# Trainmatlab.v.0/aps_RMSE_comparison.m:301
    
    legend_str=matlabarray([])
# Trainmatlab.v.0/aps_RMSE_comparison.m:303
    if compare_bands == 1:
        n_ifgs=length(ix_ifgs_keep)
# Trainmatlab.v.0/aps_RMSE_comparison.m:308
        lenged_str=cell(n_techniques + 1,1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:312
        for technique_counter in arange(1,n_techniques).reshape(-1):
            if technique_counter == 1:
                legend_str[technique_counter + 1]=(cat('Power-law (w+h) band: ',num2str(cat(bandfilter_dataset[technique_counter,1] / 1000)),' - ',num2str(cat(bandfilter_dataset[technique_counter,2] / 1000)),' km'))
# Trainmatlab.v.0/aps_RMSE_comparison.m:315
            else:
                legend_str[technique_counter + 1]=(cat(num2str(cat(bandfilter_dataset[technique_counter,1] / 1000)),' - ',num2str(cat(bandfilter_dataset[technique_counter,2] / 1000)),' km'))
# Trainmatlab.v.0/aps_RMSE_comparison.m:317
            save_str[technique_counter + 1]=(cat('Powerlaw_WH_band_',num2str(cat(bandfilter_dataset[technique_counter,1] / 1000)),'_',num2str(cat(bandfilter_dataset[technique_counter,2] / 1000)),'km'))
# Trainmatlab.v.0/aps_RMSE_comparison.m:319
        # initializing the data
        data=NaN(cat(ps.n_ps,n_ifgs,n_techniques + 1))
# Trainmatlab.v.0/aps_RMSE_comparison.m:325
        data_temp=load(tca_bands_name)
# Trainmatlab.v.0/aps_RMSE_comparison.m:326
        data[:,:,2:end()]=data_temp.ph_tropo_powerlaw_bands(arange(),ix_ifgs_keep,arange())
# Trainmatlab.v.0/aps_RMSE_comparison.m:327
        clear('data_temp','temp_keep')
        # check for NaNs, normally all bands should be fine
        for technique_counter in arange(1,n_techniques).reshape(-1):
            ix_no_correction_temp=find((sum(isnan(data[:,:,technique_counter + 1]) == 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:332
            data[:,ix_no_correction_temp,technique_counter + 1]=NaN
# Trainmatlab.v.0/aps_RMSE_comparison.m:333
            ix_no_correction[technique_counter + 1]=ix_no_correction_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:334
            clear('ix_no_correction_temp')
        # loading the data of the reference
        if ref_technique[1] == 'a':
            ps_plot(cat(aps_str),ref_technique,- 1,0,0,ix_ifgs_keep)
            data_temp=load(cat('ps_plot_',aps_str,'.mat'))
# Trainmatlab.v.0/aps_RMSE_comparison.m:343
            delete(cat('ps_plot_',aps_str,'.mat'))
            ix_no_correction_temp=find((sum(data_temp.ph_disp != 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:347
            data_temp.ph_disp[:,ix_no_correction_temp]=NaN
# Trainmatlab.v.0/aps_RMSE_comparison.m:348
            ix_no_correction_temp=find((sum(isnan(data_temp.ph_disp) == 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:349
            ix_no_correction[1]=ix_no_correction_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:350
            clear('ix_no_correction_temp')
            data[:,:,1]=data_temp.ph_disp
# Trainmatlab.v.0/aps_RMSE_comparison.m:352
            legend_str[1],save_str[1]=aps_name(ref_technique,nargout=2)
# Trainmatlab.v.0/aps_RMSE_comparison.m:355
        else:
            if ref_technique[1] == 'u':
                ps_plot(cat(ref_technique),- 1,0,0,ix_ifgs_keep)
                data_temp=load(cat('ps_plot_',ref_technique,'.mat'))
# Trainmatlab.v.0/aps_RMSE_comparison.m:362
                delete(cat('ps_plot_',ref_technique,'.mat'))
                ix_no_correction_temp=find((sum(data_temp.ph_disp != 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:366
                data_temp.ph_disp[:,ix_no_correction_temp]=NaN
# Trainmatlab.v.0/aps_RMSE_comparison.m:367
                ix_no_correction_temp=find((sum(isnan(data_temp.ph_disp) == 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:368
                ix_no_correction[1]=ix_no_correction_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:369
                clear('ix_no_correction_temp')
                data[:,:,1]=data_temp.ph_disp
# Trainmatlab.v.0/aps_RMSE_comparison.m:371
                legend_str[1]=ref_technique
# Trainmatlab.v.0/aps_RMSE_comparison.m:375
                save_str_temp=copy(ref_technique)
# Trainmatlab.v.0/aps_RMSE_comparison.m:376
                save_str_temp[save_str_temp == '-']='_'
# Trainmatlab.v.0/aps_RMSE_comparison.m:377
                save_str[1]=save_str_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:378
                clear('save_str_temp')
            else:
                if ref_technique[1] == ' ':
                    # check if there is actually a delay otherwize make it all NaN
                    ix_no_correction_temp=find((sum(ref_technique_data != 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:383
                    ref_technique_data[:,ix_no_correction_temp]=NaN
# Trainmatlab.v.0/aps_RMSE_comparison.m:384
                    ix_no_correction_temp=find((sum(isnan(ref_technique_data) == 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:385
                    ix_no_correction[1]=ix_no_correction_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:386
                    clear('ix_no_correction_temp')
                    data[:,:,1]=ref_technique_data
# Trainmatlab.v.0/aps_RMSE_comparison.m:388
                    legend_str[1]='own-data'
# Trainmatlab.v.0/aps_RMSE_comparison.m:391
                    save_str_temp='own-data'
# Trainmatlab.v.0/aps_RMSE_comparison.m:392
                    save_str_temp[save_str_temp == '-']='_'
# Trainmatlab.v.0/aps_RMSE_comparison.m:393
                    save_str[1]=save_str_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:394
                    clear('save_str_temp')
        n_datasets=n_techniques + 1
# Trainmatlab.v.0/aps_RMSE_comparison.m:398
    else:
        for technique_counter in arange(1,n_techniques + 1).reshape(-1):
            if technique_counter == n_techniques + 1:
                technique_str=copy(ref_technique)
# Trainmatlab.v.0/aps_RMSE_comparison.m:405
            else:
                technique_str=other_techniques[technique_counter]
# Trainmatlab.v.0/aps_RMSE_comparison.m:407
            # Telling user which technique is being done
            fprintf(cat('Processing: ',technique_str,'\\n'))
            # plotting the data
        # this is APS
            if technique_str[1] == 'a':
                ps_plot(cat(aps_str),technique_str,- 1,0,0,ix_ifgs_keep)
                data_temp=load(cat('ps_plot_',aps_str,'.mat'))
# Trainmatlab.v.0/aps_RMSE_comparison.m:419
                delete(cat('ps_plot_',aps_str,'.mat'))
                ix_no_correction_temp=find((sum(data_temp.ph_disp != 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:423
                data_temp.ph_disp[:,ix_no_correction_temp]=NaN
# Trainmatlab.v.0/aps_RMSE_comparison.m:424
                ix_no_correction_temp=find((sum(isnan(data_temp.ph_disp) == 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:426
                legend_str_temp,save_str_temp=aps_name(technique_str,nargout=2)
# Trainmatlab.v.0/aps_RMSE_comparison.m:430
            else:
                if technique_str[1] == 'u':
                    ps_plot(cat(technique_str),- 1,0,0,ix_ifgs_keep)
                    data_temp=load(cat('ps_plot_',technique_str,'.mat'))
# Trainmatlab.v.0/aps_RMSE_comparison.m:436
                    delete(cat('ps_plot_',technique_str,'.mat'))
                    ix_no_correction_temp=find((sum(data_temp.ph_disp != 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:440
                    data_temp.ph_disp[:,ix_no_correction_temp]=NaN
# Trainmatlab.v.0/aps_RMSE_comparison.m:441
                    ix_no_correction_temp=find((sum(isnan(data_temp.ph_disp) == 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:442
                    legend_str_temp=copy(technique_str)
# Trainmatlab.v.0/aps_RMSE_comparison.m:446
                    save_str_temp=copy(technique_str)
# Trainmatlab.v.0/aps_RMSE_comparison.m:447
                    save_str_temp[save_str_temp == '-']='_'
# Trainmatlab.v.0/aps_RMSE_comparison.m:448
                else:
                    if technique_str[1] == ' ':
                        if technique_counter == n_techniques + 1:
                            data_temp.ph_disp = copy(ref_technique_data)
# Trainmatlab.v.0/aps_RMSE_comparison.m:453
                        else:
                            data_temp.ph_disp = copy(other_techniques_data[:,:,technique_counter])
# Trainmatlab.v.0/aps_RMSE_comparison.m:455
                        # check if there is actually a delay otherwize make it all NaN
                        ix_no_correction_temp=find((sum(data_temp.ph_disp != 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:459
                        data_temp.ph_disp[:,ix_no_correction_temp]=NaN
# Trainmatlab.v.0/aps_RMSE_comparison.m:460
                        ix_no_correction_temp=find((sum(isnan(data_temp.ph_disp) == 0,1) == 0) == 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:461
                        legend_str_temp='own-data'
# Trainmatlab.v.0/aps_RMSE_comparison.m:464
                        save_str_temp='own-data'
# Trainmatlab.v.0/aps_RMSE_comparison.m:465
                        save_str_temp[save_str_temp == '-']='_'
# Trainmatlab.v.0/aps_RMSE_comparison.m:466
            # storing the data
            if technique_counter == 1:
                data=NaN(cat(size(data_temp.ph_disp),n_techniques + 1))
# Trainmatlab.v.0/aps_RMSE_comparison.m:472
            # putting the reference data in the first layer
            if technique_counter == n_techniques + 1:
                data[:,:,1]=data_temp.ph_disp
# Trainmatlab.v.0/aps_RMSE_comparison.m:476
                legend_str[1]=legend_str_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:477
                save_str[1]=save_str_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:478
                ix_no_correction[1]=ix_no_correction_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:479
                # as given by the user
            else:
                data[:,:,technique_counter + 1]=data_temp.ph_disp
# Trainmatlab.v.0/aps_RMSE_comparison.m:483
                legend_str[technique_counter + 1]=legend_str_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:484
                save_str[technique_counter + 1]=save_str_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:485
                ix_no_correction[technique_counter + 1]=ix_no_correction_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:486
            clear('data_temp','ix_no_correction_temp')
        n_datasets=n_techniques + 1
# Trainmatlab.v.0/aps_RMSE_comparison.m:491
    
    n_ifgs=size(data,2)
# Trainmatlab.v.0/aps_RMSE_comparison.m:493
    setparm('ref_radius',ref_radius_original)
    # crop out a region, by filling them with NaNs
    if crop_out_flag == 1:
        poly=load(crop_file_path)
# Trainmatlab.v.0/aps_RMSE_comparison.m:498
        ix_crop_out=inpolygon(ps.lonlat(arange(),1),ps.lonlat(arange(),2),poly.lonlat(arange(),1),poly.lonlat(arange(),2))
# Trainmatlab.v.0/aps_RMSE_comparison.m:499
        for dataset_counter in arange(1,n_datasets).reshape(-1):
            data[ix_crop_out,:,dataset_counter]=NaN
# Trainmatlab.v.0/aps_RMSE_comparison.m:501
        clear('ix_crop_out')
    else:
        crop_file_path=matlabarray([])
# Trainmatlab.v.0/aps_RMSE_comparison.m:507
    
    # de-ramp the data when required
    if deramp_flag == 1:
        for dataset_counter in arange(1,n_datasets).reshape(-1):
            data[:,:,dataset_counter]=ps_deramp(ps,data[:,:,dataset_counter])
# Trainmatlab.v.0/aps_RMSE_comparison.m:514
    
    # convert the units when requested:
    if strcmpi(units_flag,'cm'):
        data=multiply(data,lambda_) / 4.0 / pi
# Trainmatlab.v.0/aps_RMSE_comparison.m:521
    
    # comparing datasets - two options implemented
# option 1: all datasets have the same points for a specific interferogram
# option 2: each dataset only compares points that it has mutual with the reference
    
    # implementation of option 1
    data_option1=copy(data)
# Trainmatlab.v.0/aps_RMSE_comparison.m:529
    for dataset_counter in arange(1,n_datasets).reshape(-1):
        for ifg_counter in arange(1,n_ifgs).reshape(-1):
            # take all the datasets for a specific interferogram
            temp=squeeze(data_option1[:,ifg_counter,:])
# Trainmatlab.v.0/aps_RMSE_comparison.m:533
            # all of them to a nan
            ix_nan=sum(isnan(temp),2) >= 1
# Trainmatlab.v.0/aps_RMSE_comparison.m:536
            data_option1[ix_nan,ifg_counter,:]=NaN
# Trainmatlab.v.0/aps_RMSE_comparison.m:539
            # in the interferogram
            if reference_flag == 1:
                # removing the mean for each interfergram, but all datasets same time
                temp=squeeze(data_option1[:,ifg_counter,:])
# Trainmatlab.v.0/aps_RMSE_comparison.m:545
                temp=temp - repmat(nanmean(temp,1),size(temp,1),1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:546
                data_option1[:,ifg_counter,:]=temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:548
                clear('temp')
    
    # Computing the RMSE
    residual_sq_option1=(data_option1 - repmat(data_option1[:,:,1],cat(1,1,n_datasets))) ** 2
# Trainmatlab.v.0/aps_RMSE_comparison.m:555
    RMSE_option1=sqrt(nanmean((residual_sq_option1),1))
# Trainmatlab.v.0/aps_RMSE_comparison.m:556
    # replace the first RMSE with the RMSS (Root Mean Squared Signal)
    RMSE_option1[1,:,1]=sqrt(nanmean(data_option1[:,:,1] ** 2,1))
# Trainmatlab.v.0/aps_RMSE_comparison.m:558
    # RMSE with first column the reference
    RMSE_option1=squeeze(RMSE_option1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:560
    
    if n_ifgs == logical_and(1,size(RMSE_option1,1)) > 1:
        RMSE_option1=RMSE_option1.T
# Trainmatlab.v.0/aps_RMSE_comparison.m:562
    
    # fraction of data used to do the RMSE computation
    RMSE_option1_perc=round(multiply((sum(isnan(residual_sq_option1[:,:,1]) != 1,1) / size(residual_sq_option1[:,:,1],1)),100))
# Trainmatlab.v.0/aps_RMSE_comparison.m:565
    # checking if the RMSE is forfulling the percentage threshold of points
# used in the calculation
    ix_failed=RMSE_option1_perc <= perc_threshold
# Trainmatlab.v.0/aps_RMSE_comparison.m:569
    ix_no_correction_temp=matlabarray(cat(arange(1,n_ifgs)))
# Trainmatlab.v.0/aps_RMSE_comparison.m:570
    ix_no_correction_temp=ix_no_correction_temp[ix_failed]
# Trainmatlab.v.0/aps_RMSE_comparison.m:571
    RMSE_option1[ix_failed,:]=NaN
# Trainmatlab.v.0/aps_RMSE_comparison.m:572
    temp_failed=setxor(ix_no_correction_temp,unique(cell2mat(ix_no_correction)))
# Trainmatlab.v.0/aps_RMSE_comparison.m:573
    if length(temp_failed) > 0:
        fprintf(cat(num2str(length(temp_failed)),' interferograms failed the percentage threshold \\n'))
    
    ix_no_correction[n_techniques + 2]=ix_no_correction_temp
# Trainmatlab.v.0/aps_RMSE_comparison.m:577
    clear('ix_no_correction_temp')
    # getting the interferograms where RMSE where computed
    ifgs_good=isnan(sum(RMSE_option1,2)) != 1
# Trainmatlab.v.0/aps_RMSE_comparison.m:583
    ix_ifgs=arange(1,n_ifgs)
# Trainmatlab.v.0/aps_RMSE_comparison.m:584
    ix_ifgs=ix_ifgs[ifgs_good]
# Trainmatlab.v.0/aps_RMSE_comparison.m:585
    # original ifgs list
    temp=arange(1,ps.n_ifg)
# Trainmatlab.v.0/aps_RMSE_comparison.m:589
    temp=temp[ix_ifgs_keep]
# Trainmatlab.v.0/aps_RMSE_comparison.m:590
    fprintf(cat('original interferogram list: ',num2str(temp[ix_ifgs]),'\\n'))
    # setting the colorbar of the plots
    if isempty(current_colors):
        h_test=copy(figure)
# Trainmatlab.v.0/aps_RMSE_comparison.m:596
        colormap('default')
        # getting the current colors and keep that for the next plot
        current_colors=copy(colormap)
# Trainmatlab.v.0/aps_RMSE_comparison.m:599
        ix_current_colors=round(multiply(cat(arange(1,n_techniques + 1)).T,size(current_colors,1)) / (n_techniques + 2))
# Trainmatlab.v.0/aps_RMSE_comparison.m:600
        current_colors=current_colors[ix_current_colors,:]
# Trainmatlab.v.0/aps_RMSE_comparison.m:601
        current_colors[1,:]=cat(0,0,0)
# Trainmatlab.v.0/aps_RMSE_comparison.m:602
        close_(h_test)
    
    # plotting the bar chart for each technique and interferogram
    h_bar=figure('name','RMSE bar chart','position',cat(- 6,440,1171,367))
# Trainmatlab.v.0/aps_RMSE_comparison.m:607
    colormap(current_colors)
    if n_ifgs == 1:
        dummy=matlabarray(cat([RMSE_option1[ix_ifgs,:]],[multiply(NaN,ones(size(RMSE_option1[ix_ifgs,:])))]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:610
        bar(dummy)
    else:
        bar(RMSE_option1[ix_ifgs,:])
    
    legend(legend_str,'location','northoutside')
    set(gca,'xtick',cat(arange(1,sum(ifgs_good))),'xticklabel',num2str(ix_ifgs.T))
    xlabel('Interferogram number','fontsize',fontsize)
    # check the legend based on the units selected
    if strcmpi(units_flag,'cm'):
        ylabel('RMSE [cm]','fontsize',fontsize)
    else:
        ylabel('RMSE [rad]','fontsize',fontsize)
    
    set(gca,'fontsize',fontsize)
    # take the maximum of the 5 techniques for each interferogram and add a
# small shift up for the text, but keep the shift constant.
    if isempty(ix_ifgs) or isnan(nanmean(nanmean(RMSE_option1))):
        y_text=1
# Trainmatlab.v.0/aps_RMSE_comparison.m:628
    else:
        y_text=max(RMSE_option1[ix_ifgs,:],[],2) + dot(mean(max(RMSE_option1[ix_ifgs,:],[],2)),0.25)
# Trainmatlab.v.0/aps_RMSE_comparison.m:630
    
    ylim(cat(0,max(y_text) + dot(0.25,max(y_text))))
    for ifgs_counter in arange(1,sum(ifgs_good)).reshape(-1):
        text(ifgs_counter - 0.25,y_text[ifgs_counter],cat(num2str(RMSE_option1_perc[ix_ifgs[ifgs_counter]]),'%'),'VerticalAlignment','top','FontSize',fontsize)
    
    RMSE_perc=RMSE_option1_perc[ix_ifgs]
# Trainmatlab.v.0/aps_RMSE_comparison.m:636
    set(h_bar,'PaperPositionMode','auto')
    print_(h_bar,'-depsc',cat(save_path,filesep,'RMSE_bar_chart.eps'))
    print_(h_bar,'-dpng',cat(save_path,filesep,'RMSE_bar_chart.png'))
    # plotting for each technique all the interferogram on a line
    scatterplot=matlabarray([])
# Trainmatlab.v.0/aps_RMSE_comparison.m:643
    
    scatterplot_mean=matlabarray([])
# Trainmatlab.v.0/aps_RMSE_comparison.m:644
    # for the band comparison also include band information on axis
    if compare_bands == 1:
        h_scatter=figure('name','RMSE scatter plot of all ifgs','position',cat(127,257,797,576))
# Trainmatlab.v.0/aps_RMSE_comparison.m:647
        h1=axes('position',cat(0.22,0.4,0.65,0.45))
# Trainmatlab.v.0/aps_RMSE_comparison.m:649
        for technique_counter in arange(1,n_techniques).reshape(-1):
            for ifg_counter in arange(1,length(ix_ifgs)).reshape(-1):
                plot(mean(bandfilter_dataset[technique_counter,:] / 1000),cat(RMSE_option1[ix_ifgs[ifg_counter],technique_counter + 1]),'k^','markerfacecolor',current_colors[technique_counter + 1,:])
                hold('on')
            hold('on')
            plot(mean(bandfilter_dataset[technique_counter,:] / 1000),cat(nanmedian(RMSE_option1[ix_ifgs,technique_counter + 1])),'k^','markerfacecolor',current_colors[technique_counter + 1,:],'markersize',15,'linewidth',2)
            # store data for saving
            scatterplot=matlabarray(cat([scatterplot],[cat(multiply(technique_counter,ones(cat(sum(ifgs_good),1))),RMSE_option1[ix_ifgs,technique_counter + 1])]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:659
            scatterplot_mean=matlabarray(cat([scatterplot_mean],[cat(technique_counter,nanmedian(RMSE_option1[ix_ifgs,technique_counter + 1]))]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:660
        # plotting the separation between RMS signal and RMS error
        hold('on')
        set(gca,'YAxisLocation','right')
        xlim(cat(0,ceil(max(max(bandfilter_dataset)) / 1000)))
        # in case MERIS is the reference plot the theoretical accuracy as well.
        if length(ref_technique) > 2 and strcmp(ref_technique[1:3],'a_m'):
            xlimits_extend=get(gca,'xlim')
# Trainmatlab.v.0/aps_RMSE_comparison.m:668
            if strcmpi(units_flag,'cm'):
                # technique error is about zero
                hold('on')
                plot(xlimits_extend,dot(meris_uncertaincy_cm,ones(size(xlimits_extend))),'k-')
                # technique error is same as meris error
                hold('on')
                plot(xlimits_extend,dot(dot(meris_uncertaincy_cm,ones(size(xlimits_extend))),sqrt(2)),'k--')
                # technique error is twice meris error
                hold('on')
                plot(xlimits_extend,dot(dot(meris_uncertaincy_cm,ones(size(xlimits_extend))),sqrt(5)),'k:')
            else:
                # technique error is about zero
                hold('on')
                plot(xlimits_extend,dot(meris_uncertaincy_rad,ones(size(xlimits_extend))),'k-')
                # technique error is same as meris error
                hold('on')
                plot(xlimits_extend,dot(dot(meris_uncertaincy_rad,ones(size(xlimits_extend))),sqrt(2)),'k--')
                # technique error is twice meris error
                hold('on')
                plot(xlimits_extend,dot(dot(meris_uncertaincy_rad,ones(size(xlimits_extend))),sqrt(5)),'k:')
        # check the legend based on the units selected
        if strcmpi(units_flag,'cm'):
            ylabel('RMS [cm]','fontsize',fontsize)
        else:
            ylabel('RMS [rad]','fontsize',fontsize)
        # setting the other part of the axis.
        if isempty(ylimits):
            ylimits=matlabarray(cat(0,ceil(nanmax(nanmax(RMSE_option1)))))
# Trainmatlab.v.0/aps_RMSE_comparison.m:699
        ylim(ylimits)
        set(gca,'fontsize',fontsize)
        set(gca,'XAxisLocation','top')
        xlabel('Spatial wavelength [km]','fontsize',fontsize)
        ylabel('RMSE [rad]','fontsize',fontsize)
        set(gca,'fontsize',fontsize)
        yticks=get(gca,'ytick')
# Trainmatlab.v.0/aps_RMSE_comparison.m:707
        ylimits=get(gca,'ylim')
# Trainmatlab.v.0/aps_RMSE_comparison.m:708
        h1=axes('position',cat(0.1,0.4,0.1,0.45))
# Trainmatlab.v.0/aps_RMSE_comparison.m:712
        plot(repmat(- 10,length(ix_ifgs),1),cat((RMSE_option1[ix_ifgs,1])),'ksq','markerfacecolor',current_colors[1,:])
        hold('on')
        plot(- 10,cat(nanmedian(RMSE_option1[ix_ifgs,1])),'ksq','markerfacecolor',current_colors[1,:],'markersize',15,'linewidth',2)
        scatterplot_ref=matlabarray(cat(repmat(- 10,length(ix_ifgs),1),cat((RMSE_option1[ix_ifgs,1]))))
# Trainmatlab.v.0/aps_RMSE_comparison.m:716
        scatterplot_ref_mean=matlabarray(cat([- 10],[nanmedian(RMSE_option1[ix_ifgs,1])]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:717
        if length(ref_technique) > 2 and strcmp(ref_technique[1:3],'a_m'):
            xlimits_extend=get(gca,'xlim')
# Trainmatlab.v.0/aps_RMSE_comparison.m:720
            if strcmpi(units_flag,'cm'):
                hold('on')
                plot(xlimits_extend,dot(meris_uncertaincy_cm,ones(size(xlimits_extend))),'k--','linewidth',2)
            else:
                hold('on')
                plot(xlimits_extend,dot(meris_uncertaincy_rad,ones(size(xlimits_extend))),'k--','linewidth',2)
        # check the legend based on the units selected
        if strcmpi(units_flag,'cm'):
            ylabel('RMS [cm]','fontsize',fontsize)
        else:
            ylabel('RMS [rad]','fontsize',fontsize)
        set(h1,'ytick',yticks)
        ylim(ylimits)
        xticks=matlabarray(cat(- 10))
# Trainmatlab.v.0/aps_RMSE_comparison.m:737
        xticks_label='REF'
# Trainmatlab.v.0/aps_RMSE_comparison.m:738
        set(gca,'xtick',xticks)
        set(gca,'xticklabel',xticks_label)
        set(gca,'fontsize',fontsize)
        # plotting the bandwidths
        h2=axes('position',cat(0.22,0.175,0.65,0.2))
# Trainmatlab.v.0/aps_RMSE_comparison.m:744
        sorted_mean,ix=sort(nanmedian(RMSE_option1[:,2:end()],1),nargout=2)
# Trainmatlab.v.0/aps_RMSE_comparison.m:745
        temp=reshape(RMSE_option1,[],1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:746
        temp[isnan(temp)]=[]
# Trainmatlab.v.0/aps_RMSE_comparison.m:747
        temp=sort(temp,'descend')
# Trainmatlab.v.0/aps_RMSE_comparison.m:748
        for counter in arange(1,n_techniques).reshape(-1):
            technique_counter=ix[counter]
# Trainmatlab.v.0/aps_RMSE_comparison.m:750
            plot(bandfilter_dataset[technique_counter,:] / 1000,multiply(counter,cat(1,1)),'k-','linewidth',2,'color',current_colors[technique_counter + 1,:])
            hold('on')
        xlim(cat(0,ceil(max(max(bandfilter_dataset)) / 1000)))
        ylim(cat(0,counter + 1))
        set(gca,'YAxisLocation','right')
        xlabel('Spatial wavelength [km]','fontsize',fontsize)
        set(gca,'ytick',[])
        set(gca,'yticklabel','')
        ylabel(cellarray(['<- smaller','RMSE']),'fontsize',fontsize)
        set(gca,'fontsize',fontsize)
        hold('on')
        box('on')
        # saving the figure
        set(h_scatter,'PaperPositionMode','auto')
        print_(h_scatter,'-depsc',cat(save_path,filesep,'RMSE_scatter_plot.eps'))
        print_(h_scatter,'-dpng',cat(save_path,filesep,'RMSE_scatter_plot.png'))
    else:
        # technique comparison
        h_scatter=figure('name','RMSE scatter plot of all ifgs','position',cat(127,257,797,576))
# Trainmatlab.v.0/aps_RMSE_comparison.m:772
        h1=axes('position',cat(0.22,0.1,0.65,0.45))
# Trainmatlab.v.0/aps_RMSE_comparison.m:773
        for technique_counter in arange(1,n_techniques).reshape(-1):
            plot(technique_counter,nanmedian(RMSE_option1[ix_ifgs,technique_counter + 1]),'k^','markerfacecolor',current_colors[technique_counter + 1,:],'markersize',15,'linewidth',2)
            hold('on')
        #     legend(legend_str{2:end},'location','northoutside')
        for technique_counter in arange(1,n_techniques).reshape(-1):
            hold('on')
            plot(multiply(technique_counter,ones(cat(sum(ifgs_good),1))),RMSE_option1[ix_ifgs,technique_counter + 1].T,'k^','markerfacecolor',current_colors[technique_counter + 1,:])
            hold('on')
            plot(technique_counter,nanmedian(RMSE_option1[ix_ifgs,technique_counter + 1]),'k^','markersize',15,'linewidth',2)
            # store data for saving
            scatterplot=matlabarray(cat([scatterplot],[cat(multiply(technique_counter,ones(cat(sum(ifgs_good),1))),RMSE_option1[ix_ifgs,technique_counter + 1])]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:786
            scatterplot_mean=matlabarray(cat([scatterplot_mean],[cat(technique_counter,nanmedian(RMSE_option1[ix_ifgs,technique_counter + 1]))]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:787
        xlim(cat(0,n_techniques + 1))
        # in case MERIS is the reference plot the theoretical accuracy as well.
        if length(ref_technique) > 2 and strcmp(ref_technique[1:3],'a_m'):
            xlimits_extend=get(gca,'xlim')
# Trainmatlab.v.0/aps_RMSE_comparison.m:792
            if strcmpi(units_flag,'cm'):
                # technique error is about zero
                hold('on')
                plot(xlimits_extend,dot(meris_uncertaincy_cm,ones(size(xlimits_extend))),'k-')
                # technique error is same as meris error
                hold('on')
                plot(xlimits_extend,dot(dot(meris_uncertaincy_cm,ones(size(xlimits_extend))),sqrt(2)),'k--')
                # technique error is twice meris error
                hold('on')
                plot(xlimits_extend,dot(dot(meris_uncertaincy_cm,ones(size(xlimits_extend))),sqrt(5)),'k:')
            else:
                # technique error is about zero
                hold('on')
                plot(xlimits_extend,dot(meris_uncertaincy_rad,ones(size(xlimits_extend))),'k-')
                # technique error is same as meris error
                hold('on')
                plot(xlimits_extend,dot(dot(meris_uncertaincy_rad,ones(size(xlimits_extend))),sqrt(2)),'k--')
                # technique error is twice meris error
                hold('on')
                plot(xlimits_extend,dot(dot(meris_uncertaincy_rad,ones(size(xlimits_extend))),sqrt(5)),'k:')
        set(gca,'xtick',[],'xticklabel','')
        xlabel('Techniques','fontsize',fontsize)
        set(gca,'YAxisLocation','right')
        if isempty(ylimits):
            ylimits=matlabarray(cat(0,ceil(max(get(gca,'ylim')))))
# Trainmatlab.v.0/aps_RMSE_comparison.m:819
        ylim(ylimits)
        set(gca,'fontsize',fontsize)
        # check the legend based on the units selected
        if strcmpi(units_flag,'cm'):
            ylabel('RMSE [cm]','fontsize',fontsize)
        else:
            ylabel('RMSE [rad]','fontsize',fontsize)
        yticks=get(gca,'ytick')
# Trainmatlab.v.0/aps_RMSE_comparison.m:829
        h1=axes('position',cat(0.1,0.1,0.1,0.45))
# Trainmatlab.v.0/aps_RMSE_comparison.m:833
        plot(repmat(- 10,length(ix_ifgs),1),cat((RMSE_option1[ix_ifgs,1])),'ksq','markerfacecolor',current_colors[1,:])
        hold('on')
        plot(- 10,cat(nanmedian(RMSE_option1[ix_ifgs,1])),'ksq','markerfacecolor',current_colors[1,:],'markersize',15,'linewidth',2)
        scatterplot_ref=matlabarray(cat(repmat(- 10,length(ix_ifgs),1),cat((RMSE_option1[ix_ifgs,1]))))
# Trainmatlab.v.0/aps_RMSE_comparison.m:837
        scatterplot_ref_mean=matlabarray(cat([- 10],[nanmedian(RMSE_option1[ix_ifgs,1])]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:838
        if length(ref_technique) > 2 and strcmp(ref_technique[1:3],'a_m'):
            xlimits_extend=get(gca,'xlim')
# Trainmatlab.v.0/aps_RMSE_comparison.m:843
            if strcmpi(units_flag,'cm'):
                hold('on')
                plot(xlimits_extend,dot(meris_uncertaincy_cm,ones(size(xlimits_extend))),'k--','linewidth',2)
            else:
                hold('on')
                plot(xlimits_extend,dot(meris_uncertaincy_rad,ones(size(xlimits_extend))),'k--','linewidth',2)
        # check the legend based on the units selected
        if strcmpi(units_flag,'cm'):
            ylabel('RMS [cm]','fontsize',fontsize)
        else:
            ylabel('RMS [rad]','fontsize',fontsize)
        set(h1,'ytick',yticks)
        ylim(ylimits)
        xticks=matlabarray(cat(- 10))
# Trainmatlab.v.0/aps_RMSE_comparison.m:860
        xticks_label='REF'
# Trainmatlab.v.0/aps_RMSE_comparison.m:861
        set(gca,'xtick',xticks)
        set(gca,'xticklabel',xticks_label)
        set(gca,'fontsize',fontsize)
        # plotting the legend as two parts:
        n_legend=ceil((n_techniques + 1) / 2)
# Trainmatlab.v.0/aps_RMSE_comparison.m:868
        h3=axes('position',cat(0.25,0.55,0.3,0.3))
# Trainmatlab.v.0/aps_RMSE_comparison.m:870
        for technique_counter in arange(1,n_legend).reshape(-1):
            # reference has a different marker
            if technique_counter == 1:
                plot(technique_counter,- 100,'ksq','markerfacecolor',current_colors[technique_counter,:],'markersize',15,'linewidth',2)
            else:
                plot(technique_counter,- 100,'k^','markerfacecolor',current_colors[technique_counter,:],'markersize',15,'linewidth',2)
            hold('on')
        xlim(cat(- 1,1))
        ylim(ylimits)
        h2_legend=legend(legend_str[1:n_legend])
# Trainmatlab.v.0/aps_RMSE_comparison.m:882
        set(h2_legend,'location','east')
        set(gca,'visible','off')
        set(gca,'fontsize',fontsize)
        h2=axes('position',cat(0.55,0.55,0.3,0.3))
# Trainmatlab.v.0/aps_RMSE_comparison.m:888
        for technique_counter in arange(n_legend + 1,n_techniques + 1).reshape(-1):
            plot(technique_counter,- 100,'k^','markerfacecolor',current_colors[technique_counter,:],'markersize',15,'linewidth',2)
            hold('on')
        xlim(cat(- 1,1))
        ylim(ylimits)
        h3_legend=legend(legend_str[n_legend + 1:n_techniques + 1])
# Trainmatlab.v.0/aps_RMSE_comparison.m:895
        set(h3_legend,'location','west')
        set(gca,'visible','off')
        set(gca,'fontsize',fontsize)
        set(h_scatter,'PaperPositionMode','auto')
        print_(h_scatter,'-depsc',cat(save_path,filesep,'RMSE_scatter_plot.eps'))
        print_(h_scatter,'-dpng',cat(save_path,filesep,'RMSE_scatter_plot.png'))
    
    if sum(sum(isnan(bperp_all))) == 0:
        # plotting the network of the interferograms used in the RMSE computation
        h_baselineplot=figure('name','Processed network')
# Trainmatlab.v.0/aps_RMSE_comparison.m:908
        for ifgs_counter in arange(1,size(bperp_all,1)).reshape(-1):
            hold('on')
            plot(cat(dates_all[ifgs_counter,1],dates_all[ifgs_counter,2]),cat(bperp_all[ifgs_counter,1],bperp_all[ifgs_counter,2]),'k-','linewidth',1)
        # plotting the network for which we have an APS correction
        for ifgs_counter in arange(1,sum(ifgs_good)).reshape(-1):
            hold('on')
            plot(cat(dates[ix_ifgs[ifgs_counter],1],dates[ix_ifgs[ifgs_counter],2]),cat(bperp[ix_ifgs[ifgs_counter],1],bperp[ix_ifgs[ifgs_counter],2]),'k-','linewidth',2)
            text(mean(dates[ix_ifgs[ifgs_counter],:]),mean(bperp[ix_ifgs[ifgs_counter],:]) + 20,num2str(ix_ifgs[ifgs_counter]),'fontsize',fontsize - 2,'backgroundColor',cat(1,1,1),'Margin',0.01)
        hold('on')
        # [dates_unique,ix_unique] = unique(dates(ix_ifgs,:));
    # bperp_unique = bperp(ix_ifgs,:);
    # bperp_unique = bperp_unique(ix_unique);
        dates_unique,ix_unique=unique(dates_all,nargout=2)
# Trainmatlab.v.0/aps_RMSE_comparison.m:926
        bperp_unique=copy(bperp_all)
# Trainmatlab.v.0/aps_RMSE_comparison.m:927
        bperp_unique=bperp_unique[ix_unique]
# Trainmatlab.v.0/aps_RMSE_comparison.m:928
        plot(dates_unique,bperp_unique,'ko','markerfacecolor','r','markersize',7)
        clear('dates_unique','ix_unique','bperp_unique')
        hold('on')
        # set(gca,'XTick',dates_num)
        datetick('x','mmm yy')
        set(gca,'fontsize',fontsize)
        box('on')
        ylabel('Bperp [m]','fontsize',fontsize)
        set(h_baselineplot,'PaperPositionMode','auto')
        print_(h_baselineplot,'-depsc',cat(save_path,filesep,'RMSE_baseline_plot.eps'))
        print_(h_baselineplot,'-dpng',cat(save_path,filesep,'RMSE_baseline_plot.png'))
    
    # make a plot with what data is available where
    no_correction_matrix=zeros(cat(n_techniques + 2,n_ifgs))
# Trainmatlab.v.0/aps_RMSE_comparison.m:943
    for technique_counter in arange(1,n_techniques + 2).reshape(-1):
        no_correction_matrix[technique_counter,ix_no_correction[technique_counter]]=1
# Trainmatlab.v.0/aps_RMSE_comparison.m:945
    
    no_correction_matrix[end(),((sum(no_correction_matrix[1:end() - 1,:],1) >= 1) - no_correction_matrix[end(),:]) < 0]=2
# Trainmatlab.v.0/aps_RMSE_comparison.m:947
    no_correction_matrix[end(),(no_correction_matrix[end(),:] == 1)]=0
# Trainmatlab.v.0/aps_RMSE_comparison.m:948
    # color based on technique availablilty
    no_correction_matrix_color=copy(no_correction_matrix)
# Trainmatlab.v.0/aps_RMSE_comparison.m:951
    for technique_counter in arange(1,n_techniques + 1).reshape(-1):
        no_correction_matrix_color[technique_counter,no_correction_matrix_color[technique_counter,:] == 1]=technique_counter
# Trainmatlab.v.0/aps_RMSE_comparison.m:953
    
    no_correction_matrix_color[end(),no_correction_matrix_color[end(),:] == 2]=n_techniques + 2
# Trainmatlab.v.0/aps_RMSE_comparison.m:955
    # plotting the results
    h_technique_matrix=figure('name','Technique numbers','position',cat(200,267,1501,579))
# Trainmatlab.v.0/aps_RMSE_comparison.m:959
    for temp_counter in arange(1,length(legend_str)).reshape(-1):
        plot(1,1,'sq','color',current_colors[temp_counter,:],'markerfacecolor',current_colors[temp_counter,:])
        hold('on')
    
    plot(1,1,'sq','color',cat(0.5,0.5,0.5),'markerfacecolor',cat(0.5,0.5,0.5))
    hold('on')
    imagesc(arange(1,n_ifgs),arange(1,n_techniques + 2),no_correction_matrix_color)
    hold('on')
    for technique_counter in arange(1,n_techniques + 3).reshape(-1):
        hold('on')
        plot(cat(1 - 0.5,n_ifgs + 0.5),cat(technique_counter,technique_counter) - 0.5,'k-')
    
    for ifg_counter in arange(1,n_ifgs + 1).reshape(-1):
        hold('on')
        plot(cat(ifg_counter,ifg_counter) - 0.5,cat(1 - 0.5,n_techniques + 2 + 0.5),'k-')
    
    axis('equal')
    axis('tight')
    axis('ij')
    box('on')
    title(cat('No correction estimated for marked squares'),'fontsize',fontsize)
    xlabel('Interferogram number','fontsize',fontsize)
    legend_str_temp=copy(legend_str)
# Trainmatlab.v.0/aps_RMSE_comparison.m:982
    legend_str_temp[end() + 1]=cat('Did not meet ',num2str(perc_threshold),'% threshold')
# Trainmatlab.v.0/aps_RMSE_comparison.m:983
    legend('location','northoutside',legend_str_temp)
    set(gca,'fontsize',fontsize,'ytick',[])
    caxis(cat(0,n_techniques + 2))
    colormap(cat([1,1,1],[current_colors],[0.5,0.5,0.5]))
    set(h_technique_matrix,'PaperPositionMode','auto')
    print_(h_technique_matrix,'-depsc',cat(save_path,filesep,'technique_matrix.eps'))
    print_(h_technique_matrix,'-dpng',cat(save_path,filesep,'technique_matrix.png'))
    # plotting the interferograms used in the RMSE computation for the
# different techniques
    str=''
# Trainmatlab.v.0/aps_RMSE_comparison.m:995
    while strcmpi(str,'y') != 1 and strcmpi(str,'n') != 1:

        str=input_(cat('Plot the infividual interferogram comparison? [y/n] \\n'),'s')
# Trainmatlab.v.0/aps_RMSE_comparison.m:997

    
    # only do this when requested
    if strcmpi(str,'y'):
        # getting the colarbar extends
        temp=reshape(data_option1[:,ix_ifgs,:],[],n_techniques + 1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:1002
        temp[isnan(temp[:,1]),:]=[]
# Trainmatlab.v.0/aps_RMSE_comparison.m:1003
        temp=sort(temp)
# Trainmatlab.v.0/aps_RMSE_comparison.m:1004
        ix_025perc=floor(dot(size(temp,1),0.025))
# Trainmatlab.v.0/aps_RMSE_comparison.m:1005
        if ix_025perc <= 0:
            ix_025perc=1
# Trainmatlab.v.0/aps_RMSE_comparison.m:1007
        ix_975perc=ceil(dot(size(temp,1),0.975))
# Trainmatlab.v.0/aps_RMSE_comparison.m:1009
        if ix_975perc <= 0:
            ix_975perc=size(temp,1)
# Trainmatlab.v.0/aps_RMSE_comparison.m:1011
        cbar=matlabarray(cat(min(cat(temp[ix_025perc,:])),max(cat(temp[ix_975perc,:]))))
# Trainmatlab.v.0/aps_RMSE_comparison.m:1013
        clear('ix_025perc','ix_975perc','temp')
        for technique_counter in arange(1,n_techniques + 1).reshape(-1):
            ps_plot(data_option1[:,ix_ifgs,technique_counter],0,cbar)
            h_technique_plot=copy(gcf)
# Trainmatlab.v.0/aps_RMSE_comparison.m:1018
            set(h_technique_plot,'name',save_str[technique_counter])
            # the first plot is the reference
            if technique_counter == 1:
                savename=matlabarray(cat(save_path,filesep,'data_ref_',save_str[technique_counter]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:1023
            else:
                savename=matlabarray(cat(save_path,filesep,'data_',save_str[technique_counter]))
# Trainmatlab.v.0/aps_RMSE_comparison.m:1026
            # saving the plots
            set(h_technique_plot,'PaperPositionMode','auto')
            print_(h_technique_plot,'-depsc',cat(savename,'.eps'))
            print_(h_technique_plot,'-dpng',cat(savename,'.png'))
    
    # saving the data used to make this plot
    if exist(cat(save_path,filesep,'RMSE_output.mat'),'file') == 2:
        save(cat(save_path,filesep,'RMSE_output.mat'),'-append','scatterplot_mean','scatterplot_ref','scatterplot_ref_mean','units_flag','scatterplot','legend_str','RMSE_perc','ref_technique','other_techniques','perc_threshold','deramp_flag','reference_flag','crop_out_flag','crop_file_path','ix_no_correction','no_correction_matrix_color')
    else:
        save(cat(save_path,filesep,'RMSE_output.mat'),'scatterplot_mean','scatterplot','scatterplot_ref','scatterplot_ref_mean','units_flag','legend_str','RMSE_perc','ref_technique','other_techniques','perc_threshold','deramp_flag','reference_flag','crop_out_flag','crop_file_path','ix_no_correction','no_correction_matrix_color')
    