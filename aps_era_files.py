# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/aps_era_files.m

    
@function
def aps_era_files(orderflag_ECMWF_website=None,*args,**kwargs):
    varargin = aps_era_files.varargin
    nargin = aps_era_files.nargin

    # script that runs and checks which ERA-I data files are needed based on
# the satellite pass time from the ECMWF website.
# INPUTS:
    
    #        ****** Specific for ECMWF data website ****** NOT BADC
#        orderflag_ECMWF_website = 0/1 - no request(0)  (default(0)),
# 
#     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # By David Bekaert - October 2013
# University of Leeds
# Modifications:
# HB 01/2014    adding automatic reading of UTC_sat & ordering of necessary
#               era files from ECMWF data website
# DB 02/2014    Include non-stamps processed data support 
# DB 02/2014    Put the python path in the source_file
# DB 03/2014    Change script such it auto downloads the data from ECMWF website
# DB 03/2014    Suppress command window output
# DB 06/2014    Include an overwrite flag for files and delete the files
#               first otherwize download does not work
# DB 06/2014    Fixed typo in the East extend of the ERA data downlaod
# DB 07/2014    Redefine meris_lat(lon)_range to region_lat(lon)_range
# DB 06/2015    Fix typo
    
    stdargin=copy(nargin)
# Trainmatlab.v.0/aps_era_files.m:41
    if stdargin < 1:
        orderflag_ECMWF_website=0
# Trainmatlab.v.0/aps_era_files.m:43
    
    # getting the variables from the parms_aps file
    workdir=copy(pwd)
# Trainmatlab.v.0/aps_era_files.m:48
    stamps_processed=getparm_aps('stamps_processed')
# Trainmatlab.v.0/aps_era_files.m:49
    UTC_sat=getparm_aps('UTC_sat')
# Trainmatlab.v.0/aps_era_files.m:50
    era_datapath=getparm_aps('era_datapath')
# Trainmatlab.v.0/aps_era_files.m:51
    datestructure='yyyymmdd'
# Trainmatlab.v.0/aps_era_files.m:52
    
    if isempty(era_datapath):
        error('please specify era_datapath')
    
    # loading the data
    if strcmp(stamps_processed,'y'):
        ll_matfile=getparm_aps('ll_matfile')
# Trainmatlab.v.0/aps_era_files.m:59
        ps=load(ll_matfile)
# Trainmatlab.v.0/aps_era_files.m:60
        dates=ps.day
# Trainmatlab.v.0/aps_era_files.m:61
        load('psver')
    else:
        psver=2
# Trainmatlab.v.0/aps_era_files.m:64
        ifgday_matfile=getparm_aps('ifgday_matfile')
# Trainmatlab.v.0/aps_era_files.m:65
        ifgs_dates=load(ifgday_matfile)
# Trainmatlab.v.0/aps_era_files.m:66
        ifgs_dates=ifgs_dates.ifgday
# Trainmatlab.v.0/aps_era_files.m:67
        dates=reshape(ifgs_dates,[],1)
# Trainmatlab.v.0/aps_era_files.m:68
        dates=unique(dates)
# Trainmatlab.v.0/aps_era_files.m:69
        dates=datenum(num2str(dates),'yyyymmdd')
# Trainmatlab.v.0/aps_era_files.m:70
    
    # getting the dates
    n_dates=length(dates)
# Trainmatlab.v.0/aps_era_files.m:74
    # find two closest times with respect the the 6 hr ERA-I data
    timelist_ERA=matlabarray(cat(['0000'],['0600'],['1200'],['1800'],['0000']))
# Trainmatlab.v.0/aps_era_files.m:78
    time=str2num(UTC_sat[1:2]) + str2num(UTC_sat[4:5]) / 60
# Trainmatlab.v.0/aps_era_files.m:79
    t_before=floor(time / 6)
# Trainmatlab.v.0/aps_era_files.m:80
    t_after=ceil(time / 6)
# Trainmatlab.v.0/aps_era_files.m:81
    fprintf(cat('Satellite pass is ',num2str(time),' UTC \\n'))
    # the faction it is closer towards the other date.
    f_after=(time - dot(6,t_before)) / (dot(6,t_after) - dot(6,t_before))
# Trainmatlab.v.0/aps_era_files.m:85
    f_after[isnan(f_after)]=1
# Trainmatlab.v.0/aps_era_files.m:86
    f_before=1 - f_after
# Trainmatlab.v.0/aps_era_files.m:87
    # the time stamp of the closest two ERA acquisitions
    time1=num2str(timelist_ERA[t_before + 1,:])
# Trainmatlab.v.0/aps_era_files.m:90
    time2=num2str(timelist_ERA[t_after + 1,:])
# Trainmatlab.v.0/aps_era_files.m:91
    # The date for the times after 1800 will change to the next day latter on
    clear('time')
    filelist=matlabarray([])
# Trainmatlab.v.0/aps_era_files.m:95
    datelist=matlabarray([])
# Trainmatlab.v.0/aps_era_files.m:96
    for d in arange(1,n_dates).reshape(-1):
        date=datestr(dates[d],datestructure)
# Trainmatlab.v.0/aps_era_files.m:98
        date2=copy(date)
# Trainmatlab.v.0/aps_era_files.m:101
        if t_after == 4:
            date2=datestr(dates[d] + 1,datestructure)
# Trainmatlab.v.0/aps_era_files.m:103
        for t in arange(1,2).reshape(-1):
            if t == 1:
                file=matlabarray(cat('ggap',date,time1,'.nc'))
# Trainmatlab.v.0/aps_era_files.m:108
            if t == 2:
                file=matlabarray(cat('ggap',date2,time2,'.nc'))
# Trainmatlab.v.0/aps_era_files.m:111
            filelist=matlabarray(cat([filelist],[file]))
# Trainmatlab.v.0/aps_era_files.m:113
            datelist=matlabarray(cat([datelist],[date],[(date2)]))
# Trainmatlab.v.0/aps_era_files.m:114
    
    filelist=unique(filelist,'rows')
# Trainmatlab.v.0/aps_era_files.m:117
    datelist=unique(datelist,'rows')
# Trainmatlab.v.0/aps_era_files.m:118
    # outputing this information to a file
    fid=fopen('ERA_I_files.txt','w')
# Trainmatlab.v.0/aps_era_files.m:122
    fid2=fopen('ERA_I_dates.txt','w')
# Trainmatlab.v.0/aps_era_files.m:123
    fprintf(cat('Required ERA-I files for all interferograms \\n'))
    for k in arange(1,size(filelist,1)).reshape(-1):
        fprintf(cat(filelist[k,:],'\\n'))
        fprintf(fid,cat(filelist[k,:],'\\n'))
    
    fclose(fid)
    for k in arange(1,size(datelist,1)).reshape(-1):
        fprintf(fid2,cat(datelist[k,3:end()],'\\n'))
    
    fclose(fid2)
    ## Below is specific for the ECMWF data website
    crop_range_in=2
# Trainmatlab.v.0/aps_era_files.m:139
    
    overwrite_flag=- 1
# Trainmatlab.v.0/aps_era_files.m:140
    if orderflag_ECMWF_website == 1:
        # weather model region
        fprintf('getting the data from the ECMWF service ...')
        region_lat_range=getparm_aps('region_lat_range')
# Trainmatlab.v.0/aps_era_files.m:146
        region_lon_range=getparm_aps('region_lon_range')
# Trainmatlab.v.0/aps_era_files.m:147
        if isempty(region_lat_range) == 1:
            error('Specify the region for the weather model data')
        fprintf('increasing crop area by %s deg in each direction \\n',num2str(crop_range_in))
        S=num2str(min(round(region_lat_range)) - crop_range_in)
# Trainmatlab.v.0/aps_era_files.m:152
        N=num2str(max(round(region_lat_range)) + crop_range_in)
# Trainmatlab.v.0/aps_era_files.m:153
        W=num2str(min(round(region_lon_range)) - crop_range_in)
# Trainmatlab.v.0/aps_era_files.m:154
        E=num2str(max(round(region_lon_range)) + crop_range_in)
# Trainmatlab.v.0/aps_era_files.m:155
        weatherregstr=matlabarray(cat(N,'/',W,'/',S,'/',E))
# Trainmatlab.v.0/aps_era_files.m:156
        fprintf('weather model region N/W/S/E %s \\n',weatherregstr)
        fprintf('using mars service from ECMWF downloading to \\n %s \\n',era_datapath)
        for l in arange(1,size(filelist,1)).reshape(-1):
            subdirpath=matlabarray(cat(era_datapath,'/',filelist[l,5:12],'/'))
# Trainmatlab.v.0/aps_era_files.m:163
            if exist(subdirpath,'dir') == 0:
                fprintf('creating directory %s \\n',subdirpath)
                mkdir(subdirpath)
                currentFolder=copy(pwd)
# Trainmatlab.v.0/aps_era_files.m:167
            if exist(cat(subdirpath,'ggap',filelist[l,5:16],'.nc'),'file') == 0:
                cd(subdirpath)
                fprintf('Order and downloading %s \\n',filelist[l,5:16])
                aps_era_ECMWF_Python(filelist[l,5:16],weatherregstr)
                python_str=matlabarray(cat('python ',filelist[l,5:16],'.py > ',filelist[l,5:16],'down.log &'))
# Trainmatlab.v.0/aps_era_files.m:173
                a,b=system(python_str,nargout=2)
# Trainmatlab.v.0/aps_era_files.m:174
                clear('a','b')
                cd(currentFolder)
            else:
                if overwrite_flag == - 1:
                    str=''
# Trainmatlab.v.0/aps_era_files.m:179
                    while logical_not(strcmpi(str,'y')) and logical_not(strcmpi(str,'n')):

                        fprintf(cat('Do you want to overwrite existing files? \\n'))
                        str=input_('[y: for yes, n: no] \\n','s')
# Trainmatlab.v.0/aps_era_files.m:182

                    if strcmpi(str,'n'):
                        overwrite_flag=0
# Trainmatlab.v.0/aps_era_files.m:185
                    else:
                        overwrite_flag=1
# Trainmatlab.v.0/aps_era_files.m:187
                # check if the files need to be overwritten
                if overwrite_flag == 1:
                    cd(subdirpath)
                    delete(cat(subdirpath,'ggap',filelist[l,5:16],'.nc'))
                    fprintf('Order and downloading %s \\n',filelist[l,5:16])
                    aps_era_ECMWF_Python(filelist[l,5:16],weatherregstr)
                    python_str=matlabarray(cat('python ',filelist[l,5:16],'.py > ',filelist[l,5:16],'down.log &'))
# Trainmatlab.v.0/aps_era_files.m:196
                    a,b=system(python_str,nargout=2)
# Trainmatlab.v.0/aps_era_files.m:197
                    clear('a','b')
                    cd(currentFolder)
                else:
                    if overwrite_flag == 0:
                        fprintf('File %s has already been downloaded \\n',filelist[l,:])
        cd(workdir)
    
    cd(workdir)
    