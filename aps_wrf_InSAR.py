# Autogenerated with SMOP 
from smop.core import *
# matlab/aps_wrf_InSAR.m

    
@function
def aps_wrf_InSAR(*args,**kwargs):
    varargin = aps_wrf_InSAR.varargin
    nargin = aps_wrf_InSAR.nargin

    # [] = aps_wrf_InSAR()
# Goes to the InSAR data path and interpolate the WRF-I result to the InSAR
# grid. The tropospheric correction results are stored in the "tca2.mat" or 
# "tca_sb2.mat" file as the ph_tropo_wrf variable.
# The sign convention is defined such ph_after_corection = ph - ph_tropo_wrf is the phase corrected 
# the tropospheric signal.
    
    # INPUTS:
    
    
    # OPTIONAL INPUTS
# lambda                Radar wavelength [cm], by default c-band (5.6)
# datestructure         WRF date structure, by default this is assumed 'yyyymmdd'.
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # By David Bekaert -- University of Leeds
    
    # Modifications
# 10/2013   DB      Include conversion from zenith to slant delay 
# 10/2013   DB      Include processing structure different from stamps
# 11/2013   DB      Change the name to Hydrostratic as dry is incorrect
#                   naming
# 04/2015   DB      Bug correction for non-stamps processed case. ps
#                   variable definition of dates, definition of lonlat, look angle.
    
    # Filename suffix of the output files
    wetoutfile='_ZWD.xyz'
# matlab/aps_wrf_InSAR.m:44
    hydroutfile='_ZHD.xyz'
# matlab/aps_wrf_InSAR.m:45
    # getting the variables from the parms_aps file
    stamps_processed=getparm_aps('stamps_processed')
# matlab/aps_wrf_InSAR.m:48
    ll_matfile=getparm_aps('ll_matfile')
# matlab/aps_wrf_InSAR.m:49
    wrf_datapath=getparm_aps('wrf_datapath')
# matlab/aps_wrf_InSAR.m:50
    lambda_=dot(getparm_aps('lambda'),100)
# matlab/aps_wrf_InSAR.m:51
    
    datestructure='yyyymmdd'
# matlab/aps_wrf_InSAR.m:52
    
    # getting the dropped ifgs
    drop_ifg_index=getparm('drop_ifg_index')
# matlab/aps_wrf_InSAR.m:54
    # loading the data
    if strcmp(stamps_processed,'y'):
        fprintf('Stamps processed structure \\n')
        ps=load(ll_matfile)
# matlab/aps_wrf_InSAR.m:59
        load('psver')
        dates=ps.day
# matlab/aps_wrf_InSAR.m:61
        lonlat=ps.lonlat
# matlab/aps_wrf_InSAR.m:62
        look_angle=getparm_aps('look_angle')
# matlab/aps_wrf_InSAR.m:63
        if ischar(look_angle) == 1:
            look_angle=load(look_angle)
# matlab/aps_wrf_InSAR.m:65
            look_angle=look_angle.la
# matlab/aps_wrf_InSAR.m:66
        # getting the parms file list from stamps to see the final ifg list
        if strcmp(getparm('small_baseline_flag'),'y'):
            sb_flag=1
# matlab/aps_wrf_InSAR.m:71
        else:
            sb_flag=0
# matlab/aps_wrf_InSAR.m:73
        n_ifg=ps.n_ifg
# matlab/aps_wrf_InSAR.m:76
        if sb_flag == 1:
            # for SB
            ifg_number=cat(arange(1,n_ifg)).T
# matlab/aps_wrf_InSAR.m:80
            ifgday_ix=ps.ifgday_ix
# matlab/aps_wrf_InSAR.m:81
            ifgday_ix[drop_ifg_index,:]=[]
# matlab/aps_wrf_InSAR.m:83
            ifg_number[drop_ifg_index]=[]
# matlab/aps_wrf_InSAR.m:84
            ifgs_ix=matlabarray(cat(ifgday_ix,ifg_number))
# matlab/aps_wrf_InSAR.m:87
        else:
            # slightly different for PS.
            date_slave_ix=cat(arange(1,n_ifg)).T
# matlab/aps_wrf_InSAR.m:90
            ifg_number=cat(arange(1,n_ifg)).T
# matlab/aps_wrf_InSAR.m:91
            date_slave_ix[drop_ifg_index]=[]
# matlab/aps_wrf_InSAR.m:94
            ifg_number[drop_ifg_index]=[]
# matlab/aps_wrf_InSAR.m:95
            date_master_ix=repmat(ps.master_ix,size(date_slave_ix,1),1)
# matlab/aps_wrf_InSAR.m:98
            ifgs_ix=matlabarray(cat(date_master_ix,date_slave_ix,ifg_number))
# matlab/aps_wrf_InSAR.m:101
    else:
        psver=2
# matlab/aps_wrf_InSAR.m:106
        sb_flag=0
# matlab/aps_wrf_InSAR.m:109
        lonlat=load(ll_matfile)
# matlab/aps_wrf_InSAR.m:111
        lonlat=lonlat.lonlat
# matlab/aps_wrf_InSAR.m:112
        look_angle=getparm_aps('look_angle')
# matlab/aps_wrf_InSAR.m:113
        if ischar(look_angle) == 1:
            look_angle=load(look_angle)
# matlab/aps_wrf_InSAR.m:115
            look_angle=look_angle.la
# matlab/aps_wrf_InSAR.m:116
        # getting the dates in jullian format
        ifgday_matfile=getparm_aps('ifgday_matfile')
# matlab/aps_wrf_InSAR.m:120
        ifgs_dates=load(ifgday_matfile)
# matlab/aps_wrf_InSAR.m:121
        ifgs_dates=ifgs_dates.ifgday
# matlab/aps_wrf_InSAR.m:122
        dates=reshape(ifgs_dates,[],1)
# matlab/aps_wrf_InSAR.m:123
        dates=unique(dates)
# matlab/aps_wrf_InSAR.m:124
        dates=datenum(num2str(dates),'yyyymmdd')
# matlab/aps_wrf_InSAR.m:125
        dates=sort(dates)
# matlab/aps_wrf_InSAR.m:126
        # getting the ix position for the master and slave dates with respect
    # to the times
        date_master=datenum(num2str(ifgs_dates[:,1]),'yyyymmdd')
# matlab/aps_wrf_InSAR.m:130
        date_slave=datenum(num2str(ifgs_dates[:,2]),'yyyymmdd')
# matlab/aps_wrf_InSAR.m:131
        ifg_number=cat(arange(1,size(date_master,1))).T
# matlab/aps_wrf_InSAR.m:132
        date_slave[drop_ifg_index]=[]
# matlab/aps_wrf_InSAR.m:135
        date_master[drop_ifg_index]=[]
# matlab/aps_wrf_InSAR.m:136
        ifg_number[drop_ifg_index]=[]
# matlab/aps_wrf_InSAR.m:137
        for k in arange(1,size(date_master,1)).reshape(-1):
            date_master_ix[k,1]=find(date_master[k,1] == dates)
# matlab/aps_wrf_InSAR.m:139
            date_slave_ix[k,1]=find(date_slave[k,1] == dates)
# matlab/aps_wrf_InSAR.m:140
        # ix interferograms
        ifgs_ix=matlabarray(cat(date_master_ix,date_slave_ix,ifg_number))
# matlab/aps_wrf_InSAR.m:144
        n_ifg=size(ifgs_dates,1)
# matlab/aps_wrf_InSAR.m:147
        ps.day = copy(dates)
# matlab/aps_wrf_InSAR.m:150
    
    n_dates=length(dates)
# matlab/aps_wrf_InSAR.m:155
    InSAR_datapath=matlabarray(cat('.',filesep))
# matlab/aps_wrf_InSAR.m:156
    apsname=matlabarray(cat(InSAR_datapath,filesep,'tca',num2str(psver),'.mat'))
# matlab/aps_wrf_InSAR.m:157
    apssbname=matlabarray(cat(InSAR_datapath,filesep,'tca_sb',num2str(psver),'.mat'))
# matlab/aps_wrf_InSAR.m:158
    ## loading the WRF-I data
# initialisation
    d_wrf_wet=NaN(cat(size(lonlat,1),n_dates))
# matlab/aps_wrf_InSAR.m:165
    
    d_wrf_dry=NaN(cat(size(lonlat,1),n_dates))
# matlab/aps_wrf_InSAR.m:166
    
    ix_no_wrf=matlabarray([])
# matlab/aps_wrf_InSAR.m:169
    counter=0
# matlab/aps_wrf_InSAR.m:170
    for k in arange(1,n_dates).reshape(-1):
        # getting the SAR data and convert it to a string
        date_str=datestr(ps.day(k,1),datestructure)
# matlab/aps_wrf_InSAR.m:173
        wrf_filename_wet=matlabarray(cat(wrf_datapath,filesep,date_str,filesep,date_str,wetoutfile))
# matlab/aps_wrf_InSAR.m:176
        wrf_filename_hydro=matlabarray(cat(wrf_datapath,filesep,date_str,filesep,date_str,hydroutfile))
# matlab/aps_wrf_InSAR.m:177
        # leave NaN's in the matrix.
        if exist(wrf_filename_wet,'file') == 2:
            # computing the dry delay
            xyz_input,xyz_output=load_wrf_SAR(wrf_filename_hydro,lonlat,nargout=2)
# matlab/aps_wrf_InSAR.m:184
            d_wrf_dry[:,k]=xyz_output[:,3]
# matlab/aps_wrf_InSAR.m:187
            clear('xyz_input','xyz_output')
            # computing the wet delays
            xyz_input,xyz_output=load_wrf_SAR(wrf_filename_wet,lonlat,nargout=2)
# matlab/aps_wrf_InSAR.m:191
            d_wrf_wet[:,k]=xyz_output[:,3]
# matlab/aps_wrf_InSAR.m:194
            clear('xyz_output')
            counter=counter + 1
# matlab/aps_wrf_InSAR.m:196
        else:
            # rejected list of WRF-I images
            ix_no_wrf=matlabarray(cat(ix_no_wrf,k))
# matlab/aps_wrf_InSAR.m:200
        clear('wrf_filename_hydro','wrf_filename_wet','date_str')
    
    fprintf(cat(num2str(counter),' out of ',num2str(n_dates),' SAR images have a tropospheric delay estimated \\n'))
    ## Computing the type of delay
    d_wrf=d_wrf_dry + d_wrf_wet
# matlab/aps_wrf_InSAR.m:208
    ## Converting the Zenith delays to a slant delay
    if size(look_angle,2) > 1 and size(look_angle,1) == 1:
        look_angle=look_angle.T
# matlab/aps_wrf_InSAR.m:212
    
    if size(look_angle,2) == 1:
        look_angle=repmat(look_angle,1,size(d_wrf,2))
# matlab/aps_wrf_InSAR.m:215
        if size(look_angle,1) == 1:
            look_angle=repmat(look_angle,size(d_wrf,1),1)
# matlab/aps_wrf_InSAR.m:217
    
    
    d_wrf=d_wrf / cos(look_angle)
# matlab/aps_wrf_InSAR.m:221
    d_wrf_dry=d_wrf_dry / cos(look_angle)
# matlab/aps_wrf_InSAR.m:222
    d_wrf_wet=d_wrf_wet / cos(look_angle)
# matlab/aps_wrf_InSAR.m:223
    ## Converting the WRF-I delays to a phase delay
# converting to phase delay. 
# The sign convention is such that ph_corrected = ph_original - ph_wrf
    ph_SAR_wrf=multiply(dot(- 4,pi) / lambda_,d_wrf)
# matlab/aps_wrf_InSAR.m:229
    ph_SAR_wrf_dry=multiply(dot(- 4,pi) / lambda_,d_wrf_dry)
# matlab/aps_wrf_InSAR.m:230
    ph_SAR_wrf_wet=multiply(dot(- 4,pi) / lambda_,d_wrf_wet)
# matlab/aps_wrf_InSAR.m:231
    ## Computing the interferometric tropopsheric delays
    
    # removing the dates for which there is no data.
    if isempty(ix_no_wrf) != 1:
        for k in arange(1,length(ix_no_wrf)).reshape(-1):
            # reject based on slave dates
            ix_ifg_reject=find(ix_no_wrf[k] == ifgs_ix[:,2])
# matlab/aps_wrf_InSAR.m:241
            ifgs_ix[ix_ifg_reject,:]=[]
# matlab/aps_wrf_InSAR.m:242
            ix_ifg_reject=find(ix_no_wrf[k] == ifgs_ix[:,1])
# matlab/aps_wrf_InSAR.m:244
            ifgs_ix[ix_ifg_reject,:]=[]
# matlab/aps_wrf_InSAR.m:245
            clear('ix_ifg_reject')
    
    # computing the interferometric delay for each remaining interferogram
    n_ifg_wrf=size(ifgs_ix,1)
# matlab/aps_wrf_InSAR.m:251
    if isempty(ifgs_ix):
        fprintf('Not enough WRF data to compute interferometric delays...\\n')
    
    # initialize the WRF phase matrix for all interferograms, including those without correction.
    ph_tropo_wrf=zeros(cat(size(lonlat,1),n_ifg))
# matlab/aps_wrf_InSAR.m:256
    ph_tropo_wrf_hydro=zeros(cat(size(lonlat,1),n_ifg))
# matlab/aps_wrf_InSAR.m:257
    ph_tropo_wrf_wet=zeros(cat(size(lonlat,1),n_ifg))
# matlab/aps_wrf_InSAR.m:258
    for k in arange(1,n_ifg_wrf).reshape(-1):
        ph_tropo_wrf[:,ifgs_ix[k,3]]=ph_SAR_wrf[:,ifgs_ix[k,1]] - ph_SAR_wrf[:,ifgs_ix[k,2]]
# matlab/aps_wrf_InSAR.m:261
        ph_tropo_wrf_hydro[:,ifgs_ix[k,3]]=ph_SAR_wrf_dry[:,ifgs_ix[k,1]] - ph_SAR_wrf_dry[:,ifgs_ix[k,2]]
# matlab/aps_wrf_InSAR.m:262
        ph_tropo_wrf_wet[:,ifgs_ix[k,3]]=ph_SAR_wrf_wet[:,ifgs_ix[k,1]] - ph_SAR_wrf_wet[:,ifgs_ix[k,2]]
# matlab/aps_wrf_InSAR.m:263
    
    if sb_flag == 1:
        if exist(apssbname,'file') == 2:
            save(apssbname,'-append','ph_tropo_wrf','ph_tropo_wrf_wet','ph_tropo_wrf_hydro')
        else:
            save(apssbname,'ph_tropo_wrf','ph_tropo_wrf_wet','ph_tropo_wrf_hydro')
    else:
        if exist(apsname,'file') == 2:
            save(apsname,'-append','ph_tropo_wrf','ph_tropo_wrf_wet','ph_tropo_wrf_hydro')
        else:
            save(apsname,'ph_tropo_wrf','ph_tropo_wrf_wet','ph_tropo_wrf_hydro')
    