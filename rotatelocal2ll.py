# Autogenerated with SMOP 
from smop.core import *
# matlab/rotatelocal2ll.m

    
@function
def rotatelocal2ll(xy_rotatelocal=None,heading=None,origin=None,*args,**kwargs):
    varargin = rotatelocal2ll.varargin
    nargin = rotatelocal2ll.nargin

    # [ll] = rotatelocal2ll(xy_rotatelocal,heading,origin)
# Convert to longitude latitude from a local local reference frame which
# has been rotated over the heading and which will be rotated back over
# this angle. 
# The heading of the satellite, which is define positive clockwize from the north to the flight direction.
# The dataset will be rotated in opposit direction 
# The output grid is given in km.
    
    # inputs: 
# xy_rotatelocal:    The data converted to a local rotated reference frame [km].
# rotation_angle:    Rotation angle of the dataset [deg].
# origin:            Origin used to convert to ll [deg]
# 
# outputs:
# ll:               lonlat coordinates
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # By David Bekaert - February 2014
# PhD student - University of Leeds
    
    # modifications:
#
    
    plot_flag=0
# matlab/rotatelocal2ll.m:41
    if nargin < 3:
        error('myApp:argChk',cat('All inpout arguments needs to be specified \\n'))
    
    if nargin < 2 and nargin == 1:
        error('myApp:argChk',cat('Heading or rotation angle needs to be specified. \\n'))
    
    if nargin < 1:
        error('myApp:argChk',cat('xy_rotatelocal needs to be specified. \\n'))
    
    xy_rotatelocal=xy_rotatelocal.T
# matlab/rotatelocal2ll.m:54
    # define and convert the rotation angle to radians:
    rotation_angle=dot(heading,pi) / 180
# matlab/rotatelocal2ll.m:57
    
    # Rotating the local reference frame
    Rotation_matrix=matlabarray(cat(cos(rotation_angle),- sin(rotation_angle),sin(rotation_angle),cos(rotation_angle)))
# matlab/rotatelocal2ll.m:60
    # performing the rotation of the data
    xy_local=(numpy.linalg.solve(Rotation_matrix,xy_rotatelocal)).T
# matlab/rotatelocal2ll.m:63
    # converting to geo-coordiantes
    ll=local2llh(xy_local.T,origin)
# matlab/rotatelocal2ll.m:66
    ll=ll.T
# matlab/rotatelocal2ll.m:67
    if plot_flag == 1:
        xy_rotatelocal=xy_rotatelocal.T
# matlab/rotatelocal2ll.m:71
        figure('name','Dataset in geo-coordinates')
        plot(ll[:,1],ll[:,2],'k.')
        axis('equal')
        axis('tight')
        figure('name','Rotated dataset in a local reference frame')
        plot(xy_rotatelocal[:,1],xy_rotatelocal[:,2],'k.')
        axis('equal')
        axis('tight')
        figure('name','Rotated dataset in a local reference frame')
        plot(xy_local[:,1],xy_local[:,2],'k.')
        axis('equal')
        axis('tight')
    