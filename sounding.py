# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/sounding.m

    
@function
def sounding_new(start_date=None,end_date=None,plot_flag=None,hydro=None,wet=None,*args,**kwargs):
    varargin = sounding_new.varargin
    nargin = sounding_new.nargin

    # This function computes the refractivity and integrated LOS delays.
# In addition it will estimate the power-law decay cofficient and height at which the relative 
# tropopsheric delays are approximately zero. Both coefficients are given based on the full heifght range
# and the lower height range up to hc. Note that alpha is dimensionless and
# h0 is the height in m units. Sounding data needs to be stored in the 
# correct format! Read below:
# 
# ---- Input ----
# All inputs will be retreived from the aps_parms file. Set the inputs by change 
# setparm_aps('Parameter_name',new_value)
    
    # Variables include:
# look_angle     Mean look angle of the data in rad. By default this is
#                assumed to be 21 degees.
# lambda         Radar wavelength in m. By default this is assumed to be
#                0.056 cm (C-band).
# h_0_threshold  Consider only soundings that go up till the h0 threshold in km.
#                Being the height at which the differential delay is small.
#                When '0' is specified it is estimated from the data. Note that
# 		 soundings should go up high enough to cover the lower tropopshere (up to 16 km).
#                By default the threshold is set to be 15 km.
# h_thres_hc     Height range [0 h_thres_hc] over which the power-law decay 
#                coefficient is estimated computed. By default this is set to be 4 km.
# start_date	 Start date of the sounding period, by default [], full period
#                is considered. Specify as a string in 'yyyymmdd' format.
# end_date       End date of the sounding period, by default [], full period 
#                is considered. Specify as a string in 'yyyymmdd' format.
# time_stamp	 Include a time stamp to it. This is a column vector with 
#                strings e.g. ['00';'12'] for 00Z and 12Z. Only those files 
#                ending with this are considered in the computation.
# sounding_dir	 Optional argument giving directly the full path to the soundings.
#                The files on this path should be the YYYYMMDD_HH.mat files. 
# error_promp_flag By default ([] or 'y') this is turn on. Can be usefull to turn of
#                when running in a batch mode. Instead NaN values will be outputed.
    
    # Output:
# alpha and h0. The computed sounding delays: refractivity, the (mean) LOS delay [m],
# the (mean) LOS phase delay [rad], and corresponding heights are appended to the existing 
# sounding .mat files.
    
    
    # NOTE on data format:
# sounding data needs to be stored in a folder called sounding_data, 
# within your processing directory. Within this folder, each sounding 
# aquisition needs to be stored in as 8 digit .mat files, e.g. YYYYMMDD_HH.mat 
# format, with the  pressure (hPa), temperature (degree), relative humidity (#)
# and heights (m) as matlab variables P, T, RH and h.
    
    # OPTIONAL: 
# - visulize intermediate results (refractivity, delay,
#   mean delay and hc relation with H), by putting plot_flag to 1. By
#   default this is not done.
# - Overwrite all the data to recompute the delays by putting recompute flag to 1
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # September 2010 --- Bekaert David 
# Modifications:
# 01/11/2011:  DB    Modify from initial version
# 01/12/2011:  DB    Making compatible to other datasets
# 01/11/2012:  DB    Made program more efficient
# 05/11/2012:  DB    Fix bug in loading of the files
# 10/02/2013:  DB    Integrate with other part of toolbox
# 18/03/2013:  DB    Include a time stamp to it.
# 18/03/2013:  DB    Include a start and end time.
# 18/03/2013:  DB    Account for NaN values by removing them for all data columns
# 19/03/2013:  DB    Set the min height range of the delay curve by comparing it to 
#                    the median of the height range
# 19/03/2013:  DB    Include a flag to suppress error messages by lack of sounding data and 
#                    directly pass NaN value through it.
# 25/03/2013:  DB    Compute the power law coefficient from loglog relation
# 03/04/2013:  DB    Include h0 estimation option from the net delays
# 24/04/2013:  DB    Incorporate in the bigger aps toolbox. Change towards
#                    loglog powerlaw computation.
# 10/05/2013:  DB    Loading the default parameters from the parms_aps file.
# 02/10/2013:  DB    Change filename to sounding and clean the syntax
# 29/10/2013:  DB    Allow the look angle to be a specified as a file
# 29/11/2013:  DB    Get stamps processing flag before lookangle  loading
# 06/11/2014:  DB    Add hydrostatic and wet delay options
    
    # --------- VARIABELS ---------- #
    fontsize=20
# Trainmatlab.v.0/sounding.m:98
    
    save_fig=0
# Trainmatlab.v.0/sounding.m:99
    
    recompute=0
# Trainmatlab.v.0/sounding.m:100
    
    if nargin < 3 or isempty(plot_flag):
        plot_flag=0
# Trainmatlab.v.0/sounding.m:102
    
    if nargin < 4:
        hydro=1
# Trainmatlab.v.0/sounding.m:105
    
    if nargin < 5:
        wet=1
# Trainmatlab.v.0/sounding.m:108
    
    netdelay_color=matlabarray([])
# Trainmatlab.v.0/sounding.m:110
    curdir=copy(pwd)
# Trainmatlab.v.0/sounding.m:111
    hydro
    wet
    ## Setting the defaults were needed
    look_angle=getparm_aps('look_angle')
# Trainmatlab.v.0/sounding.m:117
    lambda_=getparm_aps('lambda')
# Trainmatlab.v.0/sounding.m:118
    h_0_threshold=getparm_aps('sounding_h0')
# Trainmatlab.v.0/sounding.m:119
    h_thres_hc=getparm_aps('sounding_h_alpha_thres')
# Trainmatlab.v.0/sounding.m:120
    if nargin < 1 or isempty(start_date):
        start_date=getparm_aps('sounding_start_date')
# Trainmatlab.v.0/sounding.m:123
    
    if nargin < 2 or isempty(end_date):
        end_date=getparm_aps('sounding_end_date')
# Trainmatlab.v.0/sounding.m:126
    
    time_stamp=getparm_aps('sounding_time_stamp')
# Trainmatlab.v.0/sounding.m:128
    sounding_dir=getparm_aps('sounding_dir')
# Trainmatlab.v.0/sounding.m:129
    error_promp_flag=getparm_aps('sounding_error_promp')
# Trainmatlab.v.0/sounding.m:130
    clear('h_0_threshold_default')
    clear('h_thres_hc_default')
    clear('look_angle_default')
    clear('lambda_default')
    stamps_processed=getparm_aps('stamps_processed')
# Trainmatlab.v.0/sounding.m:134
    # checking if the look angle is a file or not
    if ischar(look_angle):
        # look angle is specified as a file [rad]
        if strcmp(stamps_processed,'y'):
            look_angle=load(look_angle)
# Trainmatlab.v.0/sounding.m:140
            look_angle=look_angle.la
# Trainmatlab.v.0/sounding.m:141
            look_angle=mean(look_angle)
# Trainmatlab.v.0/sounding.m:142
        else:
            look_angle=load(look_angle)
# Trainmatlab.v.0/sounding.m:144
            look_angle=mean(look_angle)
# Trainmatlab.v.0/sounding.m:146
    
    # convert units
    theta=copy(look_angle)
# Trainmatlab.v.0/sounding.m:151
    
    h_0_threshold=dot(h_0_threshold,1000)
# Trainmatlab.v.0/sounding.m:152
    
    h_thres_hc=dot(h_thres_hc,1000)
# Trainmatlab.v.0/sounding.m:153
    
    clear('look_angle')
    # get height information
    if plot_flag == 1:
        hgt_matfile=getparm_aps('hgt_matfile')
# Trainmatlab.v.0/sounding.m:158
        hgt=load(hgt_matfile)
# Trainmatlab.v.0/sounding.m:159
        max_height=max(hgt.hgt)
# Trainmatlab.v.0/sounding.m:160
        min_height=min(hgt.hgt)
# Trainmatlab.v.0/sounding.m:161
        clear('hgt')
        clear('hgt_matfile')
    
    # Include a while loop. Depending on error message flag, it will break out of the loop and pass
# NaN values as output.
    continue_flag=1
# Trainmatlab.v.0/sounding.m:167
    abord_flag=0
# Trainmatlab.v.0/sounding.m:168
    
    while continue_flag:

        ## Getting the file list of the sounding data
        if isempty(sounding_dir) != 1:
            if exist(cat(sounding_dir,filesep),'dir') != 7:
                error('myApp:argChk',cat('The specified filepath of the sounding data does not exist,...  \\nAbort,... \\n'))
            cd(sounding_dir)
        else:
            if exist('sounding_data/','dir') != 7:
                error('myApp:argChk',cat('There is no sounding_data directory,...  \\nAbort,... \\n'))
            cd('sounding_data')
        if exist('sounding.list','file') != 2:
            # making a list of all the sounding files
            dummy,dummy2=system('echo sounding_list > sounding.list',nargout=2)
# Trainmatlab.v.0/sounding.m:185
            clear('dummy')
            clear('dummy2')
            for k in arange(1,size(time_stamp,1)).reshape(-1):
                command_str=matlabarray(cat('ls [0-9]???????_',time_stamp[k,:],'.mat >> sounding.list'))
# Trainmatlab.v.0/sounding.m:188
                dummy,dummy2=system(command_str,nargout=2)
# Trainmatlab.v.0/sounding.m:189
                clear('dummy')
                clear('dummy2')
        temp=tdfread('sounding.list')
# Trainmatlab.v.0/sounding.m:193
        dummy,dummy2=system('rm sounding.list',nargout=2)
# Trainmatlab.v.0/sounding.m:194
        clear('dummy')
        clear('dummy2')
        date_list_temp=temp.sounding_list(arange(),cat(arange(1,8)))
# Trainmatlab.v.0/sounding.m:196
        sounding_list=temp.sounding_list
# Trainmatlab.v.0/sounding.m:197
        # selecting a date range when requested
        clear('ix')
        if isempty(start_date) != 1 and isempty(end_date) != 1:
            ix=find(datenum(date_list_temp,'yyyymmdd') >= logical_and(datenum(start_date,'yyyymmdd'),datenum(date_list_temp,'yyyymmdd')) <= datenum(end_date,'yyyymmdd'))
# Trainmatlab.v.0/sounding.m:203
            save_name=matlabarray(cat('Delay_',start_date,'_',end_date))
# Trainmatlab.v.0/sounding.m:204
        else:
            if isempty(start_date) != 1 and isempty(end_date) == 1:
                ix=find(datenum(date_list_temp,'yyyymmdd') >= datenum(start_date,'yyyymmdd'))
# Trainmatlab.v.0/sounding.m:206
                save_name=matlabarray(cat('Delay_',start_date,'_end'))
# Trainmatlab.v.0/sounding.m:207
            else:
                if isempty(start_date) == 1 and isempty(end_date) != 1:
                    ix=find(datenum(date_list_temp,'yyyymmdd') <= datenum(end_date,'yyyymmdd'))
# Trainmatlab.v.0/sounding.m:209
                    save_name=matlabarray(cat('Delay_start_',end_date))
# Trainmatlab.v.0/sounding.m:210
                else:
                    save_name=matlabarray(cat('Delay'))
# Trainmatlab.v.0/sounding.m:212
        # checking if the save figures folder exist
        if save_fig == logical_and(1,exist('figures','dir')) != 7:
            mkdir('figures')
        if isempty(start_date) != 1 or isempty(end_date) != 1:
            if isempty(ix) != 1:
                date_list_temp=date_list_temp[ix,:]
# Trainmatlab.v.0/sounding.m:222
                sounding_list=sounding_list[ix,:]
# Trainmatlab.v.0/sounding.m:223
            else:
                fprintf('No sounding has been acquired in this period \\n')
                continue_flag=0
# Trainmatlab.v.0/sounding.m:226
                abord_flag=1
# Trainmatlab.v.0/sounding.m:227
                break
            clear('temp','ix')
        ## Computing refractivity
        fprintf('Computing the refractivity \\n')
        ix_skip_sounding=matlabarray([])
# Trainmatlab.v.0/sounding.m:237
        warning('off','MATLAB:load:variableNotFound')
        for i in arange(1,size(sounding_list,1)).reshape(-1):
            temp=load(sounding_list[i,:],'h_min_souding')
# Trainmatlab.v.0/sounding.m:240
            if isfield(temp,'h_min_souding') and recompute == 0:
                # storing variables for latter processing
                h_range[i,1]=temp.h_min_souding
# Trainmatlab.v.0/sounding.m:243
                if plot_flag == 1:
                    data=load(sounding_list[i,:],'h_max_souding','Ndelay')
# Trainmatlab.v.0/sounding.m:246
                    Ndelay=data.Ndelay
# Trainmatlab.v.0/sounding.m:247
                else:
                    data=load(sounding_list[i,:],'h_max_souding')
# Trainmatlab.v.0/sounding.m:249
                h_range[i,2]=data.h_max_souding
# Trainmatlab.v.0/sounding.m:251
                clear('data')
                skip_sounding=0
# Trainmatlab.v.0/sounding.m:253
            else:
                load(sounding_list[i,:])
                # - P (pressure in [hPa])
        # - T (temperature in [degrees])
        # - RH (relative humidity in [#]) 
        # - h (altitude in [m])
                # coping with NaN values in the RH data
                ix1=find(isnan(RH) == 1)
# Trainmatlab.v.0/sounding.m:265
                ix2=find(isnan(h) == 1)
# Trainmatlab.v.0/sounding.m:266
                ix=unique(cat([ix1],[ix2]))
# Trainmatlab.v.0/sounding.m:267
                P[ix]=[]
# Trainmatlab.v.0/sounding.m:268
                RH[ix]=[]
# Trainmatlab.v.0/sounding.m:269
                T[ix]=[]
# Trainmatlab.v.0/sounding.m:270
                h[ix]=[]
# Trainmatlab.v.0/sounding.m:271
                clear('ix')
                clear('ix1')
                clear('ix2')
                # coping with errors in the data when a double recording was made
                ix_repeat=find(diff(sort(h)) == 0)
# Trainmatlab.v.0/sounding.m:275
                h[ix_repeat]=[]
# Trainmatlab.v.0/sounding.m:276
                P[ix_repeat]=[]
# Trainmatlab.v.0/sounding.m:277
                RH[ix_repeat]=[]
# Trainmatlab.v.0/sounding.m:278
                T[ix_repeat]=[]
# Trainmatlab.v.0/sounding.m:279
                clear('ix_repeat')
                # Checking if there is still data left
                if isempty(h) == 1 and size(sounding_list,1) == 1 and strcmp(error_promp_flag,'y'):
                    error('myApp:argChk',cat('Datafile contains no numeric data. \\n'))
                else:
                    if isempty(h) == 1:
                        fprintf(cat(sounding_list[i,:],' sounding skipped as it containes no numeric data\\n'))
                        skip_sounding=1
# Trainmatlab.v.0/sounding.m:288
                        ix_skip_sounding=matlabarray(cat([ix_skip_sounding],[i]))
# Trainmatlab.v.0/sounding.m:289
                    else:
                        skip_sounding=0
# Trainmatlab.v.0/sounding.m:291
                # when possible compute the refractivity
                if skip_sounding == 1:
                    # case of no data
                    h_range[i,1]=NaN
# Trainmatlab.v.0/sounding.m:297
                    h_range[i,2]=NaN
# Trainmatlab.v.0/sounding.m:298
                else:
                    # saterated pressure es
                    Rv=461.524
# Trainmatlab.v.0/sounding.m:301
                    T0=273.16
# Trainmatlab.v.0/sounding.m:302
                    L=2500000.0
# Trainmatlab.v.0/sounding.m:303
                    e0=6.11
# Trainmatlab.v.0/sounding.m:304
                    T=T + 273.15
# Trainmatlab.v.0/sounding.m:305
                    es=multiply(e0,exp(multiply(L / Rv,(1.0 / T0 - 1.0 / T))))
# Trainmatlab.v.0/sounding.m:306
                    RH=RH / 100
# Trainmatlab.v.0/sounding.m:309
                    e=multiply(RH,es)
# Trainmatlab.v.0/sounding.m:310
                    # Refractivety - Hydrostatic term
                    k1=77.6
# Trainmatlab.v.0/sounding.m:313
                    Ndelay.Nhydro = copy(multiply(k1,P) / T)
# Trainmatlab.v.0/sounding.m:314
                    # Refractivity - Wet term
                    k2_n=23.3
# Trainmatlab.v.0/sounding.m:317
                    k3=375000.0
# Trainmatlab.v.0/sounding.m:318
                    Ndelay.Nwet = copy(multiply(k2_n,e) / T + multiply(k3,e) / T ** 2)
# Trainmatlab.v.0/sounding.m:319
                    # refractivety
                    Ndelay.N = copy(Ndelay.Nhydro + Ndelay.Nwet)
# Trainmatlab.v.0/sounding.m:322
                    Ndelay.h = copy(h)
# Trainmatlab.v.0/sounding.m:325
                    h_min_souding=min(h)
# Trainmatlab.v.0/sounding.m:328
                    h_max_souding=max(h)
# Trainmatlab.v.0/sounding.m:329
                    save(sounding_list[i,:],'-append','Ndelay','h_min_souding','h_max_souding')
                    # storing variables for latter processing
                    h_range[i,1]=h_min_souding
# Trainmatlab.v.0/sounding.m:335
                    h_range[i,2]=h_max_souding
# Trainmatlab.v.0/sounding.m:336
                    clear('h_max_souding')
                    clear('h_min_souding')
            if dot(floor(i / 10),10) == i:
                fprintf(cat(num2str(i),' refraction dates completed out of ',num2str(size(sounding_list,1)),' \\n'))
            # Test visualizing refractivity with height
            if plot_flag == 1 and skip_sounding != 1:
                if i == 1:
                    figure1=figure('name','Refractivity with height')
# Trainmatlab.v.0/sounding.m:349
                    ylabel('Height [km]','fontsize',12)
                    xlabel('Refractivity [ppm]','fontsize',12)
                    line_colors=hsv(size(sounding_list,1))
# Trainmatlab.v.0/sounding.m:352
                    box('on')
                    set(gca,'fontsize',12)
                figure(figure1)
                hold('on')
                if hydro == 1 and wet == 0:
                    if i == 1:
                        title('Refractivity with height','fontsize',12)
                    plot(Ndelay.Nhydro,Ndelay.h / 1000,'-','color',line_colors[i,:])
                else:
                    if hydro == 0 and wet == 1:
                        if i == 1:
                            title('Refractivity with height (hydro)','fontsize',12)
                        plot(Ndelay.Nwet,Ndelay.h / 1000,'-','color',line_colors[i,:])
                    else:
                        if i == 1:
                            title('Refractivity with height (wet)','fontsize',12)
                        plot(Ndelay.N,Ndelay.h / 1000,'-','color',line_colors[i,:])
            clear('P')
            clear('h')
            clear('RH')
            clear('T')
            clear('Ndelay')
            clear('N')
        clear('Rv')
        clear('T0')
        clear('L')
        clear('e0')
        clear('es')
        clear('e')
        clear('k1')
        clear('k2_n')
        clear('k3')
        clear('i')
        clear('figure1')
        # remove those sounding acqusitions that have no data coverage
        if isempty(ix_skip_sounding) != 1:
            sounding_list[ix_skip_sounding,:]=[]
# Trainmatlab.v.0/sounding.m:380
            h_range[ix_skip_sounding,:]=[]
# Trainmatlab.v.0/sounding.m:381
        ## Computing the height range
        fprintf('Computing delay \\n')
        # defining the height range (equal for the whole dataset)
        h_max=min(h_range[:,2])
# Trainmatlab.v.0/sounding.m:390
        h_max_mean=mean(h_range[:,2])
# Trainmatlab.v.0/sounding.m:391
        if h_0_threshold <= 0:
            # estimate h0 from the data
            h0_estimate_flag=1
# Trainmatlab.v.0/sounding.m:395
            h_0_threshold=0
# Trainmatlab.v.0/sounding.m:396
        else:
            h0_estimate_flag=0
# Trainmatlab.v.0/sounding.m:398
        # check if the delays goes high enough
        if h_max < h_0_threshold:
            # the set threshold is lower than the lowest value.
    # setting the h_max to h0, but checking the number of soundings that need to be rejected for this.
            ix=find(h_range[:,2] < h_0_threshold)
# Trainmatlab.v.0/sounding.m:406
            n=cat(arange(1,size(sounding_list,1))).T
# Trainmatlab.v.0/sounding.m:407
            n[ix]=[]
# Trainmatlab.v.0/sounding.m:408
            h_range[ix,:]=[]
# Trainmatlab.v.0/sounding.m:409
            if isempty(ix) == 1:
                if strcmp(error_promp_flag,'y'):
                    error('myApp:argChk',cat('None of the soundings reach higher than ',num2str(h_max / 1000),' km. Try setting h_0_threshold lower. \\n'))
                else:
                    fprintf(cat('None of the soundings reach higher than ',num2str(h_max / 1000),' km. Recommend try to set h_0_threshold lower \\n'))
                    continue_flag=0
# Trainmatlab.v.0/sounding.m:415
                    abord_flag=1
# Trainmatlab.v.0/sounding.m:416
                    break
            clear('ix')
            if size(n,1) < 3 or isempty(n) == 1:
                if strcmp(error_promp_flag,'y'):
                    error('myApp:argChk','Put h_0_threshold to a lower value. \\n')
                else:
                    fprintf('Try to put h_0_threshold to a lower value \\n')
                    continue_flag=0
# Trainmatlab.v.0/sounding.m:426
                    abord_flag=1
# Trainmatlab.v.0/sounding.m:427
                    break
            if size(n,1) < 5:
                fprintf(cat('Only ',num2str(size(n,1)),' soundings are used to compute mean delay \\n'))
            sounding_list=sounding_list[n,:]
# Trainmatlab.v.0/sounding.m:434
            h_max=copy(h_0_threshold)
# Trainmatlab.v.0/sounding.m:435
            clear('n')
        else:
            if h_max > h_0_threshold and h0_estimate_flag == 0:
                # h0 is lower than the h_max.
                h_max=copy(h_0_threshold)
# Trainmatlab.v.0/sounding.m:439
            else:
                if h_max_mean - h_max > 1000 and h0_estimate_flag == 1:
                    # Make h_max larger possible as the h0 value needs to be estimated
    # this will be at the cost of some soundings but they will be included
    # latter on
                    h_max=copy(h_max_mean)
# Trainmatlab.v.0/sounding.m:444
                    ix=find(h_range[:,2] < h_max)
# Trainmatlab.v.0/sounding.m:445
                    h_range[ix,:]=[]
# Trainmatlab.v.0/sounding.m:446
                    sounding_list[ix,:]=[]
# Trainmatlab.v.0/sounding.m:447
        # including a check for the minimum range by comparing it to the median value
        h_min_median=median(h_range[:,1])
# Trainmatlab.v.0/sounding.m:451
        h_min=max(h_range[:,1])
# Trainmatlab.v.0/sounding.m:452
        # removing soundings that do not start low enough
        if h_min - h_min_median > 1000:
            h_min=copy(h_min_median)
# Trainmatlab.v.0/sounding.m:456
            ix=find(h_range[:,1] > h_min)
# Trainmatlab.v.0/sounding.m:458
            n=cat(arange(1,size(sounding_list,1))).T
# Trainmatlab.v.0/sounding.m:459
            n[ix]=[]
# Trainmatlab.v.0/sounding.m:460
            h_range[ix,:]=[]
# Trainmatlab.v.0/sounding.m:461
            if isempty(ix) == 1:
                error('myApp:argChk',cat('This should not occur.'))
            clear('ix')
            if size(n,1) < 3 or isempty(n) == 1:
                error('myApp:argChk','Too few soundings are left for mean delay computation. Check for incomplete data files or differences in sounding height ranges \\n.')
            if size(n,1) < 5:
                fprintf(cat('Only ',num2str(size(n,1)),' soundings are used to compute mean delay \\n'))
            sounding_list=sounding_list[n,:]
# Trainmatlab.v.0/sounding.m:472
            clear('n')
        fprintf(cat(num2str(size(sounding_list,1)),' soundings are used to compute mean delay \\n'))
        h_delay=cat(arange(h_min,h_max,1)).T
# Trainmatlab.v.0/sounding.m:477
        clear('h_range')
        clear('h_min')
        clear('h_max')
        ## computing the integrated refractivity
        for i in arange(1,size(sounding_list,1)).reshape(-1):
            compute_flag=0
# Trainmatlab.v.0/sounding.m:483
            # else compute it
            temp=load(sounding_list[i,:],'h_delay')
# Trainmatlab.v.0/sounding.m:486
            if isfield(temp,'h_delay') and recompute == 0:
                h_delay_temp=temp.h_delay
# Trainmatlab.v.0/sounding.m:488
                if h_delay[1] == h_delay_temp[1] and h_delay[end()] == h_delay_temp[end()]:
                    if hydro == 1 and wet == 0:
                        data=load(sounding_list[i,:],'delay_hydro','phase_delay_hydro')
# Trainmatlab.v.0/sounding.m:491
                        if logical_not(isfield(data,'delay_hydro')):
                            compute_flag=1
# Trainmatlab.v.0/sounding.m:493
                        else:
                            delay=data.delay_hydro
# Trainmatlab.v.0/sounding.m:495
                            phase_delay=data.phase_delay_hydro
# Trainmatlab.v.0/sounding.m:496
                    else:
                        if hydro == 0 and wet == 1:
                            data=load(sounding_list[i,:],'delay_wet','phase_delay_wet')
# Trainmatlab.v.0/sounding.m:499
                            if logical_not(isfield(data,'delay_wet')):
                                compute_flag=1
# Trainmatlab.v.0/sounding.m:501
                            else:
                                delay=data.delay_wet
# Trainmatlab.v.0/sounding.m:503
                                phase_delay=data.phase_delay_wet
# Trainmatlab.v.0/sounding.m:504
                        else:
                            data=load(sounding_list[i,:],'delay','phase_delay')
# Trainmatlab.v.0/sounding.m:507
                            if logical_not(isfield(data,'delay')):
                                compute_flag=1
# Trainmatlab.v.0/sounding.m:509
                            else:
                                delay=data.delay
# Trainmatlab.v.0/sounding.m:511
                                phase_delay=data.phase_delay
# Trainmatlab.v.0/sounding.m:512
                    if compute_flag == 0:
                        # store all delays for later mean LOS delay computation
                        delay_matrix[1:length(delay),i]=delay
# Trainmatlab.v.0/sounding.m:518
                        phase_delay_matrix[1:length(delay),i]=phase_delay
# Trainmatlab.v.0/sounding.m:520
                        compute_flag=0
# Trainmatlab.v.0/sounding.m:521
                else:
                    # delay needs to be computed
                    compute_flag=1
# Trainmatlab.v.0/sounding.m:525
            else:
                compute_flag=1
# Trainmatlab.v.0/sounding.m:528
            if compute_flag == 1:
                load(sounding_list[i,:],'Ndelay')
                # interpolation to 1 m interval
                if hydro == 1 and wet == 0:
                    N_regular=interp1(Ndelay.h,Ndelay.Nhydro,h_delay,'linear')
# Trainmatlab.v.0/sounding.m:537
                else:
                    if hydro == 0 and wet == 1:
                        N_regular=interp1(Ndelay.h,Ndelay.Nwet,h_delay,'linear')
# Trainmatlab.v.0/sounding.m:539
                    else:
                        N_regular=interp1(Ndelay.h,Ndelay.N,h_delay,'linear')
# Trainmatlab.v.0/sounding.m:541
                # integration of refractivity with height (= delay) and projection on the LOS
                delay=zeros(cat(length(N_regular),1))
# Trainmatlab.v.0/sounding.m:547
                delay=flipud(dot(cumsum(flipud(N_regular)) / 10 ** 6.0,cos(theta)))
# Trainmatlab.v.0/sounding.m:548
                phase_delay=dot(dot(delay,4),pi) / lambda_
# Trainmatlab.v.0/sounding.m:549
                clear('scale')
                clear('N_regular')
                # store all delays for later mean LOS delay computation
                delay_matrix[1:length(delay),i]=delay
# Trainmatlab.v.0/sounding.m:553
                phase_delay_matrix[1:length(delay),i]=phase_delay
# Trainmatlab.v.0/sounding.m:555
                if hydro == 1 and wet == 0:
                    delay_hydro=copy(delay)
# Trainmatlab.v.0/sounding.m:559
                    phase_delay_hydro=copy(phase_delay)
# Trainmatlab.v.0/sounding.m:560
                    save(sounding_list[i,:],'-append','delay_hydro','phase_delay_hydro','h_delay')
                else:
                    if hydro == 0 and wet == 1:
                        phase_delay_wet=copy(phase_delay)
# Trainmatlab.v.0/sounding.m:563
                        delay_wet=copy(delay)
# Trainmatlab.v.0/sounding.m:564
                        save(sounding_list[i,:],'-append','delay_wet','phase_delay_wet','h_delay')
                    else:
                        save(sounding_list[i,:],'-append','delay','phase_delay','h_delay')
            # Test visualizing delay with height
            if plot_flag == 1:
                if i == 1:
                    figure2=figure('name','Delay with height')
# Trainmatlab.v.0/sounding.m:575
                    xlabel('LOS phase delay [rad]','fontsize',fontsize)
                    ylabel('Height [km]','fontsize',fontsize)
                    set(gca,'fontsize',fontsize)
                figure(figure2)
                hold('on')
                plot(phase_delay,h_delay / 1000,'-','color',cat(0.7,0.7,0.7))
                box('on')
                if i == size(sounding_list,1) and h0_estimate_flag == 1:
                    Ax1=copy(gca)
# Trainmatlab.v.0/sounding.m:586
                    ylimits=get(Ax1,'ylim')
# Trainmatlab.v.0/sounding.m:587
                    set(Ax1,'ylim',cat(0,ylimits[2]))
                    # adding a second axis
                    box('on')
                    set(gca,'fontsize',fontsize)
                    if hydro == 1 and wet == 0:
                        title(cellarray(['LOS hydro delay [m]',' ']),'fontsize',fontsize)
                        fig_save_name=matlabarray(cat('figures',filesep,'Delay_hydro_curves_all.eps'))
# Trainmatlab.v.0/sounding.m:594
                    else:
                        if hydro == 0 and wet == 1:
                            title(cellarray(['LOS wet delay [m]',' ']),'fontsize',fontsize)
                            fig_save_name=matlabarray(cat('figures',filesep,'Delay_wet_curves_all.eps'))
# Trainmatlab.v.0/sounding.m:597
                        else:
                            title(cellarray(['LOS delay [m]',' ']),'fontsize',fontsize)
                            fig_save_name=matlabarray(cat('figures',filesep,'Delay_curves_all.eps'))
# Trainmatlab.v.0/sounding.m:600
                    Ax2=axes('Position',get(Ax1,'Position'),'XAxisLocation','top')
# Trainmatlab.v.0/sounding.m:602
                    set(Ax2,'ylim',get(Ax1,'ylim'),'ytick',[],'yticklabel','')
                    xlims=get(Ax1,'xlim')
# Trainmatlab.v.0/sounding.m:604
                    xtick_new=get(Ax1,'xtick') / xlims[2]
# Trainmatlab.v.0/sounding.m:605
                    new_x_label=multiply(get(Ax1,'xtick'),lambda_) / (dot(4,pi))
# Trainmatlab.v.0/sounding.m:606
                    xtick_labels=round(dot((new_x_label),100)) / 100
# Trainmatlab.v.0/sounding.m:607
                    xtick_labels=num2str(xtick_labels.T)
# Trainmatlab.v.0/sounding.m:608
                    set(Ax2,'xtick',xtick_new,'xticklabel',xtick_labels)
                    set(Ax2,'color','none')
                    set(Ax2,'fontsize',fontsize)
                    box('on')
                    # saving of the figure when requested
                    if save_fig == 1:
                        set(figure2,'PaperPositionMode','auto')
                        print_(figure2,'-depsc','-r150',fig_save_name)
                        clear('fig_save_name')
                    clear('figure2')
            #clear Ndelay.N;clear Ndelay.h; to adresse error in smop python package
	#    clear Ndelay.N Ndelay.h delay
    #               ^
    #SyntaxError: Unexpected ".N" (parser)
            clear('delay')
        clear('i','theta')
        n_soundings=size(delay_matrix,2)
# Trainmatlab.v.0/sounding.m:630
        if n_soundings <= 3:
            continue_flag=0
# Trainmatlab.v.0/sounding.m:634
            abord_flag=1
# Trainmatlab.v.0/sounding.m:635
            break
        ## estimating h0 from the delay curves, when required.
# this is based on the net delays and used the std 
# as criteria for setting h0
        if h0_estimate_flag == 1:
            n_netdelays_max=400
# Trainmatlab.v.0/sounding.m:644
            if (dot(n_soundings,n_soundings) - n_soundings) / 2 <= n_netdelays_max:
                fprintf(cat('Estimating h0 from all (',num2str((dot(n_soundings,n_soundings) - n_soundings) / 2),') possible net delay combinations \\n'))
                ix1_random=repmat(arange(1,n_soundings),n_soundings,1)
# Trainmatlab.v.0/sounding.m:647
                ix1_random=single(ix1_random)
# Trainmatlab.v.0/sounding.m:648
                ix2_random=ix1_random.T
# Trainmatlab.v.0/sounding.m:649
                ix_temp=logical_and(logical(tril(ones(n_soundings))),logical_not(eye(n_soundings)))
# Trainmatlab.v.0/sounding.m:650
                ix_random=matlabarray(cat(ix1_random[ix_temp],ix2_random[ix_temp]))
# Trainmatlab.v.0/sounding.m:651
                clear('ix1_random','ix2_random')
            else:
                fprintf(cat('Estimating h0 from (',num2str(n_netdelays_max),') net delay combinations \\n'))
                # take 2 random sets of n_netdelays_max
                new_set_search=1
# Trainmatlab.v.0/sounding.m:656
                loop_counter=0
# Trainmatlab.v.0/sounding.m:657
                while new_set_search:

                    ix1_random=ceil(dot(rand(dot(n_netdelays_max,5),1),n_soundings))
# Trainmatlab.v.0/sounding.m:659
                    ix2_random=ceil(dot(rand(dot(n_netdelays_max,5),1),n_soundings))
# Trainmatlab.v.0/sounding.m:660
                    ix_random=matlabarray(cat(ix1_random,ix2_random))
# Trainmatlab.v.0/sounding.m:661
                    clear('ix1_random','ix2_random')
                    # remove those net delays of the same date
                    ix_temp=find(ix_random[:,1] - ix_random[:,2] == 0)
# Trainmatlab.v.0/sounding.m:665
                    ix_random[ix_temp,:]=[]
# Trainmatlab.v.0/sounding.m:666
                    clear('ix_temp')
                    # remove repetition of pair combination
                    ix_random=unique(ix_random,'rows')
# Trainmatlab.v.0/sounding.m:670
                    if size(ix_random,1) >= n_netdelays_max:
                        ix_random[n_netdelays_max + 1:end(),:]=[]
# Trainmatlab.v.0/sounding.m:674
                        new_set_search=0
# Trainmatlab.v.0/sounding.m:675
                    loop_counter=loop_counter + 1
# Trainmatlab.v.0/sounding.m:678
                    if loop_counter == 50:
                        fprintf('Having difficulty determining net delay combinations \\n')
                        keyboard

            # computation of the net delay
            netdelays=delay_matrix[:,ix_random[:,1]] - delay_matrix[:,ix_random[:,2]]
# Trainmatlab.v.0/sounding.m:687
            netphasedelays=phase_delay_matrix[:,ix_random[:,1]] - phase_delay_matrix[:,ix_random[:,2]]
# Trainmatlab.v.0/sounding.m:688
            if plot_flag == 1:
                fig_netdelay=figure('name','Net delays')
# Trainmatlab.v.0/sounding.m:691
                if isempty(netdelay_color):
                    plot(netdelays,h_delay / 1000)
                else:
                    plot(netdelays,h_delay / 1000,'color',netdelay_color)
                max_spacing=max(cat(abs(cat(min(min(netdelays)),max(max(netdelays))))))
# Trainmatlab.v.0/sounding.m:697
                xlim(cat(dot(- 1.1,max_spacing),dot(max_spacing,1.1)))
                xlabel('Net LOS delay [m]','fontsize',fontsize)
                ylabel('Height [km]','fontsize',fontsize)
                set(gca,'fontsize',fontsize)
                fig_netphasedelay=figure('name','Net phase delays')
# Trainmatlab.v.0/sounding.m:705
                if isempty(netdelay_color):
                    plot(netphasedelays,h_delay / 1000)
                else:
                    plot(netphasedelays,h_delay / 1000,'color',netdelay_color)
                max_spacing=max(cat(abs(cat(min(min(netphasedelays)),max(max(netphasedelays))))))
# Trainmatlab.v.0/sounding.m:711
                xlim(cat(dot(- 1.1,max_spacing),dot(max_spacing,1.1)))
                xlabel('\\Delta\\phi_{tropo} [rad]','fontsize',fontsize)
                ylabel('Height [km]','fontsize',fontsize)
                set(gca,'fontsize',fontsize)
            # computation of the netdelay standard deviation
            netdelays_std=std(netdelays,[],2)
# Trainmatlab.v.0/sounding.m:726
            clear('netdelays')
            # find the height at which the lowest standard deviation becomes larger
    # than the 0.5 cm threshold.
            fprintf(cat('Estimating h0 from the height at which the std varies more than ',num2str(0.05),' cm \\n'))
            ix=(netdelays_std <= 0.0005)
# Trainmatlab.v.0/sounding.m:732
            h_0_threshold=min(h_delay[ix])
# Trainmatlab.v.0/sounding.m:733
            clear('ix')
            ix=find(h_delay > h_0_threshold)
# Trainmatlab.v.0/sounding.m:735
            if h_0_threshold < 6000:
                fprintf(cat('h0 is estimated to be ',num2str(h_0_threshold / 1000),' km. This is low abord. \\n'))
                if strcmp(error_promp_flag,'y'):
                    error('myApp:argChk','Put h_0_threshold to a lower value. \\n')
                else:
                    fprintf('Try setting h_0_threshold manually \\n')
                    continue_flag=0
# Trainmatlab.v.0/sounding.m:744
                    abord_flag=1
# Trainmatlab.v.0/sounding.m:745
                    break
            else:
                # plotting the estimate h0 on the netdelay curve
                if plot_flag == 1:
                    figure(fig_netdelay)
                    hold('on')
                    plot(get(gca,'xlim'),cat(h_0_threshold / 1000,h_0_threshold / 1000),'k--')
                    figure(fig_netphasedelay)
                    hold('on')
                    plot(get(gca,'xlim'),cat(h_0_threshold / 1000,h_0_threshold / 1000),'k--')
                    # saving of the figure when requested
                    if save_fig == 1:
                        fig_save_name=matlabarray(cat('figures',filesep,'NetDelay_curves.eps'))
# Trainmatlab.v.0/sounding.m:761
                        set(fig_netdelay,'PaperPositionMode','auto')
                        print_(fig_netdelay,'-depsc','-r150',fig_save_name)
                        clear('fig_save_name')
                        fig_save_name=matlabarray(cat('figures',filesep,'NetPhaseDelay_curves.eps'))
# Trainmatlab.v.0/sounding.m:766
                        set(fig_netphasedelay,'PaperPositionMode','auto')
                        print_(fig_netphasedelay,'-depsc','-r150',fig_save_name)
                        clear('fig_save_name')
                fprintf(cat('h0 is estimated to be ',num2str(h_0_threshold / 1000),' km. \\n'))
                # removing all the other variables
                h_delay[ix:end()]=[]
# Trainmatlab.v.0/sounding.m:776
                delay_matrix[ix:end(),:]=[]
# Trainmatlab.v.0/sounding.m:777
                phase_delay_matrix[ix:end(),:]=[]
# Trainmatlab.v.0/sounding.m:778
                delay_matrix=delay_matrix - repmat(delay_matrix[end(),:],length(h_delay),1)
# Trainmatlab.v.0/sounding.m:781
                phase_delay_matrix=phase_delay_matrix - repmat(phase_delay_matrix[end(),:],length(h_delay),1)
# Trainmatlab.v.0/sounding.m:782
                if plot_flag == 1:
                    figure2=figure('name','Delay with height')
# Trainmatlab.v.0/sounding.m:785
                    plot(phase_delay_matrix,h_delay / 1000,'-','color',cat(0.7,0.7,0.7))
                    xlabel('LOS phase delay [rad]','fontsize',fontsize)
                    ylabel('Height [km]','fontsize',fontsize)
                    set(gca,'fontsize',fontsize)
                    # saving of the figure when requested
                    if save_fig == 1:
                        fig_save_name=matlabarray(cat('figures',filesep,'Delay_curves.eps'))
# Trainmatlab.v.0/sounding.m:792
                        set(figure2,'PaperPositionMode','auto')
                        print_(figure2,'-depsc','-r150',fig_save_name)
                        clear('fig_save_name')
        ## Computing mean delay
        fprintf('Computing mean delay \\n')
        delay_mean=mean(delay_matrix,2)
# Trainmatlab.v.0/sounding.m:804
        phase_delay_mean=mean(phase_delay_matrix,2)
# Trainmatlab.v.0/sounding.m:805
        if plot_flag == 1:
            # plot mean delay on top of the existing figure
            figure(figure2)
            hold('on')
            plot(phase_delay_mean,h_delay / 1000,'k-','linewidth',2)
            Ax1=copy(gca)
# Trainmatlab.v.0/sounding.m:811
            ylimits=get(Ax1,'ylim')
# Trainmatlab.v.0/sounding.m:812
            set(Ax1,'ylim',cat(0,ylimits[2]))
            # adding a second axis
            box('on')
            set(gca,'fontsize',fontsize)
            title(cellarray(['LOS delay [m]',' ']),'fontsize',fontsize)
            Ax2=axes('Position',get(Ax1,'Position'),'XAxisLocation','top')
# Trainmatlab.v.0/sounding.m:818
            set(Ax2,'ylim',get(Ax1,'ylim'),'ytick',[],'yticklabel','')
            xlims=get(Ax1,'xlim')
# Trainmatlab.v.0/sounding.m:820
            xtick_new=get(Ax1,'xtick') / xlims[2]
# Trainmatlab.v.0/sounding.m:821
            new_x_label=multiply(get(Ax1,'xtick'),lambda_) / (dot(4,pi))
# Trainmatlab.v.0/sounding.m:822
            xtick_labels=round(dot((new_x_label),100)) / 100
# Trainmatlab.v.0/sounding.m:823
            xtick_labels=num2str(xtick_labels.T)
# Trainmatlab.v.0/sounding.m:824
            set(Ax2,'xtick',xtick_new,'xticklabel',xtick_labels)
            set(Ax2,'color','none')
            set(Ax2,'fontsize',fontsize)
            # saving of the figure when requested
            if save_fig == 1:
                fig_save_name=matlabarray(cat('figures',filesep,'Delay_curves.eps'))
# Trainmatlab.v.0/sounding.m:830
                set(figure2,'PaperPositionMode','auto')
                print_(figure2,'-depsc','-r150',fig_save_name)
                clear('fig_save_name')
            clear('figure2')
            # an individual figure for the mean delay
            figure4=figure('name','Mean delay with height')
# Trainmatlab.v.0/sounding.m:838
            xlabel('LOS phase delay [rad]','fontsize',fontsize)
            ylabel('Height [km]','fontsize',fontsize)
            set(gca,'fontsize',fontsize)
            hold('on')
            plot(phase_delay_mean,h_delay / 1000,'k-','linewidth',2)
            set(gca,'fontsize',fontsize)
        save(cat(save_name,'.mat'),'delay_mean','h_delay','n_soundings','delay_matrix')
        ## estimating the power law directly from the log log plot
# computing the loglog powerlaw
        h_log=log10(h_0_threshold - h_delay)
# Trainmatlab.v.0/sounding.m:856
        phi_delay_log=log10(phase_delay_mean)
# Trainmatlab.v.0/sounding.m:857
        delay_log=log10(delay_mean)
# Trainmatlab.v.0/sounding.m:858
        A=matlabarray(cat(h_log,ones(size(h_log))))
# Trainmatlab.v.0/sounding.m:859
        # based on the full height range
        ix_all=find(h_log <= 0.001)
# Trainmatlab.v.0/sounding.m:862
        A_all=copy(A)
# Trainmatlab.v.0/sounding.m:863
        A_all[ix_all,:]=[]
# Trainmatlab.v.0/sounding.m:864
        delay_log_temp_all=copy(delay_log)
# Trainmatlab.v.0/sounding.m:865
        delay_log_temp_all[ix_all,:]=[]
# Trainmatlab.v.0/sounding.m:866
        phase_delay_log_temp_all=copy(phi_delay_log)
# Trainmatlab.v.0/sounding.m:867
        phase_delay_log_temp_all[ix_all,:]=[]
# Trainmatlab.v.0/sounding.m:868
        coeff_all=dot(dot(inv(dot(A_all.T,A_all)),A_all.T),delay_log_temp_all)
# Trainmatlab.v.0/sounding.m:869
        coeff_all_phase=dot(dot(inv(dot(A_all.T,A_all)),A_all.T),phase_delay_log_temp_all)
# Trainmatlab.v.0/sounding.m:870
        alpha_log_all=coeff_all[1]
# Trainmatlab.v.0/sounding.m:871
        K_log_all=exp(coeff_all[2])
# Trainmatlab.v.0/sounding.m:872
        # based on the height range till hc_threshold
        ix_hc=find(h_log <= logical_or(0.001,h_delay) > h_thres_hc)
# Trainmatlab.v.0/sounding.m:876
        A_hc=copy(A)
# Trainmatlab.v.0/sounding.m:877
        A_hc[ix_hc,:]=[]
# Trainmatlab.v.0/sounding.m:878
        delay_log_temp_hc=copy(delay_log)
# Trainmatlab.v.0/sounding.m:879
        delay_log_temp_hc[ix_hc,:]=[]
# Trainmatlab.v.0/sounding.m:880
        phase_delay_log_temp_hc=copy(phi_delay_log)
# Trainmatlab.v.0/sounding.m:881
        phase_delay_log_temp_hc[ix_hc,:]=[]
# Trainmatlab.v.0/sounding.m:882
        coeff_hc=dot(dot(inv(dot(A_hc.T,A_hc)),A_hc.T),delay_log_temp_hc)
# Trainmatlab.v.0/sounding.m:883
        coeff_hc_phase=dot(dot(inv(dot(A_hc.T,A_hc)),A_hc.T),phase_delay_log_temp_hc)
# Trainmatlab.v.0/sounding.m:884
        alpha_log_hc=coeff_hc[1]
# Trainmatlab.v.0/sounding.m:885
        K_log_hc=exp(coeff_hc[2])
# Trainmatlab.v.0/sounding.m:886
        if plot_flag == 1:
            xlimits=matlabarray(cat(log10(h_0_threshold - max_height),log10(h_0_threshold + 1)))
# Trainmatlab.v.0/sounding.m:891
            figure4_1=figure('name','Log-Log plot of the Mean delay with height')
# Trainmatlab.v.0/sounding.m:893
            ylabel('Log(tropopsheric LOS delay [m])','fontsize',fontsize)
            xlabel('Height [km])','fontsize',fontsize)
            set(gca,'fontsize',fontsize)
            hold('on')
            plot(h_log,delay_log,'k-','linewidth',2)
            hold('on')
            plot(A_hc[:,1],dot(A_hc,coeff_hc),'r--','linewidth',2)
            set(gca,'fontsize',fontsize)
            # plotting the powerlaw based on the lower height range
            hold('on')
            xlim(xlimits)
            ylimits=get(gca,'ylim')
# Trainmatlab.v.0/sounding.m:905
            legend('Mean delay','Power law',2)
            legend('boxoff')
            set(gca,'xtick',cat(get(gca,'xtick'),log10(h_0_threshold)),'xticklabel',num2str(cat(get(gca,'xtick'),log10(h_0_threshold)).T))
            # updating the lables to be heights
            temp_loc=get(gca,'xtick')
# Trainmatlab.v.0/sounding.m:911
            temp=round(dot((h_0_threshold - 10.0 ** temp_loc) / 1000,100)) / 100
# Trainmatlab.v.0/sounding.m:912
            temp_str=num2str(temp.T)
# Trainmatlab.v.0/sounding.m:913
            set(gca,'xtick',temp_loc,'xticklabel',temp_str)
            box('on')
            if save_fig == 1:
                fig_save_name=matlabarray(cat('figures',filesep,'loglog_mean_delay.eps'))
# Trainmatlab.v.0/sounding.m:919
                set(figure4_1,'PaperPositionMode','auto')
                print_(figure4_1,'-depsc','-r150',fig_save_name)
                clear('fig_save_name')
            # an individual figure for the mean delay
            figure4_2=figure('name','Log-Log plot of the Mean phase delay with height')
# Trainmatlab.v.0/sounding.m:932
            ylabel('Log(\\phi_{tropo} [rad])','fontsize',fontsize)
            xlabel('Height [km])','fontsize',fontsize)
            set(gca,'fontsize',fontsize)
            hold('on')
            plot(h_log,phi_delay_log,'k-','linewidth',2)
            hold('on')
            plot(A_hc[:,1],dot(A_hc,coeff_hc_phase),'r--','linewidth',2)
            set(gca,'fontsize',fontsize)
            # plotting the powerlaw based on the lower height range
            hold('on')
            xlim(xlimits)
            ylimits=get(gca,'ylim')
# Trainmatlab.v.0/sounding.m:944
            legend('Mean delay','Power law',2)
            legend('boxoff')
            set(gca,'xtick',cat(get(gca,'xtick'),log10(h_0_threshold)),'xticklabel',num2str(cat(get(gca,'xtick'),log10(h_0_threshold)).T))
            # updating the lables to be heights
            temp_loc=get(gca,'xtick')
# Trainmatlab.v.0/sounding.m:950
            temp=round(dot((h_0_threshold - 10.0 ** temp_loc) / 1000,100)) / 100
# Trainmatlab.v.0/sounding.m:951
            temp_str=num2str(temp.T)
# Trainmatlab.v.0/sounding.m:952
            set(gca,'xtick',temp_loc,'xticklabel',temp_str)
            box('on')
            if save_fig == 1:
                fig_save_name=matlabarray(cat('figures',filesep,'loglog_mean_phasedelay.eps'))
# Trainmatlab.v.0/sounding.m:958
                set(figure4_2,'PaperPositionMode','auto')
                print_(figure4_2,'-depsc','-r150',fig_save_name)
                clear('fig_save_name')
        save(cat(save_name,'.mat'),'-append','alpha_log_all','alpha_log_hc')
        clear('ix_all','A_all','delay_log_temp_all','coeff_all','ix_hc','A_hc','delay_log_temp_hc','coeff_hc','delay_log','phi_delay_log','h_log')
        ## evaluating the performance of the estimation by plotting the estimated powerlaw wrt to the mean delay from sounding
        if plot_flag == 1:
            # powerlaw estimated from log log plot full height range
            delay_log_all=dot(K_log_all,(h_0_threshold - h_delay) ** alpha_log_all)
# Trainmatlab.v.0/sounding.m:986
            delay_log_hc=dot(K_log_hc,(h_0_threshold - h_delay) ** alpha_log_hc)
# Trainmatlab.v.0/sounding.m:989
            hfig_powerlawdelay=figure('name','Fitted power law delay to mean delay curve')
# Trainmatlab.v.0/sounding.m:991
            plot(delay_mean,h_delay / 1000,'k-','linewidth',2)
            hold('on')
            plot(delay_log_hc,h_delay / 1000,'r-','linewidth',2)
            hold('on')
            xlimits=get(gca,'xlim')
# Trainmatlab.v.0/sounding.m:996
            plot(cat(xlimits[1],xlimits[2]),cat(max_height,max_height) / 1000,'k--')
            legend('Mean delay','Fitted power law','Max height of the region')
            ylabel('Height [km]','fontsize',fontsize)
            xlabel('LOS delay [m]','fontsize',fontsize)
            set(gca,'fontsize',fontsize)
            box('on')
            if save_fig == 1:
                fig_save_name=matlabarray(cat('figures',filesep,'MeanDelay_PowerLawDelay.eps'))
# Trainmatlab.v.0/sounding.m:1005
                set(hfig_powerlawdelay,'PaperPositionMode','auto')
                print_(hfig_powerlawdelay,'-depsc','-r150',fig_save_name)
                clear('fig_save_name')
            clear('hfig_powerlawdelay')
        continue_flag=0
# Trainmatlab.v.0/sounding.m:1016
        abord_flag=0
# Trainmatlab.v.0/sounding.m:1017

    
    # The while loop was existed because of an error statement.
    if abord_flag == 1:
        alpha_log_all=copy(NaN)
# Trainmatlab.v.0/sounding.m:1023
        alpha_log_hc=copy(NaN)
# Trainmatlab.v.0/sounding.m:1024
        n_soundings=copy(NaN)
# Trainmatlab.v.0/sounding.m:1025
        h_0_threshold=copy(NaN)
# Trainmatlab.v.0/sounding.m:1026
        fprintf('Early termination \\n')
    else:
        h_0_threshold=h_0_threshold / 1000
# Trainmatlab.v.0/sounding.m:1029
        fprintf('DONE \\n')
    
    cd(curdir)