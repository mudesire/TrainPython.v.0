# Autogenerated with SMOP 
from smop.core import *
# matlab/aps_wrf_SAR.m

    
@function
def aps_wrf_SAR(*args,**kwargs):
    varargin = aps_wrf_SAR.varargin
    nargin = aps_wrf_SAR.nargin

    # [] = aps_wrf_SAR()
# Script to load wrf processed data, on 37 pressure levels. Load data for area of interest, 
# and calculate delays maps for each specified date.
# The DEM file inputed should have an asociated
# ".rsc" file, with the same filename as the DEM. The ".rsc" files should
# contain a WIDTH, LENGTH, X_FIRST, Y_FIRST, X_STEP, Y_STEP and optional a 
# FORMAT string. The meris data is assumed to be structured in date folders. 
# The batchfile contains the full path to the meris files in these folders. 
# Note that the first line of the batchfile should read "files".
    
    
    # INPUTS:
# demfile               Full path to the DEM file. The DEM needs to me in meters.
# xlims                 Limits in the x-direction, either in degrees
# ylims                 Limits in the y-direction, either in degrees
# demnull               The value for no DEM data, default is -32768.
# smpres                The output resolution, either in degrees
#                       Units needs to be consistend with xlims and ylims.
    
    # OUTPUTS:
# It will give the computed ZENITH dry and wet delay map in cm for the selected region.
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    # Richard Walters/ Bekaert David - Oxford / Leeds University 2012-2013
# modifications:
# 19/11/2013    DB      Change the computation of the saturated vapor
#                       pressure over ice and water
# 19/11/2013    DB      Change the computation of the hydrostatic delay to
#                       be directly computed from pressure and temperature
# 20/11/2013    DB      Check if wrf data exist to avoid crashing 
# 21/11/2013    DB      Interpolate H,Temp, Hum spatially to cope with
#                       coarser land mask compared to the DEM
# 02/01/2014	DB      fix for NaN value over sea
# 04/08/2014    DB      Redefine meris_lat(lon)_range to region_lat(lon)_range
# 24/02/2015    DB      Save support information for WRF
# 27/09/2015    DB      Separate the DEM loading, ask for number of domains.
# 28/09/2015    DB      Also save the delay computation for a grid or z to include Pirate compartibility.
# 28/09/2015    DB      Include multi-core from matlab
# 07/07/2016    DB      Redefine hydrostatic delay to be based on surface pressure.
    
    save_complete=0
# matlab/aps_wrf_SAR.m:58
    
    ## Constants
# Parameters from Jolivet et al 2011, GRL
    Rd=287.05
# matlab/aps_wrf_SAR.m:63
    
    Rv=461.495
# matlab/aps_wrf_SAR.m:64
    
    k1=0.776
# matlab/aps_wrf_SAR.m:65
    
    k2=0.716
# matlab/aps_wrf_SAR.m:66
    
    k3=3750.0
# matlab/aps_wrf_SAR.m:67
    
    ## Defaults
    zref=15000
# matlab/aps_wrf_SAR.m:71
    
    zincr=15
# matlab/aps_wrf_SAR.m:72
    
    vertres=5
# matlab/aps_wrf_SAR.m:73
    
    ## get the number of domains
    repeat=1
# matlab/aps_wrf_SAR.m:77
    while repeat == 1:

        action_flag=str2num(input_('How many domains do you have including the parent? ','s'))
# matlab/aps_wrf_SAR.m:79
        if isnumeric(action_flag):
            n_domains=copy(action_flag)
# matlab/aps_wrf_SAR.m:81
            repeat=0
# matlab/aps_wrf_SAR.m:82

    
    ## getting the variables from the parms_aps file
    stamps_processed=getparm_aps('stamps_processed',1)
# matlab/aps_wrf_SAR.m:88
    ll_matfile=getparm_aps('ll_matfile',1)
# matlab/aps_wrf_SAR.m:89
    wrf_datapath=getparm_aps('wrf_datapath',1)
# matlab/aps_wrf_SAR.m:90
    datestructure='yyyymmdd'
# matlab/aps_wrf_SAR.m:91
    
    UTC_sat=getparm_aps('UTC_sat',1)
# matlab/aps_wrf_SAR.m:92
    # loading the data
    if strcmp(stamps_processed,'y'):
        ps=load(ll_matfile)
# matlab/aps_wrf_SAR.m:96
        dates=ps.day
# matlab/aps_wrf_SAR.m:97
        load('psver')
        fprintf('Stamps processed structure \\n')
    else:
        psver=2
# matlab/aps_wrf_SAR.m:101
        ifgday_matfile=getparm_aps('ifgday_matfile',1)
# matlab/aps_wrf_SAR.m:102
        ifgs_dates=load(ifgday_matfile)
# matlab/aps_wrf_SAR.m:103
        ifgs_dates=ifgs_dates.ifgday
# matlab/aps_wrf_SAR.m:104
        dates=reshape(ifgs_dates,[],1)
# matlab/aps_wrf_SAR.m:105
        dates=unique(dates)
# matlab/aps_wrf_SAR.m:106
        dates=datenum(num2str(dates),'yyyymmdd')
# matlab/aps_wrf_SAR.m:107
    
    # getting the dates
    n_dates=length(dates)
# matlab/aps_wrf_SAR.m:112
    ## Compute and resample DEM
    dem,xmin,xmax,ymin,ymax,smpres,nncols,nnrows=get_DEM
# matlab/aps_wrf_SAR.m:115
    # the region which is cropped from the ERA data and used to make the interpolation.
# Should be  larger than the region to which the delay is computed
    lonmin=floor(xmin) - 1
# matlab/aps_wrf_SAR.m:119
    lonmax=ceil(xmax) + 1
# matlab/aps_wrf_SAR.m:120
    latmin=floor(ymin) - 1
# matlab/aps_wrf_SAR.m:121
    latmax=ceil(ymax) + 1
# matlab/aps_wrf_SAR.m:122
    # setting the maximum height of the DEM to limit the range at whcih ERA-!
# needs to be interpolated to
    maxdem=dot(ceil(max(max(dem)) / 100),100) + 50
# matlab/aps_wrf_SAR.m:127
    
    fprintf(cat('Interpolate to a maximum dem height of ',num2str(maxdem),' m\\n'))
    ## performing the calucluation for each  date
    
    for d in arange(1,n_dates).reshape(-1):
        date=datestr(dates[d],datestructure)
# matlab/aps_wrf_SAR.m:137
        date_str_file=datestr(dates[d],'yyyy-mm-dd')
# matlab/aps_wrf_SAR.m:138
        infile=matlabarray(cat(wrf_datapath,filesep,date,filesep,'wrfplev_d0',num2str(n_domains),'_',date_str_file,'_',UTC_sat,':00'))
# matlab/aps_wrf_SAR.m:141
        infile2=matlabarray(cat(wrf_datapath,filesep,date,filesep,'wrfout_d0',num2str(n_domains),'_',date_str_file,'_',UTC_sat,':00'))
# matlab/aps_wrf_SAR.m:142
        if exist(infile,'file') == 2:
            # the output file names
            outfile=matlabarray(cat(wrf_datapath,filesep,date,filesep,date,'_ZWD.xyz'))
# matlab/aps_wrf_SAR.m:146
            hydroutfile=matlabarray(cat(wrf_datapath,filesep,date,filesep,date,'_ZHD.xyz'))
# matlab/aps_wrf_SAR.m:147
            outfile2=matlabarray(cat(wrf_datapath,filesep,date,filesep,date,'_ZWD.z'))
# matlab/aps_wrf_SAR.m:148
            hydroutfile2=matlabarray(cat(wrf_datapath,filesep,date,filesep,date,'_ZHD.z'))
# matlab/aps_wrf_SAR.m:149
            ncid=netcdf.open(infile,'NC_NOWRITE')
# matlab/aps_wrf_SAR.m:152
            numdims,numvars,numglobalatts,unlimdimid=netcdf.inq(ncid,nargout=4)
# matlab/aps_wrf_SAR.m:153
            dimname,dimlen=netcdf.inqDim(ncid,0,nargout=2)
# matlab/aps_wrf_SAR.m:154
            # 3 = pressure*37 
        # 6 = temperature
            # variables at each node 20 (0-19)
            varname,vartype,dimids,natts=netcdf.inqVar(ncid,0,nargout=4)
# matlab/aps_wrf_SAR.m:159
            Temp=netcdf.getVar(ncid,6)
# matlab/aps_wrf_SAR.m:162
            Hum=netcdf.getVar(ncid,7)
# matlab/aps_wrf_SAR.m:163
            H=netcdf.getVar(ncid,8)
# matlab/aps_wrf_SAR.m:164
            Plevs=netcdf.getVar(ncid,3)
# matlab/aps_wrf_SAR.m:165
            netcdf.close(ncid)
            # flip the N-S axis
            Temp=flipdim(Temp,2)
# matlab/aps_wrf_SAR.m:169
            Temp=permute(Temp,cat(2,1,3))
# matlab/aps_wrf_SAR.m:170
            Hum=flipdim(Hum,2)
# matlab/aps_wrf_SAR.m:171
            Hum=permute(Hum,cat(2,1,3))
# matlab/aps_wrf_SAR.m:172
            H=flipdim(H,2)
# matlab/aps_wrf_SAR.m:173
            H=permute(H,cat(2,1,3))
# matlab/aps_wrf_SAR.m:174
            Temp[Temp == - 999]=NaN
# matlab/aps_wrf_SAR.m:177
            Hum[Hum == - 999]=NaN
# matlab/aps_wrf_SAR.m:178
            H[H == - 999]=NaN
# matlab/aps_wrf_SAR.m:179
            numlat=size(Temp,1)
# matlab/aps_wrf_SAR.m:183
            numlon=size(Temp,2)
# matlab/aps_wrf_SAR.m:184
            ncid=netcdf.open(infile2,'NC_NOWRITE')
# matlab/aps_wrf_SAR.m:185
            lats=netcdf.getVar(ncid,1)
# matlab/aps_wrf_SAR.m:186
            latgrid=repmat(lats,cat(1,1,37))
# matlab/aps_wrf_SAR.m:187
            latgrid=permute(latgrid,cat(2,1,3))
# matlab/aps_wrf_SAR.m:188
            latgrid=flipdim(latgrid,1)
# matlab/aps_wrf_SAR.m:189
            lons=netcdf.getVar(ncid,2)
# matlab/aps_wrf_SAR.m:190
            longrid=repmat(lons,cat(1,1,37))
# matlab/aps_wrf_SAR.m:191
            longrid=permute(longrid,cat(2,1,3))
# matlab/aps_wrf_SAR.m:192
            longrid=flipdim(longrid,1)
# matlab/aps_wrf_SAR.m:193
            netcdf.close(ncid)
            # Load pressure levels and replicate vector to make 3d matrix same size as variables
            Plevs=Plevs / 100
# matlab/aps_wrf_SAR.m:199
            Pressure=repmat(Plevs,cat(1,numlat,numlon))
# matlab/aps_wrf_SAR.m:200
            Pressure=permute(Pressure,cat(2,3,1))
# matlab/aps_wrf_SAR.m:201
            xx,yy=meshgrid(arange(1,numlon),arange(1,numlat),nargout=2)
# matlab/aps_wrf_SAR.m:205
            latlist=reshape(latgrid[:,:,1],[],1)
# matlab/aps_wrf_SAR.m:206
            lonlist=reshape(longrid[:,:,1],[],1)
# matlab/aps_wrf_SAR.m:207
            xlist=reshape(xx,[],1)
# matlab/aps_wrf_SAR.m:208
            ylist=reshape(yy,[],1)
# matlab/aps_wrf_SAR.m:209
            # sharp transitions. To cope with this I perform an interpoaltion
        # over the land points, such the land mask is removed.
        # interpolate the land
            n_grid_points=dot(size(Pressure,1),size(Pressure,2))
# matlab/aps_wrf_SAR.m:217
            ix_vert=find(sum(sum(isnan(Temp))) == n_grid_points)
# matlab/aps_wrf_SAR.m:218
            if isempty(ix_vert):
                ix_vert=size(Temp,3)
# matlab/aps_wrf_SAR.m:220
            longrid_vector=reshape(longrid[:,:,1],[],1)
# matlab/aps_wrf_SAR.m:222
            latgrid_vector=reshape(latgrid[:,:,1],[],1)
# matlab/aps_wrf_SAR.m:223
            for kkk in arange(1,ix_vert[1] - 1).reshape(-1):
                ix=find(isnan(Temp[:,:,kkk]) == 1)
# matlab/aps_wrf_SAR.m:227
                if logical_not(isempty(ix)):
                    Temp_temp=reshape(Temp[:,:,kkk],[],1)
# matlab/aps_wrf_SAR.m:229
                    Hum_temp=reshape(Hum[:,:,kkk],[],1)
# matlab/aps_wrf_SAR.m:230
                    H_temp=reshape(H[:,:,kkk],[],1)
# matlab/aps_wrf_SAR.m:231
                    longrid_vector_temp=copy(longrid_vector)
# matlab/aps_wrf_SAR.m:233
                    latgrid_vector_temp=copy(latgrid_vector)
# matlab/aps_wrf_SAR.m:234
                    longrid_vector_needed=longrid_vector[ix]
# matlab/aps_wrf_SAR.m:237
                    latgrid_vector_needed=latgrid_vector[ix]
# matlab/aps_wrf_SAR.m:238
                    Temp_temp[ix]=[]
# matlab/aps_wrf_SAR.m:241
                    Hum_temp[ix]=[]
# matlab/aps_wrf_SAR.m:242
                    H_temp[ix]=[]
# matlab/aps_wrf_SAR.m:243
                    longrid_vector_temp[ix]=[]
# matlab/aps_wrf_SAR.m:245
                    latgrid_vector_temp[ix]=[]
# matlab/aps_wrf_SAR.m:246
                    Temp_vector_needed=griddata(double(longrid_vector_temp),double(latgrid_vector_temp),double(Temp_temp),double(longrid_vector_needed),double(latgrid_vector_needed),'linear')
# matlab/aps_wrf_SAR.m:250
                    Hum_vector_needed=griddata(double(longrid_vector_temp),double(latgrid_vector_temp),double(Hum_temp),double(longrid_vector_needed),double(latgrid_vector_needed),'linear')
# matlab/aps_wrf_SAR.m:251
                    H_vector_needed=griddata(double(longrid_vector_temp),double(latgrid_vector_temp),double(H_temp),double(longrid_vector_needed),double(latgrid_vector_needed),'linear')
# matlab/aps_wrf_SAR.m:252
                    Temp_new=Temp[:,:,kkk]
# matlab/aps_wrf_SAR.m:253
                    Hum_new=Hum[:,:,kkk]
# matlab/aps_wrf_SAR.m:254
                    H_new=H[:,:,kkk]
# matlab/aps_wrf_SAR.m:255
                    Temp_new[ix]=Temp_vector_needed
# matlab/aps_wrf_SAR.m:258
                    Hum_new[ix]=Hum_vector_needed
# matlab/aps_wrf_SAR.m:259
                    H_new[ix]=H_vector_needed
# matlab/aps_wrf_SAR.m:260
                    Temp[:,:,kkk]=Temp_new
# matlab/aps_wrf_SAR.m:263
                    Hum[:,:,kkk]=Hum_new
# matlab/aps_wrf_SAR.m:264
                    H[:,:,kkk]=H_new
# matlab/aps_wrf_SAR.m:265
            clear('Temp_new','Hum_new','H_new','ix','Temp_temp','Hum_temp','H_temp','longrid_vector_temp','latgrid_vector_temp')
            # select the grid points within the area of interest
        # the projection of the grid is not uniform for the longitude as the center is defined for a specific longitude coordinate
            latlist_temp=sort(abs(diff(latlist)))
# matlab/aps_wrf_SAR.m:272
            lat_res=dot(abs(latlist_temp[ceil(dot(length(latlist_temp),0.95))]),1.5)
# matlab/aps_wrf_SAR.m:273
            lonlist_temp=diff(lonlist)
# matlab/aps_wrf_SAR.m:275
            lon_res=dot(max(abs(lonlist_temp)),1.5)
# matlab/aps_wrf_SAR.m:276
            ix=find(ymin - lat_res <= logical_and(latlist,latlist) <= logical_and(ymax + lat_res,xmin - lon_res) <= logical_and(lonlist,lonlist) <= xmax + lon_res)
# matlab/aps_wrf_SAR.m:280
            xlist=xlist[ix]
# matlab/aps_wrf_SAR.m:281
            ylist=ylist[ix]
# matlab/aps_wrf_SAR.m:282
            latlist=latlist[ix]
# matlab/aps_wrf_SAR.m:283
            lonlist=lonlist[ix]
# matlab/aps_wrf_SAR.m:284
            latlist=double(latlist)
# matlab/aps_wrf_SAR.m:285
            lonlist=double(lonlist)
# matlab/aps_wrf_SAR.m:286
            numy=length(unique(latlist))
# matlab/aps_wrf_SAR.m:288
            numx=length(unique(lonlist))
# matlab/aps_wrf_SAR.m:289
            ulatlist=unique(latlist)
# matlab/aps_wrf_SAR.m:290
            ulonlist=unique(lonlist)
# matlab/aps_wrf_SAR.m:291
            uxlist=unique(xlist)
# matlab/aps_wrf_SAR.m:292
            uylist=unique(ylist)
# matlab/aps_wrf_SAR.m:293
            if save_complete == 0:
                # saving the information for support plotting
                wrf.wrf_lonlat = copy(cat(lonlist,latlist))
# matlab/aps_wrf_SAR.m:301
                wrf.region = copy(cat(cat(xmin,xmin,xmax,xmax,xmin).T,cat(ymin,ymax,ymax,ymin,ymin).T))
# matlab/aps_wrf_SAR.m:302
                deminfo.xmin = copy(xmin)
# matlab/aps_wrf_SAR.m:303
                deminfo.xmax = copy(xmax)
# matlab/aps_wrf_SAR.m:304
                deminfo.ymax = copy(ymax)
# matlab/aps_wrf_SAR.m:305
                deminfo.ymin = copy(ymin)
# matlab/aps_wrf_SAR.m:306
                deminfo.dem = copy(dem)
# matlab/aps_wrf_SAR.m:307
                wrf.deminfo = copy(deminfo)
# matlab/aps_wrf_SAR.m:308
                clear('deminfo')
                # checking if the file already exist. Yes append otherwiuze create it
                if exist('tca_support.mat','file') == 2:
                    save('tca_support.mat','-append','wrf')
                else:
                    save('tca_support.mat','wrf')
                save_complete=1
# matlab/aps_wrf_SAR.m:316
            # Could not find the wrf used equation as they appear to be mixed
        # with latent heat etc. Istead I used the equations used in ERA-I
        # (see IFS documentation part 2: Data assimilation (CY25R1)). Calculate 
        # saturated water vapour pressure (svp) for water (svpw) using Buck 1881  
        # and for ice (swpi) from Alduchow and Eskridge (1996) euation AERKi
            svpw=multiply(6.1121,exp((multiply(17.502,(Temp - 273.16))) / (240.97 + Temp - 273.16)))
# matlab/aps_wrf_SAR.m:326
            svpi=multiply(6.1121,exp((multiply(22.587,(Temp - 273.16))) / (273.86 + Temp - 273.16)))
# matlab/aps_wrf_SAR.m:327
            tempbound1=273.16
# matlab/aps_wrf_SAR.m:328
            tempbound2=250.16
# matlab/aps_wrf_SAR.m:329
            svp=copy(svpw)
# matlab/aps_wrf_SAR.m:332
            wgt=(Temp - tempbound2) / (tempbound1 - tempbound2)
# matlab/aps_wrf_SAR.m:334
            svp=svpi + multiply((svpw - svpi),wgt ** 2)
# matlab/aps_wrf_SAR.m:335
            ix_bound1=find(Temp > tempbound1)
# matlab/aps_wrf_SAR.m:336
            svp[ix_bound1]=svpw[ix_bound1]
# matlab/aps_wrf_SAR.m:337
            ix_bound2=find(Temp < tempbound2)
# matlab/aps_wrf_SAR.m:338
            svp[ix_bound2]=svpi[ix_bound2]
# matlab/aps_wrf_SAR.m:339
            e=dot(Hum / 100.0,svp)
# matlab/aps_wrf_SAR.m:341
            # stated (incorrectly) in Jolivet et al. 2011.
            P=copy(Pressure)
# matlab/aps_wrf_SAR.m:344
            g0=9.80665
# matlab/aps_wrf_SAR.m:348
            g=multiply(9.80616,(1 - multiply(0.002637,cosd(dot(2.0,latgrid))) + multiply(5.9e-06,(cosd(dot(2.0,latgrid))) ** 2)))
# matlab/aps_wrf_SAR.m:351
            Rmax=6378137
# matlab/aps_wrf_SAR.m:353
            Rmin=6356752
# matlab/aps_wrf_SAR.m:354
            Re=sqrt(1.0 / (((cosd(latgrid) ** 2) / Rmax ** 2) + ((sind(latgrid) ** 2) / Rmin ** 2)))
# matlab/aps_wrf_SAR.m:355
            Z=(multiply(H,Re)) / (multiply(g / g0,Re) - H)
# matlab/aps_wrf_SAR.m:359
            midx=round(mean(uxlist))
# matlab/aps_wrf_SAR.m:362
            midy=round(mean(uylist))
# matlab/aps_wrf_SAR.m:363
            glocal=g[midy,midx,1]
# matlab/aps_wrf_SAR.m:364
            Rlocal=Re[midy,midx,1]
# matlab/aps_wrf_SAR.m:365
            cdslices=maxdem / vertres + 1
# matlab/aps_wrf_SAR.m:370
            cdstack=zeros(size(lonlist,1),cdslices)
# matlab/aps_wrf_SAR.m:371
            cdstack_dry=zeros(size(lonlist,1),cdslices)
# matlab/aps_wrf_SAR.m:372
            cdstack_wet=zeros(size(lonlist,1),cdslices)
# matlab/aps_wrf_SAR.m:373
            XI=(arange(0,zref,zincr)).T
# matlab/aps_wrf_SAR.m:375
            gh=multiply(glocal,(Rlocal / (Rlocal + XI)) ** 2)
# matlab/aps_wrf_SAR.m:376
            # Interpolate Temp P and e from 0:20:15000 m
        # then integrate using trapz to estimate delay as function of height
            for m in arange(1,size(lonlist,1)).reshape(-1):
                xn=xlist[m]
# matlab/aps_wrf_SAR.m:381
                yn=ylist[m]
# matlab/aps_wrf_SAR.m:382
                X=double(squeeze(Z[yn,xn,:]))
# matlab/aps_wrf_SAR.m:385
                YP=double(squeeze(P[yn,xn,:]))
# matlab/aps_wrf_SAR.m:386
                Ye=double(squeeze(e[yn,xn,:]))
# matlab/aps_wrf_SAR.m:387
                YT=double(squeeze(Temp[yn,xn,:]))
# matlab/aps_wrf_SAR.m:388
                YT[isnan(Ye)]=[]
# matlab/aps_wrf_SAR.m:391
                YP[isnan(Ye)]=[]
# matlab/aps_wrf_SAR.m:392
                X[isnan(Ye)]=[]
# matlab/aps_wrf_SAR.m:393
                Ye[isnan(Ye)]=[]
# matlab/aps_wrf_SAR.m:394
                YeI=dot(interp1(X,Ye,XI,'spline'),100)
# matlab/aps_wrf_SAR.m:396
                YPI=dot(interp1(X,YP,XI,'spline'),100)
# matlab/aps_wrf_SAR.m:397
                YTI=interp1(X,YT,XI,'spline')
# matlab/aps_wrf_SAR.m:398
                tmp1=(multiply((k2 - (dot(Rd,k1) / Rv)),YeI) / YTI + multiply(k3,YeI) / (YTI ** 2))
# matlab/aps_wrf_SAR.m:401
                Lw=dot(multiply((10 ** - 6),- 1),flipud(cumtrapz(flipud(XI),flipud(tmp1))))
# matlab/aps_wrf_SAR.m:402
                tmp2=multiply(k1,YPI) / YTI
# matlab/aps_wrf_SAR.m:404
                gm=copy(glocal)
# matlab/aps_wrf_SAR.m:406
                Ld=multiply((10 ** - 6),(multiply((dot(k1,Rd) / gm),(YPI - YPI[zref / zincr + 1]))))
# matlab/aps_wrf_SAR.m:407
                # Interpolate important part (i.e. total delay at elevations
            # less than maxdem) at high res i.e. vertres, and put in cdstack.
                cdI=(arange(0,maxdem,vertres)).T
# matlab/aps_wrf_SAR.m:411
                LdI=interp1(XI,Ld,cdI,'spline')
# matlab/aps_wrf_SAR.m:412
                LwI=interp1(XI,Lw,cdI,'spline')
# matlab/aps_wrf_SAR.m:413
                cdstack_dry[m,:]=LdI
# matlab/aps_wrf_SAR.m:416
                cdstack_wet[m,:]=LwI
# matlab/aps_wrf_SAR.m:417
            # Interpolate each cdstack layer onto a grid given by the DEM extents
        # in UTM m.
            xsmpres=(xmax - xmin) / nncols
# matlab/aps_wrf_SAR.m:422
            ysmpres=(ymax - ymin) / nnrows
# matlab/aps_wrf_SAR.m:423
            xi,yi=meshgrid(arange(xmin + dot(0.5,xsmpres),xmax - dot(0.5,xsmpres),xsmpres),arange(ymin + dot(0.5,ysmpres),ymax - dot(0.5,ysmpres),ysmpres),nargout=2)
# matlab/aps_wrf_SAR.m:424
            cdstack_interp_dry=zeros(nnrows,nncols,cdslices)
# matlab/aps_wrf_SAR.m:426
            for n in arange(1,cdslices).reshape(-1):
                slicelist=reshape(cdstack_dry[:,n],[],1)
# matlab/aps_wrf_SAR.m:428
                newslice=griddata(lonlist,latlist,slicelist,xi,yi,'linear')
# matlab/aps_wrf_SAR.m:429
                #newslicelist = F(xi,yi);
           #newslice = reshape(newslicelist,nnrows,nncols);
                cdstack_interp_dry[:,:,n]=flipud(newslice)
# matlab/aps_wrf_SAR.m:433
            cdstack_interp_wet=zeros(nnrows,nncols,cdslices)
# matlab/aps_wrf_SAR.m:436
            for n in arange(1,cdslices).reshape(-1):
                slicelist=reshape(cdstack_wet[:,n],[],1)
# matlab/aps_wrf_SAR.m:438
                newslice=griddata(lonlist,latlist,slicelist,xi,yi,'linear')
# matlab/aps_wrf_SAR.m:439
                #newslicelist = F(xi,yi);
           #newslice = reshape(newslicelist,nnrows,nncols);
                cdstack_interp_wet[:,:,n]=flipud(newslice)
# matlab/aps_wrf_SAR.m:443
            # keeping the coordinates in the same grid as the data
            xi=flipud(xi)
# matlab/aps_wrf_SAR.m:446
            yi=flipud(yi)
# matlab/aps_wrf_SAR.m:447
            wetcorrection=ones(nnrows,nncols)
# matlab/aps_wrf_SAR.m:451
            hydrcorrection=ones(nnrows,nncols)
# matlab/aps_wrf_SAR.m:452
            rounddem=round(dem / vertres)
# matlab/aps_wrf_SAR.m:453
            rounddem[dem < 0]=0
# matlab/aps_wrf_SAR.m:454
            rounddem[isnan(dem)]=0
# matlab/aps_wrf_SAR.m:457
            for i in arange(1,nnrows).reshape(-1):
                for j in arange(1,nncols).reshape(-1):
                    wetcorrection[i,j]=cdstack_interp_wet[i,j,rounddem[i,j] + 1]
# matlab/aps_wrf_SAR.m:461
            for i in arange(1,nnrows).reshape(-1):
                for j in arange(1,nncols).reshape(-1):
                    hydrcorrection[i,j]=cdstack_interp_dry[i,j,rounddem[i,j] + 1]
# matlab/aps_wrf_SAR.m:467
            # note that this is a one way Zenith delay and not a slant delay.
        # Units are in cm
        # Output wet correction
            wetcorrection=dot(wetcorrection,100)
# matlab/aps_wrf_SAR.m:475
            fid=fopen(outfile,'w')
# matlab/aps_wrf_SAR.m:476
            data_write=cat(reshape(xi,[],1),reshape(yi,[],1),reshape(wetcorrection,[],1)).T
# matlab/aps_wrf_SAR.m:477
            tally=fwrite(fid,data_write,'double')
# matlab/aps_wrf_SAR.m:478
            fclose(fid)
            fid=fopen(outfile2,'w')
# matlab/aps_wrf_SAR.m:480
            fwrite(fid,wetcorrection.T,'real*4')
            fclose(fid)
            hydrcorrection=dot(hydrcorrection,100)
# matlab/aps_wrf_SAR.m:485
            fid=fopen(hydroutfile,'w')
# matlab/aps_wrf_SAR.m:486
            data_write=cat(reshape(xi,[],1),reshape(yi,[],1),reshape(hydrcorrection,[],1)).T
# matlab/aps_wrf_SAR.m:487
            tally=fwrite(fid,data_write,'double')
# matlab/aps_wrf_SAR.m:488
            fclose(fid)
            fid=fopen(hydroutfile2,'w')
# matlab/aps_wrf_SAR.m:490
            fwrite(fid,hydrcorrection.T,'real*4')
            fclose(fid)
            fprintf(cat(num2str(d),' completed out of ',num2str(n_dates),'\\n'))
        else:
            fprintf(cat('No wrf data for ',date,' \\n'))
    