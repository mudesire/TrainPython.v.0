# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/aps_meris_InSAR.m

    
@function
def aps_meris_InSAR(*args,**kwargs):
    varargin = aps_meris_InSAR.varargin
    nargin = aps_meris_InSAR.nargin

    # [] = aps_meris_InSAR()
# Goes to the InSAR data path and interpolate the meris result to the InSAR
# grid. Skip those images that do not have meris data to correct for.
# Also only keep those meris tracks that cover a percentage of the InSAR
# track. The tropospheric correction results are stored in the "tca2.mat" or "tca_sb2.mat" file as the ph_tropo_meris variable.
# The sign convention is defined such ph_after_corection = ph - ph_tropo_meris is the phase corrected 
# the tropospheric signal. Note that it only uses a wet delay. The dry
# delay is not ideal, as it is based on a exponential decay and scale
# height and it therefore not included. Use the ERA, WRF estiamted
# hydrostatic delays instead.
    
    
    #     Copyright (C) 2015  Bekaert David - University of Leeds
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
    
    #     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
    
    #     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
    
    #     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    
    # By David Bekaert - September 2013
# University of Leeds
    
    # modifications
# 10/2013   DB      Integrating other processing structure than stamps
# 05/2014   DB      Include variable name for non-stamps processing.
# 05/2015   DB      Output the information about percentage of cloud cover
# 06/2015   DB      flag the parameters that are used.
    
    # The meris files used for the estimation. 
# The no interp file is used to check the cloud coverage.
# the interpolated file is used as correction result.
    meris_file_suffix_nointerp='SWD_nointerp.xyz'
# Trainmatlab.v.0/aps_meris_InSAR.m:44
    meris_file_suffix_interp='SWD_surf.xyz'
# Trainmatlab.v.0/aps_meris_InSAR.m:45
    # getting the variables from the parms_aps file
    stamps_processed=getparm_aps('stamps_processed',1)
# Trainmatlab.v.0/aps_meris_InSAR.m:49
    ll_matfile=getparm_aps('ll_matfile',1)
# Trainmatlab.v.0/aps_meris_InSAR.m:50
    meris_datapath=getparm_aps('meris_datapath',1)
# Trainmatlab.v.0/aps_meris_InSAR.m:51
    meris_perc_coverage=getparm_aps('meris_perc_coverage',1)
# Trainmatlab.v.0/aps_meris_InSAR.m:52
    
    #                                                           have meris coverage. In case this is less
#                                                           the meris data is rejected.
    lambda_=dot(getparm_aps('lambda',1),100)
# Trainmatlab.v.0/aps_meris_InSAR.m:55
    
    datestructure='yyyymmdd'
# Trainmatlab.v.0/aps_meris_InSAR.m:56
    
    # getting the dropped ifgs
    
    # loading the data
    if strcmp(stamps_processed,'y'):
        fprintf('Stamps processed structure \\n')
        drop_ifg_index=getparm('drop_ifg_index')
# Trainmatlab.v.0/aps_meris_InSAR.m:63
        ps=load(ll_matfile)
# Trainmatlab.v.0/aps_meris_InSAR.m:65
        load('psver')
        dates=ps.day
# Trainmatlab.v.0/aps_meris_InSAR.m:67
        lonlat=ps.lonlat
# Trainmatlab.v.0/aps_meris_InSAR.m:68
        if strcmp(getparm('small_baseline_flag'),'y'):
            sb_flag=1
# Trainmatlab.v.0/aps_meris_InSAR.m:72
        else:
            sb_flag=0
# Trainmatlab.v.0/aps_meris_InSAR.m:74
        n_ifg=ps.n_ifg
# Trainmatlab.v.0/aps_meris_InSAR.m:77
        if sb_flag == 1:
            # for SB
            ifg_number=cat(arange(1,n_ifg)).T
# Trainmatlab.v.0/aps_meris_InSAR.m:81
            ifgday_ix=ps.ifgday_ix
# Trainmatlab.v.0/aps_meris_InSAR.m:82
            ifgday_ix[drop_ifg_index,:]=[]
# Trainmatlab.v.0/aps_meris_InSAR.m:84
            ifg_number[drop_ifg_index]=[]
# Trainmatlab.v.0/aps_meris_InSAR.m:85
            ifgs_ix=matlabarray(cat(ifgday_ix,ifg_number))
# Trainmatlab.v.0/aps_meris_InSAR.m:88
            ifgs_ix_no_interp=copy(ifgs_ix)
# Trainmatlab.v.0/aps_meris_InSAR.m:89
        else:
            # slightly different for PS.
            date_slave_ix=cat(arange(1,n_ifg)).T
# Trainmatlab.v.0/aps_meris_InSAR.m:93
            ifg_number=cat(arange(1,n_ifg)).T
# Trainmatlab.v.0/aps_meris_InSAR.m:94
            date_slave_ix[drop_ifg_index]=[]
# Trainmatlab.v.0/aps_meris_InSAR.m:97
            ifg_number[drop_ifg_index]=[]
# Trainmatlab.v.0/aps_meris_InSAR.m:98
            date_master_ix=repmat(ps.master_ix,size(date_slave_ix,1),1)
# Trainmatlab.v.0/aps_meris_InSAR.m:101
            ifgs_ix=matlabarray(cat(date_master_ix,date_slave_ix,ifg_number))
# Trainmatlab.v.0/aps_meris_InSAR.m:104
            ifgs_ix_no_interp=copy(ifgs_ix)
# Trainmatlab.v.0/aps_meris_InSAR.m:105
    else:
        psver=2
# Trainmatlab.v.0/aps_meris_InSAR.m:109
        sb_flag=0
# Trainmatlab.v.0/aps_meris_InSAR.m:110
        lonlat=load(ll_matfile)
# Trainmatlab.v.0/aps_meris_InSAR.m:113
        lonlat=lonlat.lonlat
# Trainmatlab.v.0/aps_meris_InSAR.m:114
        ifgday_matfile=getparm_aps('ifgday_matfile')
# Trainmatlab.v.0/aps_meris_InSAR.m:121
        ifgs_dates=load(ifgday_matfile)
# Trainmatlab.v.0/aps_meris_InSAR.m:122
        ifgs_dates=ifgs_dates.ifgday
# Trainmatlab.v.0/aps_meris_InSAR.m:123
        dates=reshape(ifgs_dates,[],1)
# Trainmatlab.v.0/aps_meris_InSAR.m:124
        dates=unique(dates)
# Trainmatlab.v.0/aps_meris_InSAR.m:125
        dates=datenum(num2str(dates),'yyyymmdd')
# Trainmatlab.v.0/aps_meris_InSAR.m:126
        dates=sort(dates)
# Trainmatlab.v.0/aps_meris_InSAR.m:127
        # getting the ix position for the master and slave dates with respect
    # to the times
        date_master=datenum(num2str(ifgs_dates[:,1]),'yyyymmdd')
# Trainmatlab.v.0/aps_meris_InSAR.m:131
        date_slave=datenum(num2str(ifgs_dates[:,2]),'yyyymmdd')
# Trainmatlab.v.0/aps_meris_InSAR.m:132
        ifg_number=cat(arange(1,size(date_master,1))).T
# Trainmatlab.v.0/aps_meris_InSAR.m:133
        for k in arange(1,size(date_master,1)).reshape(-1):
            date_master_ix[k,1]=find(date_master[k,1] == dates)
# Trainmatlab.v.0/aps_meris_InSAR.m:137
            date_slave_ix[k,1]=find(date_slave[k,1] == dates)
# Trainmatlab.v.0/aps_meris_InSAR.m:138
        # ix interferograms
        ifgs_ix=matlabarray(cat(date_master_ix,date_slave_ix,ifg_number))
# Trainmatlab.v.0/aps_meris_InSAR.m:142
        n_ifg=size(ifgs_dates,1)
# Trainmatlab.v.0/aps_meris_InSAR.m:145
        fprintf('Check the InSAR dates, this has not been tested \\n')
    
    InSAR_datapath=matlabarray(cat('.',filesep))
# Trainmatlab.v.0/aps_meris_InSAR.m:151
    apsname=matlabarray(cat(InSAR_datapath,'tca',num2str(psver),'.mat'))
# Trainmatlab.v.0/aps_meris_InSAR.m:152
    apssbname=matlabarray(cat(InSAR_datapath,'tca_sb',num2str(psver),'.mat'))
# Trainmatlab.v.0/aps_meris_InSAR.m:153
    n_dates=length(dates)
# Trainmatlab.v.0/aps_meris_InSAR.m:157
    n_points=size(lonlat,1)
# Trainmatlab.v.0/aps_meris_InSAR.m:158
    ## loading the meris data
# initialisation
    d_meris=NaN(cat(n_points,n_dates))
# Trainmatlab.v.0/aps_meris_InSAR.m:162
    
    d_meris_no_interp=NaN(cat(n_points,n_dates))
# Trainmatlab.v.0/aps_meris_InSAR.m:163
    
    SAR_meris_perc=NaN(cat(n_dates,1))
# Trainmatlab.v.0/aps_meris_InSAR.m:166
    
    counter=0
# Trainmatlab.v.0/aps_meris_InSAR.m:167
    counter_threshold=0
# Trainmatlab.v.0/aps_meris_InSAR.m:168
    ix_no_meris=matlabarray([])
# Trainmatlab.v.0/aps_meris_InSAR.m:169
    ix_no_meris_coverage=matlabarray([])
# Trainmatlab.v.0/aps_meris_InSAR.m:170
    ix_no_meris_no_interp_file=matlabarray([])
# Trainmatlab.v.0/aps_meris_InSAR.m:171
    for k in arange(1,n_dates).reshape(-1):
        # getting the SAR data and convert it to a string
        meris_date_str=datestr(dates[k,1],datestructure)
# Trainmatlab.v.0/aps_meris_InSAR.m:174
        meris_filename_interp=matlabarray(cat(meris_datapath,filesep,meris_date_str,filesep,meris_date_str,'_',meris_file_suffix_interp))
# Trainmatlab.v.0/aps_meris_InSAR.m:177
        meris_filename_nointerp=matlabarray(cat(meris_datapath,filesep,meris_date_str,filesep,meris_date_str,'_',meris_file_suffix_nointerp))
# Trainmatlab.v.0/aps_meris_InSAR.m:178
        # leave NaN's in the matrix.
        if exist(meris_filename_interp,'file') == 2:
            # computing the percentage of pixels that do not have data coverage
            if exist(meris_filename_nointerp,'file') == 2:
                xyz_input_nointerp,xyz_output_nointerp=load_meris_SAR(meris_filename_nointerp,lonlat,nargout=2)
# Trainmatlab.v.0/aps_meris_InSAR.m:185
                d_meris_no_interp[:,k]=xyz_output_nointerp[:,3]
# Trainmatlab.v.0/aps_meris_InSAR.m:188
                SAR_meris_perc[k,1]=dot((1 - sum(isnan(xyz_output_nointerp[:,3])) / n_points),100)
# Trainmatlab.v.0/aps_meris_InSAR.m:190
                if dot((1 - sum(isnan(xyz_output_nointerp[:,3])) / n_points),100) < meris_perc_coverage:
                    # reject the meris acquisition as to much of it is covered
                # by clouds.
                    keep_meris=0
# Trainmatlab.v.0/aps_meris_InSAR.m:194
                    counter_threshold=counter_threshold + 1
# Trainmatlab.v.0/aps_meris_InSAR.m:195
                else:
                    # good meris acquisition
                    keep_meris=1
# Trainmatlab.v.0/aps_meris_InSAR.m:198
                clear('xyz_input_nointerp','xyz_output_nointerp')
            else:
                # no way to test if its a good meris track, keep it.
            # best is to keep all the outputs from the meris computation
                keep_meris=1
# Trainmatlab.v.0/aps_meris_InSAR.m:204
            if keep_meris == 1:
                # load the interpolated meris data
                xyz_input_interp,xyz_output_interp=load_meris_SAR(meris_filename_interp,lonlat,nargout=2)
# Trainmatlab.v.0/aps_meris_InSAR.m:209
                clear('xyz_input_interp')
                # saving the output data
                d_meris[:,k]=xyz_output_interp[:,3]
# Trainmatlab.v.0/aps_meris_InSAR.m:213
                clear('xyz_output_interp')
                # counting the number of SAR dates with meris data that have
            # enough coverage
                counter=counter + 1
# Trainmatlab.v.0/aps_meris_InSAR.m:218
            else:
                # rejected list of meris images
                ix_no_meris=matlabarray(cat(ix_no_meris,k))
# Trainmatlab.v.0/aps_meris_InSAR.m:221
        else:
            # rejected list of meris images
            ix_no_meris_no_interp_file=matlabarray(cat(ix_no_meris_no_interp_file,k))
# Trainmatlab.v.0/aps_meris_InSAR.m:225
            ix_no_meris=matlabarray(cat(ix_no_meris,k))
# Trainmatlab.v.0/aps_meris_InSAR.m:226
            ix_no_meris_coverage=matlabarray(cat(ix_no_meris_coverage,k))
# Trainmatlab.v.0/aps_meris_InSAR.m:227
        clear('meris_filename','meris_date_str')
    
    fprintf(cat(num2str(counter),' out of ',num2str(n_dates),' SAR images have a tropospheric delay estimated \\n'))
    fprintf(cat(num2str(counter_threshold),' images did not meet the ',num2str(meris_perc_coverage),' procent threshold. \\n'))
    # outputting a summary of the meris data:
    no_meris_data=repmat(' ',n_dates,13)
# Trainmatlab.v.0/aps_meris_InSAR.m:236
    no_meris_data[ix_no_meris_coverage,:]=repmat('no meris data',length(ix_no_meris_coverage),1)
# Trainmatlab.v.0/aps_meris_InSAR.m:237
    output_str=matlabarray(cat(datestr(dates,datestructure),repmat(':  ',n_dates,1),num2str(round(dot(SAR_meris_perc,10)) / 10),repmat(' procent     ',n_dates,1),no_meris_data,repmat('\\n  ',n_dates,1)))
# Trainmatlab.v.0/aps_meris_InSAR.m:239
    for k in arange(1,n_dates).reshape(-1):
        fprintf(cat(output_str[k,:]))
    
    fprintf(cat(num2str(n_dates - (counter + counter_threshold)),' images did not have meris data \\n'))
    ## Converting the meris delays to a phase delay
# converting to phase delay. 
# The sign convention is such that ph_corrected = ph_original - ph_meris
    ph_SAR_meris=multiply(dot(- 4,pi) / lambda_,d_meris)
# Trainmatlab.v.0/aps_meris_InSAR.m:250
    ph_SAR_meris_no_interp=multiply(dot(- 4,pi) / lambda_,d_meris_no_interp)
# Trainmatlab.v.0/aps_meris_InSAR.m:251
    clear('d_meris','d_meris_no_interp')
    ## Computing the interferometric tropopsheric delays
# removing the dates for which there is no data.
    if isempty(ix_no_meris) != 1:
        for k in arange(1,length(ix_no_meris)).reshape(-1):
            # reject based on slave dates
            ix_ifg_reject=find(ix_no_meris[k] == ifgs_ix[:,2])
# Trainmatlab.v.0/aps_meris_InSAR.m:260
            ifgs_ix[ix_ifg_reject,:]=[]
# Trainmatlab.v.0/aps_meris_InSAR.m:261
            ix_ifg_reject=find(ix_no_meris[k] == ifgs_ix[:,1])
# Trainmatlab.v.0/aps_meris_InSAR.m:263
            ifgs_ix[ix_ifg_reject,:]=[]
# Trainmatlab.v.0/aps_meris_InSAR.m:264
            clear('ix_ifg_reject')
    
    # removing the dates for which there is no data.
    if isempty(ix_no_meris_no_interp_file) != 1:
        for k in arange(1,length(ix_no_meris_no_interp_file)).reshape(-1):
            # reject based on slave dates
            ix_ifg_reject_no_interp=find(ix_no_meris_no_interp_file[k] == ifgs_ix_no_interp[:,2])
# Trainmatlab.v.0/aps_meris_InSAR.m:273
            ifgs_ix_no_interp[ix_ifg_reject_no_interp,:]=[]
# Trainmatlab.v.0/aps_meris_InSAR.m:274
            ix_ifg_reject_no_interp=find(ix_no_meris_no_interp_file[k] == ifgs_ix_no_interp[:,1])
# Trainmatlab.v.0/aps_meris_InSAR.m:276
            ifgs_ix_no_interp[ix_ifg_reject_no_interp,:]=[]
# Trainmatlab.v.0/aps_meris_InSAR.m:277
            clear('ix_ifg_reject_no_interp')
    
    # computing the interferometric delay for each remaining interferogram
    n_ifg_meris=size(ifgs_ix,1)
# Trainmatlab.v.0/aps_meris_InSAR.m:284
    if isempty(ifgs_ix):
        fprintf('Not enough meris data to compute interferometric delays...\\n')
    
    # initialize the meris phase matrix for all interferograms, including those
# without correction.
    ph_tropo_meris=zeros(cat(n_points,n_ifg))
# Trainmatlab.v.0/aps_meris_InSAR.m:290
    ph_tropo_meris_no_interp=NaN(cat(n_points,n_ifg))
# Trainmatlab.v.0/aps_meris_InSAR.m:291
    for k in arange(1,n_ifg_meris).reshape(-1):
        ph_tropo_meris[:,ifgs_ix[k,3]]=ph_SAR_meris[:,ifgs_ix[k,1]] - ph_SAR_meris[:,ifgs_ix[k,2]]
# Trainmatlab.v.0/aps_meris_InSAR.m:293
    
    n_ifg_meris_no_interp=size(ifgs_ix_no_interp,1)
# Trainmatlab.v.0/aps_meris_InSAR.m:295
    for k in arange(1,n_ifg_meris_no_interp).reshape(-1):
        ph_tropo_meris_no_interp[:,ifgs_ix_no_interp[k,3]]=ph_SAR_meris_no_interp[:,ifgs_ix_no_interp[k,1]] - ph_SAR_meris_no_interp[:,ifgs_ix_no_interp[k,2]]
# Trainmatlab.v.0/aps_meris_InSAR.m:297
    
    if sb_flag == 1:
        if exist(apssbname,'file') == 2:
            save(apssbname,'-append','ph_tropo_meris','ph_tropo_meris_no_interp')
        else:
            save(apssbname,'ph_tropo_meris','ph_tropo_meris_no_interp')
    else:
        if exist(apsname,'file') == 2:
            save(apsname,'-append','ph_tropo_meris','ph_tropo_meris_no_interp')
        else:
            save(apsname,'ph_tropo_meris','ph_tropo_meris_no_interp')
    
    # output cloud information
    meris.SAR_no_cloud_perc = copy(SAR_meris_perc)
# Trainmatlab.v.0/aps_meris_InSAR.m:316
    meris.ix_no_data = copy(ix_no_meris_coverage)
# Trainmatlab.v.0/aps_meris_InSAR.m:317
    if exist('tca_support.mat','file') == 2:
        save('tca_support.mat','-append','meris')
    else:
        save('tca_support.mat','meris')
    