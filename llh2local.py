# Autogenerated with SMOP 
from smop.core import *
# Trainmatlab.v.0/llh2local.m

    
@function
def llh2local(llh=None,origin=None,*args,**kwargs):
    varargin = llh2local.varargin
    nargin = llh2local.nargin

    #llh2local     xy=llh2local(llh,origin)
    
    #Converts from longitude and latitude to local coorindates
#given an origin.  llh (lon; lat; height) and origin should
#be in decimal degrees. Note that heights are ignored and
#that xy is in km.
    
    #     Copyright (C) 2015
#     Email: eedpsb@leeds.ac.uk or davidbekaert.com
#     With permission by Peter Cervelli, Jessica Murray 
# 
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License along
#     with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
    
    #-------------------------------------------------------------
#   Record of revisions:
    
    #   Date          Programmer            Description of Change
#   ====          ==========            =====================
    
    #   Sept 7, 2000  Peter Cervelli		Original Code
#   Oct 20, 2000  Jessica Murray        Changed name from DM_llh2local to 
#                                       llh2local for use with non-DM functions;
#                                       Added to help message to clarify order
#                                       of 'llh' (i.e., lon, lat, height).
#   Dec. 6, 2000  Jessica Murray        Clarified help to show that llh 
#                                       is a column vector
    
    
    #-------------------------------------------------------------
    
    #Set ellipsoid constants (WGS84)
    
    a=6378137.0
# Trainmatlab.v.0/llh2local.m:46
    e=0.0820944379497
# Trainmatlab.v.0/llh2local.m:47
    #Convert to radians
#   llh=llh*pi/180;
#   origin=origin*pi/180;
    llh=dot(double(llh),pi) / 180
# Trainmatlab.v.0/llh2local.m:52
    origin=dot(double(origin),pi) / 180
# Trainmatlab.v.0/llh2local.m:53
    #Do the projection
    
    z=llh[2,:] != 0
# Trainmatlab.v.0/llh2local.m:57
    dlambda=llh[1,z] - origin[1]
# Trainmatlab.v.0/llh2local.m:59
    M=dot(a,(dot((1 - e ** 2 / 4 - dot(3,e ** 4) / 64 - dot(5,e ** 6) / 256),llh[2,z]) - dot((dot(3,e ** 2) / 8 + dot(3,e ** 4) / 32 + dot(45,e ** 6) / 1024),sin(dot(2,llh[2,z]))) + dot((dot(15,e ** 4) / 256 + dot(45,e ** 6) / 1024),sin(dot(4,llh[2,z]))) - dot((dot(35,e ** 6) / 3072),sin(dot(6,llh[2,z])))))
# Trainmatlab.v.0/llh2local.m:61
    M0=dot(a,(dot((1 - e ** 2 / 4 - dot(3,e ** 4) / 64 - dot(5,e ** 6) / 256),origin[2]) - dot((dot(3,e ** 2) / 8 + dot(3,e ** 4) / 32 + dot(45,e ** 6) / 1024),sin(dot(2,origin[2]))) + dot((dot(15,e ** 4) / 256 + dot(45,e ** 6) / 1024),sin(dot(4,origin[2]))) - dot((dot(35,e ** 6) / 3072),sin(dot(6,origin[2])))))
# Trainmatlab.v.0/llh2local.m:66
    N=a / sqrt(1 - dot(e ** 2,sin(llh[2,z]) ** 2))
# Trainmatlab.v.0/llh2local.m:71
    E=multiply(dlambda,sin(llh[2,z]))
# Trainmatlab.v.0/llh2local.m:72
    xy[1,z]=multiply(multiply(N,cot(llh[2,z])),sin(E))
# Trainmatlab.v.0/llh2local.m:74
    xy[2,z]=M - M0 + multiply(multiply(N,cot(llh[2,z])),(1 - cos(E)))
# Trainmatlab.v.0/llh2local.m:75
    #Handle special case of latitude = 0
    
    xy[1,logical_not(z)]=dot(a,dlambda[logical_not(z)])
# Trainmatlab.v.0/llh2local.m:79
    xy[2,logical_not(z)]=- M0
# Trainmatlab.v.0/llh2local.m:80
    #Convert to km
    
    xy=xy / 1000
# Trainmatlab.v.0/llh2local.m:84